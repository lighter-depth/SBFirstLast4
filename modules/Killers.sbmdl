module STD_KILLERS;

requires: STD;

#define STD_KILLERS

#define KILLEROF(_X) @TW.Where(Start == "_X".LastChar && \cl(/_X/d) * (Length > 6 ? 2 : 1) > 7)
#define KILLEDBY(_X) @TW.Where(End == "_X".FirstChar && /_X/d.\cl(it) * ("_X".Length > 6 ? 2 : 1) > 7)

#transient __XER__  \cl(/_X/d) * (Length > 6 ? 2 : (Length == 6 || \c($G) || \c($B) || \c($Q) || \c($P) || \c($Z) || \c($R)) ? 1.5 : 1)
#transient __XED__  /_X/d.\cl(it) * ("_X".Length > 6 ? 2 : ("_X".Length == 6 || /_X/d.\c($G) || /_X/d.\c($B) || /_X/d.\c($Q) || /_X/d.\c($P) || /_X/d.\c($Z) || /_X/d.\c($R)) ? 1.5 : 1)

#define XEROF(_X, _Y) @TW.Where(Start == "_X".LastChar && __XER__ _Y)
#define XEDBY(_X, _Y) @TW.Where(End == "_X".FirstChar && __XED__ _Y)

#define XEROF2(_X, _Y, _Z) @TW.Where(Start == "_X".LastChar && __XER__ _Y && __XER__ _Z)
#define XEDBY2(_X, _Y, _Z) @TW.Where(End == "_X".FirstChar && __XED__ _Y && __XED__ _Z)


#define SEMIKILLEROF(_X) XEROF(_X, >5)
#define SEMIKILLEDBY(_X) XEDBY(_X, >5)

#define 8XEROF(_X) XEROF(_X, ==8)
#define 8XEDBY(_X) XEDBY(_X, ==8)

#define 6XEROF(_X) XEROF(_X, ==6)
#define 6XEDBY(_X) XEDBY(_X, ==6)

#define 4XEROF(_X) XEROF(_X, ==4)
#define 4XEDBY(_X) XEDBY(_X, ==4)

#define 3XEROF(_X) XEROF(_X, ==3)
#define 3XEDBY(_X) XEDBY(_X, ==3)

#define 2XEROF(_X) XEROF(_X, ==2)
#define 2XEDBY(_X) XEDBY(_X, ==2)

#transient __WT__(_T) \c("_T".\s2t())

#define KILLABLET(_T) @TW.Where(__WT__(_T)).Select(Name).Intersect(@8X)
#define SEMIKILLABLET(_T) @TW.Where(__WT__(_T)).Select(Name).Intersect(@6X)
#define 4XABLET(_T) @TW.Where(__WT__(_T)).Select(Name).Intersect(@4X)

#define KILLABLET2(_T1, _T2) @TW.Where(__WT__(_T1) && __WT__(_T2)).Select(Name).Intersect(@8X)
#define SEMIKILLABLET2(_T1, _T2) @TW.Where(__WT__(_T1) && __WT__(_T2)).Select(Name).Intersect(@6X)
#define 4XABLET2(_T1, _T2) @TW.Where(__WT__(_T1) && __WT__(_T2)).Select(Name).Intersect(@4X)

#define @KN { "あ", "い", "う", "え", "お", "か", "き", "く", "け", "こ", "さ", "し", "す", "せ", "そ", "た", "ち", "つ", "て", "と", "な", "に", "ぬ", "ね", "の", "は", "ひ", "ふ", "へ", "ほ", "ま", "み", "む", "め", "も", "や", "ゆ", "よ", "ら", "り", "る", "れ", "ろ", "わ", "が", "ぎ", "ぐ", "げ", "ご", "ざ", "じ", "ず", "ぜ", "ぞ", "だ", "で", "ど", "ば", "び", "ぶ", "べ", "ぼ", "ぱ", "ぴ", "ぷ", "ぺ", "ぽ" }


#transient __KN__(_T) @KN.Select(Word(it, "_T".\s2t(), $I))
#define KILLST(_T) __KN__(_T).Select(x => @TW.Where(y => y.Start == x.End && y.\cl(x) * (Length > 6 ? 2 : 1) > 7)).SelectMany(it).Distinct()
#define SEMIKILLST(_T) __KN__(_T).Select(x => @TW.Where(y => y.Start == x.End && y.\cl(x) * (y.Length > 6 ? 2 : (y.Length == 6 || y.\c($G) || y.\c($B) || y.\c($Q) || y.\c($P) || y.\c($Z) || y.\c($R)) ? 1.5 : 1) > 5))

#define KILLEROFR(_X) @TW.Where(Start == /_X/m.End && \cl(/_X/m) * (Length > 6 ? 2 : 1) > 7)
#define KILLEDBYR(_X) @TW.Where(End == /_X/m.Start && /_X/m.\cl(it) * (/_X/m.Length > 6 ? 2 : 1) > 7)
