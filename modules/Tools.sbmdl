module STD_TOOLS;

requires: STD;

#define STD_TOOLS

#define UNO(_X) @TW.Where(Start == "_X".LastChar).Where((Length > 6 ? "_X".Length > 6 : Length == "_X".Length) || \c(/_X/d.Type1) || (/_X/d.Type2 != $I && \c(/_X/d.Type2))).OrderBy(it)

#define DAIFUGO(_X) @TW.Where(Start == "_X".LastChar && Length > 1).Where((Length - "_X".Length > 0 && Length - "_X".Length < 3) || ("_X".Length > 6 && (Length == 2 || Length == 3))).OrderBy(Length)
#define DAIFUGOR(_X) @TW.Where(Start == "_X".LastChar && Length > 1).Where((Length - "_X".Length > -3 && Length - "_X".Length < 0) || ("_X".Length < 3 && Length > 5)).OrderBy(Length)

#define OSHARACE(_X) @TW.Where(Start == "_X".LastChar).Where("_X".\c(Name.LastChar) && Length > 2).OrderBy(it)

#define STARTS(_X) @TW.Where(Start == '_X')
#define ENDS(_X) @TW.Where(`_Xー*$`.\~(Name))
#define STARTSN(_X) @NN.Where(FirstChar == '_X')
#define ENDSN(_X) @NN.Where(`_Xー*$`.\~(it))

#transient __COUNT__(_X, _Y, _Z, _W) &_la = @NN.Where(_X).Where(_Y); &_da = @TW.Where(_Z).Where(_W); print(\$("無属性: {0}個", &_la.Count())); print(\$("有属性: {0}個", &_da.Count())); print(\$("合計: {0}個", &_la.Count() + &_da.Count())); delete &_la; delete &_da

#define COUNTF(_A, _B) __COUNT__("_A" == "*" ? true : \fc == '_A', "_B" == "*" ? true : \lc == '_B', "_A" == "*" ? true : Start == '_A', "_B" == "*" ? true : End == '_B')

#define UNOMAX(_X) UNO(_X).Select(AttackInfo.Create(it, $I, int(\cl(/_X/d)), 0)).OrderByDescending(MaxDmg).Take(10).Select(\$("{0} [{1}倍]", Word, MaxDmg))
