module STD_KILLERS;

requires: STD;

#define STD_KILLERS

#define KILLEROF(_X) @TW.Where(w => w.Start == "_X".LastChar && w.CalcEffectiveDmg(/_X/d) * (w.Name.Length > 6 ? 2 : 1) > 7)
#define KILLEDBY(_X) @TW.Where(w => w.End == "_X".FirstChar && /_X/d.CalcEffectiveDmg(w) * ("_X".Length > 6 ? 2 : 1) > 7)

#define XEROF(_X, _Y) @TW.Where(w => w.Start == "_X".LastChar && w.CalcEffectiveDmg(/_X/d) * (w.Name.Length > 6 ? 2 : (w.Name.Length == 6 || w.\c($G) || w.\c($B) || w.\c($Q) || w.\c($P) || w.\c($Z) || w.\c($R)) ? 1.5 : 1) _Y)
#define XEDBY(_X, _Y) @TW.Where(w => w.End == "_X".FirstChar && /_X/d.CalcEffectiveDmg(w) * ("_X".Length > 6 ? 2 : ("_X".Length == 6 || /_X/d.\c($G) || /_X/d.\c($B) || /_X/d.\c($Q) || /_X/d.\c($P) || /_X/d.\c($Z) || /_X/d.\c($R)) ? 1.5 : 1) _Y)

#define SEMIKILLEROF(_X) XEROF(_X, >5)
#define SEMIKILLEDBY(_X) XEDBY(_X, >5)

#define 8XEROF(_X) XEROF(_X, ==8)
#define 8XEDBY(_X) XEDBY(_X, ==8)

#define 6XEROF(_X) XEROF(_X, ==6)
#define 6XEDBY(_X) XEDBY(_X, ==6)

#define 4XEROF(_X) XEROF(_X, ==4)
#define 4XEDBY(_X) XEDBY(_X, ==4)

#define 3XEROF(_X) XEROF(_X, ==3)
#define 3XEDBY(_X) XEDBY(_X, ==3)

#define 2XEROF(_X) XEROF(_X, ==2)
#define 2XEDBY(_X) XEDBY(_X, ==2)