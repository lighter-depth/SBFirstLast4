@using System.Reflection
@namespace SBFirstLast4.Expression

<div class="pipe"></div>
<div class="tree-node">
	<div class="node-title">
		@NodeTitle
	</div>
	<select @onchange="e =>
		{
			SelectedProperty = InfoDictionary.TryGetValue((string?)e.Value ?? string.Empty, out var v) ? v : null;
		}">
		@foreach (var p in Type?.GetProperties() ?? Array.Empty<PropertyInfo>())
		{
			if (p is null)
				continue;

			<option value=@(p.PropertyType.Name + p.Name)>@(p.Name ?? string.Empty)</option>
			InfoDictionary[p.PropertyType.Name + p.Name] = p;
		}
	</select>
</div>

@code {
	protected override void OnParametersSet()
	{
		SelectedProperty = Type.GetProperties().At(0);
	}

	private Dictionary<string, PropertyInfo> InfoDictionary = new();
	private PropertyInfo? SelectedProperty;
	[Parameter] public string NodeTitle { get; set; } = string.Empty;
	[Parameter] public required Type Type { get; set; }
	public Type? OutType => SelectedProperty?.PropertyType;
}
