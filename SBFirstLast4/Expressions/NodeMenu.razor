@page "/node-menu"
@using SBFirstLast4.Pages
@inject IJSRuntime JSRuntime

<div class="dropdown-content" style="display: @DisplayAttr(ShowMenu.Node)">
	@if (IsTyped)
	{
		<a @onclick="() => OpenMenu(nameof(ShowMenuUI.First))">最初の文字</a>
		<a @onclick="() => OpenMenu(nameof(ShowMenuUI.Last))">最後の文字</a>
		<a @onclick="() => OpenMenu(nameof(ShowMenuUI.Length))">長さ</a>
		<a @onclick="() => OpenMenu(nameof(ShowMenuUI.Type))">タイプ</a>
		<a @onclick="() => OpenMenu(nameof(ShowMenuUI.Regex))">正規表現</a>
		<a @onclick="() => OpenMenu(nameof(ShowMenuUI.Specialized))">特殊条件</a>
		<a @onclick="() => OpenMenu(nameof(ShowMenuUI.Group))">グループ</a>
	}
	else
	{
		<a @onclick="() => OpenMenu(nameof(ShowMenuUI.First))">最初の文字</a>
		<a @onclick="() => OpenMenu(nameof(ShowMenuUI.Last))">最後の文字</a>
		<a @onclick="() => OpenMenu(nameof(ShowMenuUI.Length))">長さ</a>
		<a @onclick="() => OpenMenu(nameof(ShowMenuUI.Regex))">正規表現</a>
		<a @onclick="() => OpenMenu(nameof(ShowMenuUI.Group))">グループ</a>
	}
</div>


@if (ShowMenu.First)
{
	<FirstMenu ShowMenu="ShowMenu" Nodes="Nodes" />
}

else if (ShowMenu.Last)
{
	<LastMenu ShowMenu="ShowMenu" Nodes="Nodes" />
}

else if (ShowMenu.Length)
{
	<LengthMenu ShowMenu="ShowMenu" Nodes="Nodes" />
}

else if (ShowMenu.Type)
{
	<TypeMenu ShowMenu="ShowMenu" Nodes="Nodes" />
}

else if (ShowMenu.Regex)
{
	<RegexMenu ShowMenu="ShowMenu" Nodes="Nodes" />
}

else if (ShowMenu.Specialized)
{
	<SpecializedMenu ShowMenu="ShowMenu" Nodes="Nodes" />
}


<style>

	.dropdown-content {
		display: block;
		position: absolute;
		background-color: #f9f9f9;
		min-width: 160px;
		max-height: 350px;
		overflow-y: scroll;
		box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2);
		z-index: 3;
	}

		.dropdown-content a {
			color: black;
			padding: 12px 16px;
			text-decoration: none;
			display: block;
		}

			.dropdown-content a:hover {
				background-color: #f1f1f1
			}

</style>

@code {
	[Parameter]
	public ShowMenuUI ShowMenu { get; set; } = new();

	[Parameter]
	public List<Node> Nodes { get; set; } = new();

	[Parameter]
	public bool IsTyped { get; set; }

	internal static string DisplayAttr(bool b) => b ? "block;" : "none;";

	private void OpenMenu(string target)
	{
		ShowMenu.Alter(true, target);
		ShowMenu.Node = false;
		TreeSearch.ShowTransparentScreen = true;
		StateHasChanged();
	}
}
