@page "/rev-simulator"
@using System.Diagnostics
@using SBFirstLast4.Simulator
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<PageTitle>革命シミュレーター</PageTitle>

@TenCounter

<input @bind=FirstWord />
<button @onclick="TestButton_OnClick">Run!</button>

@foreach (var i in Result)
{
	<p>@i</p>
}

@code {
	private static Dictionary<char, Word[]> PlayWords = [];

	private List<string> UsedWords = [];

	private string FirstWord = string.Empty;
	private double AllyRandom = 0.85;
	private double FoeRandom = 0.85;
	private double AllyStatusEffect = 1;
	private double FoeStatusEffect = 1;

	private List<string> Result = [];

	private int TenCounter = 0;

	private static readonly Dictionary<char, Word[]> _killerCandidates = [];
	private static Word[] KillerCandidates(char start)
		=> _killerCandidates.TryGetValue(start, out var words) ? words : _killerCandidates[start] = Words.TypedWords.Where(w => w.Start == start && !w.IsHeal && !w.Contains(WordType.Normal)).ToArray();


	protected override void OnInitialized()
	{
		if (!AppSettings.IsLoggedIn)
		{
			NavigationManager.NavigateTo("", false);
			return;
		}
		if (!Words.IsLoadedCorrectly)
			NavigationManager.NavigateTo("top", false);

		if (PlayWords.Count == 0)
			InitializePlayWords();
	}

	private void InitializePlayWords()
		=> PlayWords = Words.TypedWords.Where(w => w.Contains(WordType.Play) && !w.IsHeal).ToLookup(w => w.Start).ToDictionary(g => g.Key, g => g.ToArray());


	private int InValue = 0;
	private async Task TestButton_OnClick()
	{
		await Test();
		/*
		var result = await Run(new(FirstWord.GetLastChar().ToString(), WordType.Play, WordType.Bug), 60, 60);
		var battle = new Battle(new(new Kakumei()) { Name = "じぶん", Proceeds = Proceeds.False }, new(new Kakumei()) { Name = "あいて" })
					{
					In = async () =>
					{
					await Task.CompletedTask;
					if (InValue >= result.Count)
						throw new BattleTerminatedException();

					var word = result[InValue];
					InValue++;
					return new(word.Name, $"{word.Type1.TypeToChar()}{word.Type2.TypeToChar()}");
				},
				Out = async s =>
					{
					s.Where(x => x.Notice is Notice.LogInfo or Notice.LogActionInfo).ToList().ForEach(x => Result.Add(x.ToString()));
					StateHasChanged();
					await Task.Delay(1);
				},
				OnReset = cts => cts.Cancel()
		};
		TenCounter = 0;
		InValue = 0;
		Result = [];
		try { await battle.Run(); }
		catch (BattleTerminatedException) { }
		StateHasChanged();
		*/
	}

	private static readonly Dictionary<(Word, double, double, double, bool), (int, Word, WordType)> MaxDamageDictionary = [];

	private static (int MaxDamage, Word Word, WordType Ability) MaxDamage(Word word, double allyATK, double foeDEF, double random, bool allowViolence)
	{
		if (MaxDamageDictionary.TryGetValue((word, allyATK, foeDEF, random, allowViolence), out var result))
			return result;

		var (maxDamage, outputWord, changeAbility) = (0, Word.Default, WordType.Empty);
		var start = word.End;

		if (word.IsEmpty) random = 1;

		var candidates = KillerCandidates(start);

		foreach (var i in candidates)
		{
			var statusEffect = allyATK / foeDEF;

			if (!allowViolence && (i.Contains(WordType.Violence))) continue;

			var doesCrit = i.IsCritable && ((i.Length > 6 && statusEffect < 0.75) || (i.Length == 6 && statusEffect < 1) || i.Length < 6);

			double abilityEffect;
			WordType ability;

			if (i.Contains(WordType.Body) && doesCrit) (abilityEffect, ability, statusEffect) = (1.5, WordType.Body, Math.Max(statusEffect, 1));
			else if (i.Contains(WordType.Insult) && doesCrit) (abilityEffect, ability, statusEffect) = (1.5, WordType.Insult, Math.Max(statusEffect, 1));
			else if (i.Length > 6 && !doesCrit) (abilityEffect, ability) = (2, WordType.Tale);
			else if (i.Length == 6) (abilityEffect, ability) = (1.5, WordType.Tale);
			else if (i.Contains(WordType.Science)) (abilityEffect, ability) = (1.5, WordType.Science);
			else if (i.Contains(WordType.Place)) (abilityEffect, ability) = (1.5, WordType.Place);
			else if (i.Contains(WordType.Person)) (abilityEffect, ability) = (1.5, WordType.Person);
			else if (i.Contains(WordType.Religion)) (abilityEffect, ability) = (1.5, WordType.Religion);
			else (abilityEffect, ability) = (1, WordType.Empty);

			var damage = (int)((int)(10 * i.CalcEffectiveDmg(word) * statusEffect * random) * abilityEffect);

			if (damage > maxDamage) (maxDamage, outputWord, changeAbility) = (damage, i, ability);
		}

		return MaxDamageDictionary[(word, allyATK, foeDEF, random, allowViolence)] = (maxDamage, outputWord, changeAbility);
	}

	private async Task<List<Word>> Run(Word firstWord, int allyHP, int foeHP) => await Task.FromResult<List<Word>>([]);

	private Word NextWord = Word.Default;

	private async Task Test()
	{
		try
		{
			NextWord = new Word(FirstWord, WordType.Play, WordType.Bug);

			List<Word> chain = [NextWord];

			var index = 0;

			var (allyHP, foeHP) = (60, 60);
			var isPlayer1sTurn = true;
			while (index < 100)
			{
				if (!PlayWords.TryGetValue(NextWord.End, out var playWords) || playWords.Length == 0)
					break;

				var countMap = new Dictionary<Word, int>();

				foreach (var word in playWords)
				{
					StateHasChanged();
					await Task.Delay(1);

					if (chain.Contains(word))
						continue;

					if (Expressions.Extensions.TreeSearchHelper.IsSemikillable(word))
						continue;

					if (!PlayWords.TryGetValue(word.End, out var nextWords))
						countMap.Add(word, 0);

					else
						countMap.Add(word, nextWords.Length);
				}

				if (countMap.Count == 0)
					break;

				var nextWordTmp = countMap.MinBy(kv => kv.Value).Key;

				if (isPlayer1sTurn)
				{
					
				}

				NextWord = nextWordTmp;
				chain.Add(NextWord);
				index++;
			}

			await JSRuntime.Alert(chain.StringJoin(", "));
		}
		catch(Exception ex)
		{
			await JSRuntime.AlertEx(ex);
		}
	}

	/*
	private async Task<List<Word>> AllyTurn(Word word, List<Word> chain, Wrapper<int> maxLen, int recursion, Wrapper<(int Ally, int Foe)> hp)
	{
		TenCounter++;
		StateHasChanged();
		await Task.Delay(1);


		//chain = chain.ToList();
		chain.Add(word);

		if (!PlayWords.TryGetValue(word.End, out var playWords))
			return chain;

		var bestChain = chain;
		var longestChain = chain;
		var hpNowOrg = hp.ShallowCopy();
		var max = maxLen.ShallowCopy();
		foreach (var @new in playWords)
		{
			var hpNow = hpNowOrg.ShallowCopy();

			if (bestChain.Count > max.Value)
				break;

			if (bestChain.Count - chain.Count == 1)
				break;

			if (UsedWords.Contains(@new.Name))
				continue;

			if (chain.Contains(@new))
				continue;

			if (hpNow.Value.Ally <= MaxDamage(@new, 1, 1, FoeRandom, true).MaxDamage)
				continue;

			var random = word.IsEmpty ? 1 : AllyRandom;
			hpNow.RefValue.Foe = hpNowOrg.Value.Foe - (int)(10 * @new.CalcEffectiveDmg(word) * AllyStatusEffect * random);

			var newChain = await FoeTurn(@new, chain, max, recursion + 1, hpNow);

			if (newChain.Count % 2 == 0)
			{
				if (bestChain == chain)
				{
					bestChain = newChain;
					if (max.Value > bestChain.Count)
						max.RefValue = bestChain.Count;
				}
				else
				{
					if (bestChain.Count > newChain.Count)
					{
						bestChain = newChain;
						if (max.Value > bestChain.Count)
							max.RefValue = bestChain.Count;
					}
				}
			}

			if (newChain.Count > longestChain.Count)
				longestChain = newChain;
		}
		return bestChain == chain ? longestChain : bestChain;
	}

	private async Task<List<Word>> FoeTurn(Word word, List<Word> chain, Wrapper<int> maxLen, int recursion, Wrapper<(int Ally, int Foe)> hp)
	{
		TenCounter++;
		StateHasChanged();
		await Task.Delay(1);

		//chain = chain.ToList();
		chain.Add(word);

		if (!PlayWords.TryGetValue(word.End, out var playWords))
			return chain;

		var bestChain = chain;
		var longestChain = chain;
		var hpNowOrg = hp.ShallowCopy();
		var max = maxLen.ShallowCopy();
		foreach (var @new in playWords)
		{
			var hpNow = hpNowOrg.ShallowCopy();
			if (bestChain.Count > max.Value)
				break;

			if (bestChain.Count - chain.Count == 1)
				break;

			if (UsedWords.Contains(@new.Name))
				continue;

			if (chain.Contains(@new))
				continue;

			if (hpNow.Value.Foe <= MaxDamage(@new, 1, 1, AllyRandom, true).MaxDamage)
				continue;

			var random = word.IsEmpty ? 1 : FoeRandom;
			hpNow.RefValue.Ally = hpNowOrg.Value.Ally - (int)(10 * @new.CalcEffectiveDmg(word) * FoeStatusEffect * random);

			var newChain = await AllyTurn(@new, chain, max, recursion + 1, hpNow);

			if (newChain.Count % 2 == 1)
			{
				if (bestChain == chain)
				{
					bestChain = newChain;
					if (max.Value > bestChain.Count)
						max.RefValue = bestChain.Count;
				}
				else
				{
					if (bestChain.Count > newChain.Count)
					{
						bestChain = newChain;
						if (max.Value > bestChain.Count)
							max.RefValue = bestChain.Count;
					}
				}
			}

			if (newChain.Count > longestChain.Count)
				longestChain = newChain;
		}

		return bestChain == chain ? longestChain : bestChain;
	}
	*/
	private class BattleTerminatedException : Exception;
}
