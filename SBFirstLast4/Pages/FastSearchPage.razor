@page "/fastsearch"
@using System.Diagnostics
@using System.Text.RegularExpressions
@using SBFirstLast4.Logging
@using SBFirstLast4.Syntax
@using rm.Trie
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
<PageTitle>高速前方後方一致</PageTitle>
<div class="top-grid">
	<div class="border">
		<div class="stack-panel">
			<label class="label">高速前方後方一致</label>
			<label class="text-label">
				キャッシュを活用し、高速に単語検索を行います。
			</label>
		</div>
	</div>
</div>
<div class="grid">
	<div class="border">
		<div class="stack-panel">
			<div class="inner-grid">
				<label class="text-label label-title"> @(IsTrie ? "トライ木" : "ハッシュ テーブル")</label>
				<input type="checkbox" id="switchmain" class="checkbox" checked="@(!IsTrie)" @onchange="e =>
				{
					IsTrie = !(bool)(e.Value ?? false);
					StateHasChanged();
				}" />
				<label for="switchmain" class="toggle" id="togglemain"></label>
				<br />
				@if (IsTrie)
				{
					<label class="text-label" style="margin-top: -20px;">
						生成と検索が低速な代わりに、メモリ効率がよいデータ構造です。<br /><br />
						生成：１-２分<br />
						検索：５-１０秒
					</label>
					<div class="divider inner-divider" />
					@if (IsTrieGenerating)
					{
						<div class="text-label">
							@TrieStatusText
						</div>
					}
					else if (IsTrieGenerated)
					{
						<div class="text-label">
							辞書の状態：生成済み<br />
							@TrieTime
						</div>
					}
					else
					{
						<div class="btn-generate btn-generate-trie" 　@onclick=GenerateTrie>辞書を生成</div>
					}
				}
				else
				{
					<label class="text-label" style="margin-top: -20px;">
						生成と検索が高速な代わりに、メモリ効率が悪いデータ構造です。<br /><br />
						生成：１０-２０秒<br />
						検索：１-５秒
					</label>
					<div class="divider inner-divider" />
					<div class="text-label label-title" style="font-size: 19.5px;">キーの種類</div>
					<select class="select-menu" @bind=HashKeyType>
						<option value="最後の文字">最後の文字</option>
						<option value="最初の文字">最初の文字</option>
					</select>
					<div class="divider inner-divider" />
					@if (IsLastHash)
					{
						@if (IsLastHashGenerating)
						{
							<div class="text-label">
								@LastHashStatusText
							</div>
						}
						else if (IsLastHashGenerated)
						{
							<div class="text-label">
								辞書の状態：生成済み<br />
								@LastHashTime
							</div>
						}
						else
						{
							<div class="btn-generate btn-generate-hash" 　@onclick=GenerateLastHash>辞書を生成</div>
						}
					}
					else
					{
						@if (IsFirstHashGenerating)
						{
							<div class="text-label">
								@FirstHashStatusText
							</div>
						}
						else if (IsFirstHashGenerated)
						{
							<div class="text-label">
								辞書の状態：生成済み<br />
								@FirstHashTime
							</div>
						}
						else
						{
							<div class="btn-generate btn-generate-hash" 　@onclick=GenerateFirstHash>辞書を生成</div>
						}
					}
				}
			</div>
		</div>
	</div>
</div>
@if (IsGenerated)
{
	<div class="grid">
		<div class="border">
			<div class="stack-panel">
				@if (IsTrie)
				{
					<div class="inner-grid">
						<div class="text-label label-title">最初の文字</div>
						<input class="text-box" type="text" @oninput="@(ui => TrieFirstChar = (string?)ui.Value ?? string.Empty)" />
					</div>
					<div class="divider" />
					<div class="inner-grid">
						<div class="text-label label-title">検索オプション</div>
						<select class="select-menu" @bind="TrieOption">
							@foreach (var item in SearchOptions)
							{
								<option value="@item">@item</option>
							}
						</select>
						<div class="divider inner-divider" />
						@if (TrieOption == OptionFirstLast)
						{
							<div class="text-label label-title">最後の文字</div>
							<input class="text-box" type="text" @oninput="@(ui => TrieLastChar = (string?)ui.Value ?? string.Empty)" />
						}
						else if (TrieOption == OptionWildcard)
						{
							<div class="text-label label-title">ワイルドカード</div>
							<input class="text-input" type="text" @bind="TrieWildcardPattern" />
						}
						else
						{
							<div class="text-label label-title">正規表現</div>
							<input class="text-input" type="text" @bind="TrieRegexPattern" />
						}
					</div>
					<dkv class="divider" />
					<div class="btn-execute" @onclick=SearchTrie>検索！</div>
				}
				else if (IsLastHash)
				{
					<div class="inner-grid">
						<div class="text-label label-title">最後の文字</div>
						<input class="text-box" type="text" @oninput="@(ui => LastHashLastChar = (string?)ui.Value ?? string.Empty)" />
					</div>
					<div class="divider" />
					<div class="inner-grid">
						<div class="text-label label-title">検索オプション</div>
						<select class="select-menu" @bind="LastHashOption">
							@foreach (var item in SearchOptions)
							{
								<option value="@item">@item</option>
							}
						</select>
						<div class="divider inner-divider" />
						@if (LastHashOption == OptionFirstLast)
						{
							<div class="text-label label-title">最初の文字</div>
							<input class="text-box" type="text" @oninput="@(ui => LastHashFirstChar = (string?)ui.Value ?? string.Empty)" />
						}
						else if (LastHashOption == OptionWildcard)
						{
							<div class="text-label label-title">ワイルドカード</div>
							<input class="text-input" type="text" @bind="LastHashWildcardPattern" />
						}
						else
						{
							<div class="text-label label-title">正規表現</div>
							<input class="text-input" type="text" @bind="LastHashRegexPattern" />
						}
					</div>
					<dkv class="divider" />
					<div class="btn-execute" @onclick=SearchLastHash>検索！</div>
				}
				else
				{
					<div class="inner-grid">
						<div class="text-label label-title">最初の文字</div>
						<input class="text-box" type="text" @oninput="@(ui => FirstHashFirstChar = (string?)ui.Value ?? string.Empty)" />
					</div>
					<div class="divider" />
					<div class="inner-grid">
						<div class="text-label label-title">検索オプション</div>
						<select class="select-menu" @bind="FirstHashOption">
							@foreach (var item in SearchOptions)
							{
								<option value="@item">@item</option>
							}
						</select>
						<div class="divider inner-divider" />
						@if (FirstHashOption == OptionFirstLast)
						{
							<div class="text-label label-title">最後の文字</div>
							<input class="text-box" type="text" @oninput="@(ui => FirstHashLastChar = (string?)ui.Value ?? string.Empty)" />
						}
						else if (FirstHashOption == OptionWildcard)
						{
							<div class="text-label label-title">ワイルドカード</div>
							<input class="text-input" type="text" @bind="FirstHashWildcardPattern" />
						}
						else
						{
							<div class="text-label label-title">正規表現</div>
							<input class="text-input" type="text" @bind="FirstHashRegexPattern" />
						}
					</div>
					<dkv class="divider" />
					<div class="btn-execute" @onclick=SearchFirstHash>検索！</div>
				}
			</div>
		</div>
	</div>
	@if (IsSearching)
	{
		<div class="spinner-box">
			<div class="circle-border">
				<div class="circle-core"></div>
			</div>
		</div>
	}
	else if(ResultBuffer.Length > 0)
	{
		<ul class="fancy-list">
			@foreach (var item in VisibleItems)
			{
				<li>@item</li>
			}
		</ul>
		<div class="indicators">
			<div class="count-indicator">合計 @(TotalWords) 件</div>
			<div class="page-indicator">@(CurrentPage + 1)/@TotalPages</div>
		</div>
		<div class="pagination">
			<div class="pagination-buttons">
				<button @onclick="GoToPreviousPage" disabled="@IsFirstPage"><span class="oi oi-chevron-left" /></button>
				<button @onclick="GoToNextPage" disabled="@IsLastPage"><span class="oi oi-chevron-right" /></button>
			</div>
		</div>
	}
	<br />
	<br />
}

<style>
	body {
		font-family: Arial, sans-serif;
		margin: 0;
		padding: 0;
		background-color: #f5f6f1;
	}

	.top-grid {
		display: block;
	}

	.grid {
		display: grid;
	}

	.border {
		margin: 20px;
		border: 2px solid gray;
		border-radius: 10px;
		padding: 20px;
		background-color: white;
		box-shadow: 0px 2px 5px rgba(0, 0, 0, 0.2);
	}

	.stack-panel {
		display: flex;
		flex-direction: column;
		padding-left: 30px;
		padding-right: 30px;
		padding-top: 10px;
		padding-bottom: 10px
	}

	.inner-grid {
		display: grid;
		grid-template-rows: auto auto;
		row-gap: 15px;
		margin-bottom: 10px;
		justify-items: center;
		align-items: center;
	}

	.label {
		text-align: center;
		font-weight: bold;
		font-size: 30px;
		color: black;
	}

	.text-label {
		padding-top: 10px;
		text-align: center;
		font-size: 18px;
		font-weight: 100;
		color: black;
	}

	.label-title {
		font-weight: 600;
		font-size: 22px;
		padding-top: 3px;
	}

	.checkbox {
		display: none;
	}

	.toggle {
		position: relative;
		display: inline-block;
		width: 60px;
		height: 34px;
		background-color: lightgray;
		border-radius: 17px;
	}

		.toggle::after {
			content: "";
			position: absolute;
			width: 26px;
			height: 26px;
			border-radius: 50%;
			background-color: white;
			top: 4px;
			left: 4px;
			transition: all 0.3s;
		}

	#togglemain {
		background-color: #5C6CE7;
	}

	.checkbox:checked + .toggle::after {
		left: 30px;
	}

	.checkbox:checked + .toggle {
		background-color: steelblue;
	}

	#switchmain:checked + .toggle {
		background-color: #E75C6C;
	}

	.text-input {
		width: 80%;
		padding: 12px;
		font-size: 18px;
		border: 2px solid gray;
		border-radius: 5px;
		margin-top: 8px;
	}

		.text-input::placeholder {
			color: dimgray;
		}

	.text-box {
		width: 80px;
		height: 80px;
		display: flex;
		justify-content: center;
		align-items: center;
		text-align: center;
		border: 2px solid gray;
		border-radius: 10px;
		font-size: 32px;
		background-color: white;
		box-shadow: 0px 2px 5px rgba(0, 0, 0, 0.2);
		white-space: nowrap;
		overflow: hidden;
		text-overflow: ellipsis;
	}

	.sub-label {
		text-align: center;
		font-size: 20px;
		color: darkred;
		padding: 0 0 10px 0;
		margin-top: -10px;
		margin-bottom: -10px;
	}

	.divider {
		height: 2px;
		background-color: darkgray;
		margin: 10px 0;
	}

	.inner-divider {
		width: 98%;
	}

	.select-menu {
		-moz-appearance: none;
		-webkit-appearance: none;
		color: black;
		padding: 8px 50px;
		margin-top: 3px;
		margin-bottom: 0px;
		text-decoration: none;
	}

		.select-menu::-ms-expand {
			display: none;
		}

	.btn-generate {
		align-self: center;
		text-align: center;
		width: 75%;
		line-height: 50px;
		font-weight: bold;
		height: 60px;
		border-radius: 20px;
		font-size: 20px;
		cursor: pointer;
		color: white;
		transition: background-color 0.3s, color 0.3s;
		text-decoration: none;
		margin-top: 0px;
		margin-bottom: 0px;
	}

	.btn-generate-trie {
		background-color: #52529A;
		border: 5px solid #4041C4;
	}

	.btn-generate-hash {
		background-color: #9A5252;
		border: 5px solid #C44041;
	}

	.btn-execute {
		align-self: center;
		text-align: center;
		width: 75%;
		line-height: 60px;
		font-weight: bold;
		height: 70px;
		background-color: #529A52;
		border: 5px solid #40C441;
		border-radius: 30px;
		font-size: 24px;
		cursor: pointer;
		color: white;
		transition: background-color 0.3s, color 0.3s;
		text-decoration: none;
		margin-top: 20px;
		margin-bottom: 20px;
	}

	.spinner-box {
		height: 250px;
		display: flex;
		justify-content: center;
		align-items: center;
		background-color: transparent;
	}

	.circle-border {
		width: 120px;
		height: 120px;
		padding: 6px;
		display: flex;
		justify-content: center;
		align-items: center;
		border-radius: 50%;
		background: rgb(63,249,220);
		background: linear-gradient(0deg, rgba(63,249,220,0.1) 33%, rgba(63,249,220,1) 100%);
		animation: spin .8s linear 0s infinite;
	}

	.circle-core {
		width: 100%;
		height: 100%;
		background-color: #F5F6F1;
		border-radius: 50%;
	}

	@@keyframes spin {
		from {
			transform: rotate(0);
		}

		to {
			transform: rotate(359deg);
		}
	}

	.fancy-list {
		list-style: none;
		padding: 0;
	}

		.fancy-list li {
			background: #f4f4f4;
			margin: 10px 0;
			padding: 15px;
			border-radius: 5px;
			box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
			transition: background 0.3s ease-in-out;
		}

			.fancy-list li:hover {
				background: #ddd;
			}

	.pagination {
		display: flex;
		justify-content: space-between;
		align-items: center;
		margin-top: 20px;
	}

	.pagination-buttons button {
		padding: 10px 10px;
		border: none;
		border-radius: 30px;
		font-size: 16px;
		cursor: pointer;
		transition: background-color 0.3s, color 0.3s;
		text-decoration: none;
	}

		.pagination-buttons button[disabled] {
			background-color: #ddd;
			color: #999;
			cursor: not-allowed;
		}

	.indicators {
		display: flex;
		justify-content: space-between;
		margin-top: 10px;
	}

	.count-indicator,
	.page-indicator {
		font-size: 14px;
		color: #666;
		margin-bottom: 20px;
	}
</style>

@code {
	private bool IsGenerated => (IsTrie && IsTrieGenerated)
								|| (!IsTrie && IsLastHash && IsLastHashGenerated)
								|| (!IsTrie && !IsLastHash && IsFirstHashGenerated);

	private bool IsSearching;
	private string[][] ResultBuffer = Array.Empty<string[]>();

	private string[] VisibleItems => ResultBuffer.At(CurrentPage) ?? Array.Empty<string>();
	private bool IsFirstPage => CurrentPage == 0;
	private bool IsLastPage => CurrentPage == TotalPages - 1;
	private const int ItemsPerPage = 20;
	private int CurrentPage = 0;
	private int TotalPages => ResultBuffer.Length;
	private int TotalWords;

	private static bool IsTrie = false;
	private string HashKeyType = "最後の文字";
	private bool IsLastHash => HashKeyType == "最後の文字";

	private static readonly string[] SearchOptions = ["前方後方一致", "ワイルドカード", "正規表現"];
	private static string OptionFirstLast => SearchOptions[0];
	private static string OptionWildcard => SearchOptions[1];
	private static string OptionRegex => SearchOptions[2];

	#region trie
	internal static readonly Trie WordTrie = new();
	private bool IsTrieGenerating;
	private static bool IsTrieGenerated;
	private static string TrieStatusText = string.Empty;
	private string TrieFirstChar = string.Empty;
	private string TrieLastChar = string.Empty;
	private string TrieWildcardPattern = string.Empty;
	private string TrieRegexPattern = string.Empty;
	private static string TrieOption = OptionFirstLast;
	private string TrieTime = string.Empty;
	#endregion

	#region lasthash
	internal static readonly Dictionary<char, List<string>> LastHash = [];
	private bool IsLastHashGenerating;
	private static bool IsLastHashGenerated;
	private string LastHashStatusText = string.Empty;
	private string LastHashFirstChar = string.Empty;
	private string LastHashLastChar = string.Empty;
	private string LastHashWildcardPattern = string.Empty;
	private string LastHashRegexPattern = string.Empty;
	private static string LastHashOption = OptionFirstLast;
	private string LastHashTime = string.Empty;
	#endregion

	#region firsthash
	internal static readonly Dictionary<char, List<string>> FirstHash = [];
	private bool IsFirstHashGenerating;
	private static bool IsFirstHashGenerated;
	private string FirstHashStatusText = string.Empty;
	private string FirstHashFirstChar = string.Empty;
	private string FirstHashLastChar = string.Empty;
	private string FirstHashWildcardPattern = string.Empty;
	private string FirstHashRegexPattern = string.Empty;
	private static string FirstHashOption = OptionFirstLast;
	private string FirstHashTime = string.Empty;
	#endregion

	protected override async Task OnInitializedAsync()
	{
		if (!AppSettings.IsLoggedIn)
		{
			NavigationManager.NavigateTo("", false);
			return;
		}
		if (!Words.IsLoadedCorrectly)
		{
			NavigationManager.NavigateTo("top", false);
			return;
		}
		if (await AppSettings.ShouldReturn(Http))
			NavigationManager.NavigateTo("", false);
	}

	private async Task GenerateTrie()
	{
		try
		{
			var sw = new Stopwatch();
			sw.Start();
			IsTrieGenerated = false;
			IsTrieGenerating = true;
			StateHasChanged();
			await Task.Delay(1);

			await Message("無属性の単語を読み込み中...");

			var tlMax = Words.NoTypeWords.Count;
			var tlProgress = new ProgressBoundary(tlMax);
			var tlCount = 0;
			for (var i = 0; i < tlMax; i++)
			{
				WordTrie.AddWord(Words.NoTypeWords[i]);
				if (i == tlProgress.Boundaries.At(0))
				{
					tlCount++;
					await Message($"無属性の単語を読み込み中... ({tlCount}%)");
					tlProgress.Boundaries.Remove(tlProgress.Boundaries.At(0));
				}
			}

			await Message("有属性の単語を読み込み中...");

			var tdMax = Words.TypedWords.Count;
			var tdProgress = new ProgressBoundary(tdMax);
			var tdCount = 0;
			for (var i = 0; i < tdMax; i++)
			{
				WordTrie.AddWord(Words.TypedWords[i].Name);
				if (i == tdProgress.Boundaries.At(0))
				{
					tdCount++;
					await Message($"有属性の単語を読み込み中... ({tdCount}%)");
					tdProgress.Boundaries.Remove(tdProgress.Boundaries.At(0));
				}
			}

			IsTrieGenerating = false;
			IsTrieGenerated = true;
			sw.Stop();
			TrieTime = $"{sw.ElapsedMilliseconds}ms";
			StateHasChanged();
		}
		catch(Exception ex)
		{
			await JSRuntime.AlertEx(ex);
		}

		async Task Message(string msg)
		{
			TrieStatusText = msg;
			StateHasChanged();
			await Task.Delay(2);
		}
	}

	private async Task GenerateLastHash()
	{
		var sw = new Stopwatch();
		sw.Start();
		try
		{
			IsLastHashGenerated = false;
			IsLastHashGenerating = true;
			StateHasChanged();
			await Task.Delay(1);

			await Message("無属性の単語を読み込み中...");

			foreach (var i in Utils.KanaListCharSpread)
				LastHash[i] = [];

			var tlMax = Words.NoTypeWords.Count;
			var tlProgress = new ProgressBoundary(tlMax);
			var tlCount = 0;
			for (var i = 0; i < tlMax; i++)
			{
				var word = Words.NoTypeWords[i];
				LastHash.GetValueOrDefault(word.GetLastChar())?.Add(word);
				if (i == tlProgress.Boundaries.At(0))
				{
					tlCount++;
					await Message($"無属性の単語を読み込み中... ({tlCount}%)");
					tlProgress.Boundaries.Remove(tlProgress.Boundaries.At(0));
				}
			}

			await Message("有属性の単語を読み込み中...");

			var tdMax = Words.TypedWords.Count;
			var tdProgress = new ProgressBoundary(tdMax);
			var tdCount = 0;
			for (var i = 0; i < tdMax; i++)
			{
				var word = Words.TypedWords[i].Name;
				LastHash.GetValueOrDefault(word.GetLastChar())?.Add(word);
				if (i == tdProgress.Boundaries.At(0))
				{
					tdCount++;
					await Message($"有属性の単語を読み込み中... ({tdCount}%)");
					tdProgress.Boundaries.Remove(tdProgress.Boundaries.At(0));
				}
			}

			IsLastHashGenerating = false;
			IsLastHashGenerated = true;

			sw.Stop();
			LastHashTime = $"{sw.ElapsedMilliseconds}ms";
			StateHasChanged();
		}
		catch (Exception ex)
		{
			await JSRuntime.AlertEx(ex);
		}

		async Task Message(string msg)
		{
			LastHashStatusText = msg;
			StateHasChanged();
			await Task.Delay(2);
		}
	}

	private async Task GenerateFirstHash()
	{
		var sw = new Stopwatch();
		sw.Start();
		try
		{
			IsFirstHashGenerated = false;
			IsFirstHashGenerating = true;
			StateHasChanged();
			await Task.Delay(1);

			await Message("無属性の単語を読み込み中...");

			foreach (var i in Utils.KanaListCharSpread)
				FirstHash[i] = [];

			var tlMax = Words.NoTypeWords.Count;
			var tlProgress = new ProgressBoundary(tlMax);
			var tlCount = 0;
			for (var i = 0; i < tlMax; i++)
			{
				var word = Words.NoTypeWords[i];
				FirstHash.GetValueOrDefault(word.At(0))?.Add(word);
				if (i == tlProgress.Boundaries.At(0))
				{
					tlCount++;
					await Message($"無属性の単語を読み込み中... ({tlCount}%)");
					tlProgress.Boundaries.Remove(tlProgress.Boundaries.At(0));
				}
			}

			await Message("有属性の単語を読み込み中...");

			var tdMax = Words.TypedWords.Count;
			var tdProgress = new ProgressBoundary(tdMax);
			var tdCount = 0;
			for (var i = 0; i < tdMax; i++)
			{
				var word = Words.TypedWords[i].Name;
				FirstHash.GetValueOrDefault(word.At(0))?.Add(word);
				if (i == tdProgress.Boundaries.At(0))
				{
					tdCount++;
					await Message($"有属性の単語を読み込み中... ({tdCount}%)");
					tdProgress.Boundaries.Remove(tdProgress.Boundaries.At(0));
				}
			}

			IsFirstHashGenerating = false;
			IsFirstHashGenerated = true;
			sw.Stop();
			FirstHashTime = $"{sw.ElapsedMilliseconds}ms";
			StateHasChanged();
		}
		catch (Exception ex)
		{
			await JSRuntime.AlertEx(ex);
		}

		async Task Message(string msg)
		{
			FirstHashStatusText = msg;
			StateHasChanged();
			await Task.Delay(2);
		}
	}

	private async Task SearchTrie()
	{
		if (Utils.Random.Next(8) == 0 && await AppSettings.ShouldReturn(Http))
		{
			NavigationManager.GoToIndex();
			return;
		}

		IsSearching = true;
		StateHasChanged();
		await Task.Delay(5);

		if (string.IsNullOrWhiteSpace(TrieFirstChar))
		{
			await Warn("『最初の文字』を入力してください。");
			return;
		}

		if (TrieOption == OptionFirstLast)
		{
			if (string.IsNullOrWhiteSpace(TrieLastChar))
			{
				await Warn("『最後の文字』を入力してください。");
				return;
			}
			var words = WordTrie.GetWords(TrieFirstChar);
			var lastChar = TrieLastChar.At(0);
			var result = words.Where(w => w.GetLastChar() == lastChar);
			await SetResult(result, TrieFirstChar[0], $"fl_{TrieLastChar}");
			return;
		}
		if (TrieOption == OptionWildcard)
		{
			if (!WildcardSyntax.TryParse(TrieWildcardPattern, out var wildcard))
			{
				await Warn("無効な構文です。");
				return;
			}
			var regex = new Regex(wildcard);
			var words = WordTrie.GetWords(TrieFirstChar);
			var result = words.Where(w => regex.IsMatch(w));
			await SetResult(result, TrieFirstChar[0], $"wc_{TrieWildcardPattern}");
			return;
		}
		if (TrieOption == OptionRegex)
		{
			if (!Utils.IsValidRegex(TrieRegexPattern))
			{
				await Warn("無効な構文です。");
				return;
			}
			var regex = new Regex(TrieRegexPattern);
			var words = WordTrie.GetWords(TrieFirstChar);
			var result = words.Where(w => regex.IsMatch(w));
			await SetResult(result, TrieFirstChar[0], $"r_{TrieRegexPattern}");
		}
	}

	private async Task SearchLastHash()
	{
		if (Utils.Random.Next(8) == 0 && await AppSettings.ShouldReturn(Http))
		{
			NavigationManager.GoToIndex();
			return;
		}

		IsSearching = true;
		StateHasChanged();
		await Task.Delay(5);

		if (string.IsNullOrWhiteSpace(LastHashLastChar))
		{
			await Warn("『最後の文字』を入力してください。");
			return;
		}

		var lastChar = LastHashLastChar.At(0);
		if (!LastHash.TryGetValue(lastChar, out var words))
		{
			await Warn($"キー指定『{lastChar}』は無効です。トライ木による検索をお試しください。");
			return;
		}

		if (LastHashOption == OptionFirstLast)
		{
			if (string.IsNullOrWhiteSpace(LastHashFirstChar))
			{
				await Warn("『最初の文字』を入力してください。");
				return;
			}
			var firstChar = LastHashFirstChar.At(0);
			var result = words.Where(w => w.At(0) == firstChar);
			await SetResult(result, lastChar, $"fl_{LastHashFirstChar}");
			return;
		}
		if (LastHashOption == OptionWildcard)
		{
			if (!WildcardSyntax.TryParse(LastHashWildcardPattern, out var wildcard))
			{
				await Warn("無効な構文です。");
				return;
			}
			var regex = new Regex(wildcard);
			var result = words.Where(w => regex.IsMatch(w));
			await SetResult(result, lastChar, $"wc_{LastHashWildcardPattern}");
			return;
		}
		if (LastHashOption == OptionRegex)
		{
			if (!Utils.IsValidRegex(LastHashRegexPattern))
			{
				await Warn("無効な構文です。");
				return;
			}
			var regex = new Regex(LastHashRegexPattern);
			var result = words.Where(w => regex.IsMatch(w));
			await SetResult(result, lastChar, $"r_{LastHashRegexPattern}");
		}
	}

	private async Task SearchFirstHash()
	{
		if (Utils.Random.Next(8) == 0 && await AppSettings.ShouldReturn(Http))
		{
			NavigationManager.GoToIndex();
			return;
		}

		IsSearching = true;
		StateHasChanged();
		await Task.Delay(5);

		if (string.IsNullOrWhiteSpace(FirstHashFirstChar))
		{
			await Warn("『最初の文字』を入力してください。");
			return;
		}

		var firstChar = FirstHashFirstChar.At(0);
		if (!FirstHash.TryGetValue(firstChar, out var words))
		{
			await Warn($"キー指定『{firstChar}』は無効です。トライ木による検索をお試しください。");
			return;
		}

		if (FirstHashOption == OptionFirstLast)
		{
			if (string.IsNullOrWhiteSpace(FirstHashLastChar))
			{
				await Warn("『最後の文字』を入力してください。");
				return;
			}
			var lastChar = FirstHashLastChar.At(0);
			var result = words.Where(w => w.GetLastChar() == lastChar);
			await SetResult(result, firstChar, $"fl_{FirstHashLastChar}");
			return;
		}
		if (FirstHashOption == OptionWildcard)
		{
			if (!WildcardSyntax.TryParse(FirstHashWildcardPattern, out var wildcard))
			{
				await Warn("無効な構文です。");
				return;
			}
			var regex = new Regex(wildcard);
			var result = words.Where(w => regex.IsMatch(w));
			await SetResult(result, firstChar, $"wc_{FirstHashWildcardPattern}");
			return;
		}
		if (FirstHashOption == OptionRegex)
		{
			if (!Utils.IsValidRegex(FirstHashRegexPattern))
			{
				await Warn("無効な構文です。");
				return;
			}
			var regex = new Regex(FirstHashRegexPattern);
			var result = words.Where(w => regex.IsMatch(w));
			await SetResult(result, firstChar, $"r_{FirstHashRegexPattern}");
		}
	}

	private async Task Warn(string msg)
	{
		await JSRuntime.Alert(msg);
		IsSearching = false;
		StateHasChanged();
	}

	private async Task SetResult(IEnumerable<string> result, char key, string option)
	{
		ResultBuffer = result.Chunk(ItemsPerPage).ToArray();
		if (ResultBuffer.Length > 0)
			TotalWords = ResultBuffer.Sum(x => x.Length);
		CurrentPage = 0;
		IsSearching = false;
		await Server.Log
		(
			type: StatusTypes.FastSearch,
			order: new
			{
				DicStyle = IsTrie ? "TRIE" : IsLastHash ? "LASTHASH" : "FIRSTHASH",
				Key = key,
				Option = option
			}
		);
		StateHasChanged();
	}

	private void GoToPreviousPage()
	{
		if (!IsFirstPage)
		{
			CurrentPage--;
			StateHasChanged();
		}
	}

	private void GoToNextPage()
	{
		if (!IsLastPage)
		{
			CurrentPage++;
			StateHasChanged();
		}
	}

	private sealed class ProgressBoundary
	{
		public int Max { get; }

		public List<int> Boundaries { get; }

		private const int Threshold = 100;

		public ProgressBoundary(int max)
		{
			Max = max;
			Boundaries = [];
			var batch = Max / 100;
			var count = 0;
			for (var i = 0; i < Threshold; i++)
				Boundaries.Add(count += batch);
		}
	}
}
