@page "/typecheck"
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
<PageTitle>タイプ判定</PageTitle>

<div class="top-grid">
	<div class="border">
		<div class="stack-panel">
			<label class="label">タイプ判定</label>
			<label class="text-label">
				入力された文字列から、タイプ推論を行います。<br>
				ライト版辞書を用いている場合は、タイプ付き単語のみ判定可能です。<br><br>
				（動作が遅い場合はページをリロード後、ライト版辞書を選択すると改善するかもしれません。）
			</label>
		</div>
	</div>
</div>
<div class="grid">
	<div class="border">
		<div class="stack-panel">
			<div class="inner-grid">
				<input class="text-input" id="word-input" type="text" placeholder="単語名を入力..." @bind=WordText @onkeyup=TextInput_KeyUp />
			</div>
			<div class="divider"></div>
			<div class="inner-grid">
				<label class="text-label">@WordResult</label>
			</div>
		</div>
	</div>
</div>

<style>
	body {
		font-family: Arial, sans-serif;
		margin: 0;
		padding: 0;
		background-color: #f5f6f1;
	}

	.top-grid {
		display: block;
	}

	.grid {
		display: grid;
	}

	.border {
		margin: 20px;
		border: 2px solid gray;
		border-radius: 10px;
		padding: 20px;
		background-color: white;
		box-shadow: 0px 2px 5px rgba(0, 0, 0, 0.2);
	}

	.stack-panel {
		display: flex;
		flex-direction: column;
		padding-left: 30px;
		padding-right: 30px;
		padding-top: 10px;
		padding-bottom: 10px
	}

	.inner-grid {
		display: grid;
		grid-template-rows: auto auto;
		row-gap: 15px;
		margin-bottom: 10px;
		justify-items: center;
		align-items: center;
	}

	.label {
		text-align: center;
		font-weight: bold;
		font-size: 30px;
		color: black;
	}

	.text-label {
		padding-top: 10px;
		text-align: center;
		font-size: 18px;
		font-weight: 100;
		color: black;
	}

	.text-input {
		width: 80%;
		padding: 12px;
		font-size: 18px;
		border: 2px solid gray;
		border-radius: 5px;
		margin-top: 8px;
	}

		.text-input::placeholder {
			color: dimgray;
		}

	.divider {
		height: 2px;
		background-color: darkgray;
		margin: 10px 0;
	}
</style>

@code {
	private string WordText = string.Empty;
	private string WordResult = string.Empty;


	protected override void OnInitialized()
	{
		if (!AppSettings.IsLoggedIn)
		{
			NavigationManager.NavigateTo("", false);
			return;
		}
		if (!SBDictionary.IsLoadedCorrectly)
			NavigationManager.NavigateTo("top", false);
	}
	private async void TextInput_KeyUp()
	{
		var wordText = await JSRuntime.InvokeAsync<string>("eval", "document.getElementById('word-input').value");
		await Task.Delay(1);
		if (string.IsNullOrWhiteSpace(wordText))
		{
			WordResult = string.Empty;
			StateHasChanged();
			await Task.Delay(1);
			return;
		}

		var keyChar = wordText[0];
		if (!SBUtils.KanaListSpread.Contains(keyChar.ToString()))
		{
			WordResult = "無効な開始文字です。";
			StateHasChanged();
			await Task.Delay(1);
			return;
		}
		var result = $"単語「{wordText}」は\n";
		if (wordText.At(^1) == 'ん')
		{
			result += "んで終わっています。";
			WordResult = result;
			StateHasChanged();
			await Task.Delay(1);
			return;
		}
		if (!SBDictionary.IsLite)
		{
			WordResult = "Loading...";
			StateHasChanged();
			await Task.Delay(1);
		}
		if (!SBDictionary.IsLite && !SBDictionary.PerfectNameDic.Contains(wordText))
		{
			result += "辞書にない単語です。";
			WordResult = result;
			StateHasChanged();
			await Task.Delay(1);
			return;
		}
		var resultWord = SBDictionary.GetSplitList(keyChar).Find(x => x.Name == wordText);
		if (SBDictionary.IsLite && resultWord == default)
		{
			result += "辞書にないか、無属性です。";
			WordResult = result;
			StateHasChanged();
			await Task.Delay(1);
			return;
		}
		var (type1, type2) = (resultWord.Type1, resultWord.Type2);
		result += (type1, type2) switch
		{
			(WordType.Empty, WordType.Empty) => "無属性の単語です。",
			(var type, WordType.Empty) => $"{type.TypeToString()}タイプです。",
			(WordType.Empty, var type) => $"{type.TypeToString()}タイプです。",
			(var typeA, var typeB) => $"{typeA.TypeToString()} / {typeB.TypeToString()} タイプです。"
		};
		WordResult = result;
		StateHasChanged();
		await Task.Delay(1);
	}
}
