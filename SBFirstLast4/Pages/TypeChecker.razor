@page "/typecheck"
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@using SBFirstLast4.Logging
<PageTitle>タイプ判定</PageTitle>

<div class="top-grid">
	<div class="border">
		<div class="stack-panel">
			<label class="label">@(IsTypeChecker ? "タイプ判定" : "リスト判定")</label>
			@if (IsTypeChecker)
			{
				<label class="text-label">
					入力された文字列から、タイプ推論を行います。<br>
					分類無し単語の判定を行うことはできません。
				</label>
			}
			else
			{
				<label class="text-label">
					入力されたリストの、タイプ推論を行います。<br>
					単語の読み込み方法、区切り文字、およびタイプの表示方法を指定することができます。
				</label>
			}
		</div>
	</div>
</div>
<!--
<div class="grid">
	<div class="border">
		<div class="stack-panel">
			<div class="inner-grid">
				<label class="text-label label-title"> @(IsTypeChecker ? "タイプ判定" : "リスト判定")</label>
				<input type="checkbox" id="switchmain" class="checkbox" checked="@(!IsTypeChecker)" @onchange="e =>
				{
					IsTypeChecker = !(bool)(e.Value ?? false);
					StateHasChanged();
				}" />
				<label for="switchmain" class="toggle" id="togglemain"></label>
			</div>
		</div>
	</div>
</div>
-->
@if (IsTypeChecker)
{
	<div class="grid">
		<div class="border">
			<div class="stack-panel">
				<div class="inner-grid">
					<input class="text-input" id="word-input" type="text" placeholder="単語名を入力..." @bind=WordText @onkeyup=TextInput_KeyUp />
				</div>
				<div class="divider" />
				<div class="inner-grid">
					<label class="text-label">@WordResult</label>
				</div>
			</div>
		</div>
	</div>
}
else
{
	<div class="grid">
		<div class="border">
			<div class="stack-panel">
				<div class="inner-grid">
					<label class="text-label label-title">読み込み方法</label>
					<select class="source-selector" @bind=LoadingMethod>
						<option value="生文字列">生文字列</option>
						<option value="ファイル指定">ファイル指定</option>
						<option value="URL指定">URL指定</option>
					</select>
				</div>
				<div class="divider" />
				<div class="inner-grid">
					<label class="text-label">@WordResult</label>
				</div>
			</div>
		</div>
	</div>
}

<style>
	body {
		font-family: Arial, sans-serif;
		margin: 0;
		padding: 0;
		background-color: #f5f6f1;
	}

	.top-grid {
		display: block;
	}

	.grid {
		display: grid;
	}

	.border {
		margin: 20px;
		border: 2px solid gray;
		border-radius: 10px;
		padding: 20px;
		background-color: white;
		box-shadow: 0px 2px 5px rgba(0, 0, 0, 0.2);
	}

	.stack-panel {
		display: flex;
		flex-direction: column;
		padding-left: 30px;
		padding-right: 30px;
		padding-top: 10px;
		padding-bottom: 10px
	}

	.inner-grid {
		display: grid;
		grid-template-rows: auto auto;
		row-gap: 15px;
		margin-bottom: 10px;
		justify-items: center;
		align-items: center;
	}


	.checkbox {
		display: none;
	}

	.toggle {
		position: relative;
		display: inline-block;
		width: 60px;
		height: 34px;
		background-color: lightgray;
		border-radius: 17px;
	}

		.toggle::after {
			content: "";
			position: absolute;
			width: 26px;
			height: 26px;
			border-radius: 50%;
			background-color: white;
			top: 4px;
			left: 4px;
			transition: all 0.3s;
		}

	#togglemain {
		background-color: #6CE75C;
	}

	.checkbox:checked + .toggle::after {
		left: 30px;
	}

	.checkbox:checked + .toggle {
		background-color: green;
	}

	#switchmain:checked + .toggle {
		background-color: #E75C6C;
	}

	.label {
		text-align: center;
		font-weight: bold;
		font-size: 30px;
		color: black;
	}

	.text-label {
		padding-top: 10px;
		text-align: center;
		font-size: 18px;
		font-weight: 100;
		color: black;
	}

	.label-title{
		font-weight: 600;
		font-size: 22px;
	}

	.text-input {
		width: 80%;
		padding: 12px;
		font-size: 18px;
		border: 2px solid gray;
		border-radius: 5px;
		margin-top: 8px;
	}

		.text-input::placeholder {
			color: dimgray;
		}

	.source-selector {
		-moz-appearance: none;
		-webkit-appearance: none;
		text-align: center;
		text-align-last: center;
		padding: 5px 10px 5px 10px;
		font-size: 16px;
		background-color: white;
		color: black;
		margin: 10px 10px 10px 10px;
		min-width: 180px;
		border: 2px solid lightgray;
	}

		.source-selector::-ms-expand {
			display: none;
		}

		.source-selector option {
			padding-left: 5px;
			padding-right: 5px;
			text-align: center;
		}

	.divider {
		height: 2px;
		background-color: darkgray;
		margin: 10px 0;
	}
</style>

@code {
	private string WordText = string.Empty;
	private string WordResult = string.Empty;

	private static bool IsTypeChecker = true;

	// private CancellationTokenSource TokenSource = new();

	private string LoadingMethod = "ファイル指定";

	protected override async Task OnInitializedAsync()
	{
		if (!AppSettings.IsLoggedIn)
		{
			NavigationManager.NavigateTo("", false);
			return;
		}
		if (!Words.IsLoadedCorrectly)
			NavigationManager.NavigateTo("top", false);

		await Server.Log(StatusTypes.TypeCheck);
	}
	private async Task TextInput_KeyUp()
	{
		var wordText = await JSRuntime.GetElementValueById<string>("word-input");

		if (string.IsNullOrWhiteSpace(wordText))
		{
			WordResult = string.Empty;
			StateHasChanged();
			return;
		}

		var keyChar = wordText[0];
		if (!Utils.KanaListSpread.Contains(keyChar.ToString()))
		{
			WordResult = "無効な開始文字です。";
			StateHasChanged();
			return;
		}
		var result = $"単語「{wordText}」は\n";
		if (wordText.At(^1) == 'ん')
		{
			result += "んで終わっています。";
			WordResult = result;
			StateHasChanged();
			return;
		}

		var resultWord = Words.GetSplitList(keyChar).Find(x => x.Name == wordText);

		var (type1, type2) = (resultWord.Type1, resultWord.Type2);
		result += (type1, type2) switch
		{
			(WordType.Empty, WordType.Empty) => "辞書にないか、無属性の単語です。",
			(var type, WordType.Empty) => $"{type.TypeToString()}タイプです。",
			(WordType.Empty, var type) => $"{type.TypeToString()}タイプです。",
			(var typeA, var typeB) => $"{typeA.TypeToString()} / {typeB.TypeToString()} タイプです。"
		};
		WordResult = result;
		StateHasChanged();
	}

	/*
	[Obsolete]
	private async Task TextInput_KeyUp()
	{
		TokenSource.Cancel();
		TokenSource = new();

		var wordText = await JSRuntime.GetElementValueById<string>("word-input");

		if (string.IsNullOrWhiteSpace(wordText))
		{
			WordResult = string.Empty;
			StateHasChanged();
			return;
		}

		var keyChar = wordText[0];
		if (!Utils.KanaListSpread.Contains(keyChar.ToString()))
		{
			WordResult = "無効な開始文字です。";
			StateHasChanged();
			return;
		}
		var result = $"単語「{wordText}」は\n";
		if (wordText.At(^1) == 'ん')
		{
			result += "んで終わっています。";
			WordResult = result;
			StateHasChanged();
			return;
		}

		var resultWord = Words.GetSplitList(keyChar).Find(x => x.Name == wordText);

		var exists = true;
		if (resultWord == default)
		{
			WordResult = "Loading...";
			StateHasChanged();
			await Task.Delay(1);
			exists = await Server.ExistsAsync(wordText, TokenSource.Token);
		}

		if (TokenSource.IsCancellationRequested)
			return;



		if (!exists)
		{
			result += "辞書にない単語です。";
			WordResult = result;
			StateHasChanged();
			return;
		}

		var (type1, type2) = (resultWord.Type1, resultWord.Type2);
		result += (type1, type2) switch
		{
			(WordType.Empty, WordType.Empty) => "無属性の単語です。",
			(var type, WordType.Empty) => $"{type.TypeToString()}タイプです。",
			(WordType.Empty, var type) => $"{type.TypeToString()}タイプです。",
			(var typeA, var typeB) => $"{typeA.TypeToString()} / {typeB.TypeToString()} タイプです。"
		};
		WordResult = result;
		StateHasChanged();
	}
	*/
}
