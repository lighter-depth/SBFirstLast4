@page "/settings"
@using System.Text.RegularExpressions
@using Blazored.LocalStorage
@using SBFirstLast4.Logging
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject ILocalStorageService LocalStorage
<PageTitle>設定</PageTitle>

<div class="form">
    <span class="settingname">ユーザー名の変更</span>
    <p>@($"現在のユーザー名: {AppSettings.UserName}")</p>
    <input class="input" type="text" placeholder="新しいユーザー名..." @bind=UserName />
    <button class="button" @onclick=ChangeUserName>登録</button>
    <p id="usernameError" style=@($"color: {ErrorMsgColor};")>@ErrorMsg</p>
</div>
<div class="divider"></div>
<div class="form">
    <span class="settingname">結果のソート</span>
    <input type="checkbox" id="switch" class="checkbox" checked="@AppSettings.SortResult"
    @onchange="async e =>
					{
						await AppSettings.SetSortResult(LocalStorage, (bool)(e.Value ?? false));
						StateHasChanged();
					}" />
    <label for="switch" class="toggle"></label>
    <span class="settingname">ライトなタイプ判定</span>
    <input type="checkbox" id="switch2" class="checkbox" checked="@AppSettings.UseExists"
    @onchange="async e =>
					{
						await AppSettings.SetUseExists(LocalStorage, (bool)(e.Value ?? false));
						StateHasChanged();
					}" />
    <label for="switch2" class="toggle"></label>
    <span class="settingname">ベータ版の機能</span>
    <input type="checkbox" id="switch3" class="checkbox" checked="@AppSettings.BetaMode"
           @onchange="async e =>
					{
						await AppSettings.SetBetaMode(LocalStorage, (bool)(e.Value ?? false));
						StateHasChanged();
					}" />
    <label for="switch3" class="toggle"></label>
</div>
<div class="divider"></div>
<div class="form">
    <span class="settingname">キャッシュの消去</span>
    <button class="button" @onclick=ClearDictionaryCache>辞書データの消去</button>
    <button class="button" @onclick=ClearModuleCache>モジュールデータの消去</button>
    <button class="button" @onclick=ClearAllCache>すべてのデータの消去</button>
</div>
<style>
    .form {
        display: flex;
        flex-direction: column;
        align-items: center;
        margin: 20px;
    }
    .settingname{
        font-size: 16px;
        font-weight: bold;
        margin-top: 5px;
        margin-bottom: 5px;
    }

    .divider {
        height: 2px;
        background-color: darkgray;
        margin: 10px 0;
    }
    .input {
        width: 300px;
        height: 40px;
        border: 2px solid #555;
        border-radius: 10px;
        padding: 10px;
        font-size: 18px;
    }

    .button {
        width: 200px;
        height: 50px;
        background-color: #555;
        color: white;
        border: none;
        border-radius: 10px;
        margin: 10px;
        font-size: 17px;
    }

        .button:hover {
            background-color: #777;
        }


    #usernameError {
        margin-top: 20px;
        text-align: center;
        font-size: 16px;
    }

    .checkbox {
        display: none;
    }

    .toggle {
        position: relative;
        display: inline-block;
        width: 60px;
        height: 34px;
        background-color: lightgray;
        border-radius: 17px;
    }

        .toggle::after {
            content: "";
            position: absolute;
            width: 26px;
            height: 26px;
            border-radius: 50%;
            background-color: white;
            top: 4px;
            left: 4px;
            transition: all 0.3s;
        }

    .checkbox:checked + .toggle::after {
        left: 30px;
    }

    .checkbox:checked + .toggle {
        background-color: green;
    }

</style>
@code {
    private string UserName = string.Empty;
    private string ErrorMsg = string.Empty;
    private string ErrorMsgColor = "black";
    private static readonly Regex UserNameCharRegex = new("^[0-9A-Za-z_ぁ-ヿ]*$");
    private static readonly Regex UserNameLengthRegex = new("^.{3,17}$");

    protected override void OnInitialized()
    {
        if (!AppSettings.IsLoggedIn)
        {
            NavigationManager.NavigateTo("", false);
            return;
        }
        if (!Words.IsLoadedCorrectly)
            NavigationManager.NavigateTo("top", false);
    }


    private async Task ChangeUserName()
    {
        var userName = UserName;
        if (!UserNameCharRegex.IsMatch(userName))
        {
            ErrorMsgColor = "darkred";
            ErrorMsg = "ひらがな、カタカナ、および英数字を使用してください。";
            StateHasChanged();
            return;
        }
        if (!UserNameLengthRegex.IsMatch(userName))
        {
            ErrorMsgColor = "darkred";
            ErrorMsg = "３文字以上１７文字以下のユーザー名を入力してください。";
            StateHasChanged();
            return;
        }
        ErrorMsgColor = "black";
        ErrorMsg = "読み込み中...";
        StateHasChanged();
        await Task.Delay(1);

        var oldName = AppSettings.UserName;
        await AppSettings.SetNameAsync(LocalStorage, userName);

        await AppSettings.SetIsAdminAsync();

        Server.Log(new
        {
            Type = "USERNAME",
            OldName = oldName,
            UserInfo = new
            {
                Name = AppSettings.UserName,
                Guid = AppSettings.Guid,
                Hash = AppSettings.Hash
            },
            Date = DateTime.Now
        });

        await JSRuntime.Alert($"ユーザー名を {userName} に変更しました。");
        ErrorMsg = string.Empty;
        StateHasChanged();
    }
    private async Task ClearDictionaryCache()
    {
        if (!await JSRuntime.Confirm("辞書のキャッシュを消去します。よろしいですか？"))
            return;

        await LocalStorage.RemoveItemAsync(Words.HAS_LOADED);
        await LocalStorage.RemoveItemAsync(Words.TYPED_WORDS);
        await JSRuntime.Alert("辞書のキャッシュを消去しました。");
        NavigationManager.NavigateTo("top");
    }
    private async Task ClearModuleCache()
    {
        if (!await JSRuntime.Confirm("モジュールのキャッシュを消去します。よろしいですか？"))
            return;

        await LocalStorage.RemoveItemAsync("MODULE_FILES");
        await JSRuntime.Alert("モジュールのキャッシュを消去しました。");
    }

    private async Task ClearAllCache()
    {
        if (!await JSRuntime.Confirm("すべてのキャッシュを消去します。よろしいですか？"))
            return;

        Server.Log(new
        {
            Type = "LOGOUT",
            UserInfo = new
            {
                Name = AppSettings.UserName,
                Guid = AppSettings.Guid,
                Hash = AppSettings.Hash
            },
            Date = DateTime.Now
        });

        await LocalStorage.ClearAsync();
        await JSRuntime.Alert("すべてのキャッシュを消去しました。");
        NavigationManager.NavigateTo("");
    }
}
