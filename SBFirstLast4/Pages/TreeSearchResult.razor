@page "/treesearch-result"
@using System.Text.RegularExpressions
@using Interpreter = SBFirstLast4.Dynamic.Interpreter;
@using ScriptExecutor = SBFirstLast4.Dynamic.ScriptExecutor;
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
<PageTitle>検索結果</PageTitle>


<h1>検索結果</h1>

<div class="container">
	@if (IsSearching)
	{
		<p class="loading-text">
			単語を検索中...<br>
			(これには時間がかかることがあります)
		</p>
	}
	else
	{
		<ul class="fancy-list">
			@foreach (var item in VisibleItems)
			{
				<li>@item</li>
			}
		</ul>
	}
</div>

<div class="pagination">
	<div class="pagination-buttons">
		<button @onclick="GoToPreviousPage" disabled="@IsFirstPage"><span class="oi oi-chevron-left" /></button>
		<button @onclick="GoToNextPage" disabled="@IsLastPage"><span class="oi oi-chevron-right" /></button>
	</div>
	<div class="download-button">
		@if (!IsSearching && VisibleItems.Any())
		{
			<a @onclick="DownloadButton_OnClick" class="btn-download">ファイルに保存</a>
		}
	</div>
</div>

<div class="indicators">
	<div class="count-indicator">合計 @(IsTyped ? TypedData.Length : TypelessData.Length) 件</div>
	<div class="page-indicator">@CurrentPage/@TotalPages</div>
</div>

<style>
	body {
		font-family: Arial, sans-serif;
		margin: 0;
		padding: 0;
		background-color: #f5f6f1;
	}

	.container {
		max-width: 800px;
		margin: 0 auto;
		padding: 20px;
	}

	h1 {
		text-align: center;
		color: #333;
		font-weight: bold;
	}

	.fancy-list {
		list-style: none;
		padding: 0;
	}

		.fancy-list li {
			background: #f4f4f4;
			margin: 10px 0;
			padding: 15px;
			border-radius: 5px;
			box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
			transition: background 0.3s ease-in-out;
		}

			.fancy-list li:hover {
				background: #ddd;
			}

	.pagination {
		display: flex;
		justify-content: space-between;
		align-items: center;
		margin-top: 20px;
	}

	.pagination-buttons button {
		padding: 10px 10px;
		border: none;
		border-radius: 30px;
		font-size: 16px;
		cursor: pointer;
		transition: background-color 0.3s, color 0.3s;
		text-decoration: none;
	}

		.pagination-buttons button[disabled] {
			background-color: #ddd;
			color: #999;
			cursor: not-allowed;
		}

	.download-button {
		width: max(10%, 200px);
	}

		.download-button a {
			padding: 10px 20px;
			border: none;
			border-radius: 30px;
			font-size: 16px;
			cursor: pointer;
			background: linear-gradient(to right, #45aaf2, #007bff);
			color: white;
			transition: background-color 0.3s, color 0.3s;
			text-decoration: none;
		}

			.download-button a:hover {
				background-color: white;
				color: #45aaf2;
			}

			.download-button a:disabled {
				background-color: #ddd;
				color: #999;
				cursor: not-allowed;
			}

	.indicators {
		display: flex;
		justify-content: space-between;
		margin-top: 10px;
	}

	.count-indicator,
	.page-indicator {
		font-size: 14px;
		color: #666;
		margin-bottom: 20px;
	}

	.loading-text {
		font-size: 16px;
		color: #999;
	}
</style>

@code {
	private bool IsSearching = true;
	private List<string> VisibleItems
	=> (IsTyped ? TypedData.Select(x => x.ToString()) : TypelessData)
		.Skip((CurrentPage - 1) * ItemsPerPage)
		.Take(ItemsPerPage)
		.ToList();

	internal static bool IsTyped;
	internal static string Query = string.Empty;

	private string[] TypelessData = [];

	private Word[] TypedData = [];

	private bool IsFirstPage => CurrentPage == 1;
	private bool IsLastPage => CurrentPage == TotalPages;
	private const int ItemsPerPage = 20;
	private int CurrentPage = 1;
	private int TotalPages => (int)Math.Ceiling((double)(IsTyped ? TypedData.Length : TypelessData.Length) / ItemsPerPage);

	protected override async Task OnInitializedAsync()
	{
		if (!AppSettings.IsLoggedIn)
		{
			NavigationManager.NavigateTo("", false);
			return;
		}

		if (!Words.IsLoadedCorrectly)
		{
			NavigationManager.NavigateTo("top", false);
			return;
		}


		if (await AppSettings.ShouldReturn(Http))
			NavigationManager.NavigateTo("", false);
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			// 画面遷移が完了するまで待機
			await Task.Delay(100);

			try
			{
				var (success, translated, selector, errorMsg) = await Interpreter.TryInterpretAsync(Query);

				if (!success)
				{
					await JSRuntime.Alert($"{errorMsg} Query: {Query}");
					NavigationManager.NavigateTo("treesearch", false);
					return;
				}

				var result = ScriptExecutor.ExecuteDynamic(translated, selector);
				if (IsTyped)
				{
					TypedData = (Word[])result!;
					if (AppSettings.SortResult)
						Array.Sort(TypedData);
				}
				else
				{
					TypelessData = (string[])result!;
					if (AppSettings.SortResult)
						Array.Sort(TypelessData);
				}

				IsSearching = false;
				StateHasChanged();
			}
			catch (Exception ex)
			{
				await JSRuntime.AlertEx(ex);
				await JSRuntime.Alert(Query);
				NavigationManager.NavigateTo("treesearch", false);
			}
		}
	}

	private void GoToPreviousPage()
	{
		if (!IsFirstPage)
		{
			CurrentPage--;
			StateHasChanged();
		}
	}

	private void GoToNextPage()
	{
		if (!IsLastPage)
		{
			CurrentPage++;
			StateHasChanged();
		}
	}
	private void DownloadButton_OnClick()
	{
		if (IsTyped) DownloadConfig.DataListWord = TypedData;
		else DownloadConfig.DataListStr = TypelessData;
		NavigationManager.NavigateTo("download-config");
	}
}