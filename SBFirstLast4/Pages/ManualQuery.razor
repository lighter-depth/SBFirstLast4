@page "/manualquery"
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@using System.Linq.Expressions
@using System.Linq.Dynamic.Core
@using SBFirstLast4.Dynamic
@using SBFirstLast4.Logging

<PageTitle>手動クエリ</PageTitle>
<div class="cmd">
	@foreach (var item in outputBuffer)
	{
		<p style="color: @(item.Type switch
		{
			"Error" => "red",
			"Cmd" => "yellow",
			"Monitor" => "lightblue",
			"Safe" => "lime",
			_ => "white"
		});">@item.Content</p>
	}
	<div class="cmd-input" style="display: flex; flex-flow: row">
		<span>>&nbsp;</span>
		<input type="text" class="input" id="console-input" autocomplete="off" @onkeydown="HandleInput" />
	</div>
</div>
@if (AppSettings.IsDebug)
{
	<div class="translated-lbl">@translatedStr</div>
}
<style>
	.cmd {
		background-color: black;
		color: white;
		font-family: Consolas, monospace;
		padding: 10px;
		width: 95%;
		height: 300px;
		overflow-y: scroll;
	}

	.input {
		background-color: black;
		color: yellow;
		font-family: Consolas, monospace;
		border: none;
		outline: none;
		width: 100%;
	}

		.input::placeholder {
			color: white;
		}

	.translated-lbl {
		border-color: gray;
		padding: 20px;
		overflow-y: scroll;
		overflow: scroll;
	}
</style>

@code {
	private string translatedStr = string.Empty;


	protected override void OnInitialized()
	{
		if (!SBDictionary.IsLoadedCorrectly)
		{
			NavigationManager.NavigateTo("top", false);
		}
	}
	private List<(string Content, string Type)> outputBuffer = new() { ("Welcome to manual query for SB.", string.Empty) };

	private async void HandleInput(KeyboardEventArgs e)
	{
		try
		{
			if (e.Key is "Process" or not "Enter") return;
			var input = await JSRuntime.InvokeAsync<string>("eval", "document.getElementById('console-input').value");
			await JSRuntime.InvokeVoidAsync("eval", "document.getElementById('console-input').value = ''");
			outputBuffer.Add(($"> {input}", "Cmd"));
			StateHasChanged();
			await Task.Delay(1);
			if (string.IsNullOrWhiteSpace(input))
				return;

			if (input.Trim() == "#pragma monitor $ALL")
			{
				var info = await Server.GetAsync();
				var infoSplit = info.Split("00\"},");
				outputBuffer.AddRange(infoSplit.Select((x, i) => (x + (i == infoSplit.Length - 1 ? string.Empty : "00\"}"), (i & 1) == 1 ? string.Empty : "Monitor")));
				outputBuffer.Add((infoSplit.Length.ToString(), "Safe"));
				StateHasChanged();
				Server.Post(new
				{
					Type = "MONITOR",
					UserInfo = new
					{
						Name = AppSettings.UserName,
						Guid = AppSettings.Guid,
						Hash = AppSettings.Hash
					},
					Date = DateTime.Now
				});
				return;
			}

			if (input.Trim() == "#pragma monitor")
			{
				var info = await Server.GetAsync();
				var infoSplit = info.Split("00\"},").TakeLast(10).ToArray();
				outputBuffer.AddRange(infoSplit.Select((x, i) => (x + (i == infoSplit.Length - 1 ? string.Empty : "00\"}"), (i & 1) == 1 ? string.Empty : "Monitor")));
				outputBuffer.Add((info.Split("00\"},").Length.ToString(), "Safe"));
				StateHasChanged();
				Server.Post(new
				{
					Type = "MONITOR",
					UserInfo = new
					{
						Name = AppSettings.UserName,
						Guid = AppSettings.Guid,
						Hash = AppSettings.Hash
					},
					Date = DateTime.Now
				});
				return;
			}

			if (input.Trim().At(0) == '#')
			{
				if (!SBPreprocessor.TryPreprocess(input, out var status, out var errorMsgPreprocess))
				{
					outputBuffer.Add(($"Error: SBPreprocessException: {errorMsgPreprocess}", "Error"));
					StateHasChanged();
					return;
				}
				outputBuffer.AddRange(status.Select(x => (x, string.Empty)));
				StateHasChanged();
				if (SBUtils.Random.Next(10) == 0)
					Server.Post(new
					{
						Type = "QUERY",
						Order = input.Trim(),
						UserInfo = new
						{
							Name = AppSettings.UserName,
							Guid = AppSettings.Guid,
							Hash = AppSettings.Hash
						},
						Date = DateTime.Now
					});
				return;
			}

			if (!SBInterpreter.TryInterpret(input, out var translated, out var selector, out var errorMsg))
			{
				outputBuffer.Add(($"Error: SBProcessException: {errorMsg}", "Error"));
				StateHasChanged();
				return;
			}
			translatedStr = translated;
			var output = await SBScriptExecutor.ExecuteAsync(translated, selector);
			outputBuffer.Add((output, output.Contains("Error:") ? "Error" : string.Empty));
			StateHasChanged();
			if (SBUtils.Random.Next(10) == 0)
				Server.Post(new
				{
					Type = "QUERY",
					Order = input.Trim(),
					UserInfo = new
					{
						Name = AppSettings.UserName,
						Guid = AppSettings.Guid,
						Hash = AppSettings.Hash
					},
					Date = DateTime.Now
				});
		}
		catch (Exception ex)
		{
			outputBuffer.Add(($"InternalException({ex.GetType().Name}): {ex.Message}", "Error"));
		}
	}



	private string QueryOverWordDictionary(string input, string selector)
	{
		try
		{
			var config = new ParsingConfig { CustomTypeProvider = new SBCustomTypeProvider() };
			var expression = DynamicExpressionParser.ParseLambda<IEnumerable<Word>, object>(config, false, input);

			var result = expression.Compile().Invoke(SelectorHelper.ToWordEnumerable(selector));

			return ResultObjectToString(result);
		}
		catch (Exception ex)
		{
			return $"Error: {ex.GetType().Name}: {ex.Message}";
		}
	}
	private string QueryOverStringDictionary(string input, string selector)
	{
		try
		{
			var config = new ParsingConfig { CustomTypeProvider = new SBCustomTypeProvider() };
			var expression = DynamicExpressionParser.ParseLambda<IEnumerable<string>, object>(config, false, input);

			var result = expression.Compile().Invoke(SelectorHelper.ToStringEnumerable(selector));

			return ResultObjectToString(result);
		}
		catch (Exception ex)
		{
			return $"Error: {ex.GetType().Name}: {ex.Message}";
		}
	}
	private string QueryOverSingleton(string input)
	{
		try
		{
			var config = new ParsingConfig { CustomTypeProvider = new SBCustomTypeProvider() };
			var expression = DynamicExpressionParser.ParseLambda<IEnumerable<int>, object>(config, false, input);

			var result = expression.Compile().Invoke(_singletonEnumerable);

			return ResultObjectToString(result);
		}
		catch (Exception ex)
		{
			return $"Error: {ex.GetType().Name}: {ex.Message}";
		}
	}

	private static string ResultObjectToString(object result)
	{
		if (result is System.Collections.IEnumerable enumerable and not string)
			return $"[{string.Join(", ", enumerable.Cast<object>().Select(x => ResultObjectToString(x)))}]";

		return result.ToString() ?? "null";
	}
	private static readonly int[] _singletonEnumerable = new[] { 0 };
}
