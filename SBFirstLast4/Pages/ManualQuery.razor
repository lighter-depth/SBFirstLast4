@page "/manualquery"
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject ILocalStorageService LocalStorage
@using Blazored.LocalStorage
@using System.Linq.Expressions
@using System.Linq.Dynamic.Core
@using SBFirstLast4.Dynamic
@using SBFirstLast4.Logging

<PageTitle>手動クエリ</PageTitle>
<div class="cmd">
	@foreach (var item in outputBuffer)
	{
		<p style="color: @(item.Type switch
		{
			"Error" => "red",
			"Cmd" => "yellow",
			"Monitor" => "lightblue",
			"Safe" => "lime",
			_ => "white"
		});">@item.Content</p>
	}
	<div class="cmd-input" style="display: flex; flex-flow: row">
		<span>>&nbsp;</span>
		<input type="text" class="input" id="console-input" autocomplete="off" @onkeydown="HandleInput" />
	</div>
</div>
@if (AppSettings.IsDebug)
{
	<div class="translated-lbl">@translatedStr</div>
}
<div class="file-input">
	<InputFile OnChange="HandleFileSelected" multiple />
</div>

@if (moduleFiles != null)
{
	<div style="display: flex; flex-flow: column;">
		@foreach (var (file, i) in moduleFiles.Select((f, i) => (f, i)))
		{
			<div>
				<span class="file-name">@file.Name</span>
				<span class="file-size">(@file.Size) bytes</span>
			</div>
			<div id="file@(i.ToString())" class="progress-bar" style="width: @($"{progressPercentages[file.Name]}%");">
			</div>
			<label for="file@(i.ToString())" @onclick="async() => await RemoveFileAsync(file)">
				<span class="oi oi-x"></span>
			</label>
		}
	</div>
}
<style>
	.cmd {
		background-color: black;
		color: white;
		font-family: Consolas, monospace;
		padding: 10px;
		width: 95%;
		height: 300px;
		overflow-y: scroll;
	}

	.input {
		background-color: black;
		color: yellow;
		font-family: Consolas, monospace;
		border: none;
		outline: none;
		width: 100%;
	}

		.input::placeholder {
			color: white;
		}

	.translated-lbl {
		border-color: gray;
		padding: 20px;
		overflow-y: scroll;
		overflow: scroll;
	}

	.file-input {
		border: 2px dashed lightgray;
		background-color: white;
		color: black;
		cursor: pointer;
		padding: 10px;
		margin: 10px;
	}

	.file-name {
		font-weight: bold;
		margin-left: 10px;
	}

	.file-size {
		font-style: italic;
		margin-left: 10px;
	}

	.progress-bar {
		height: 20px;
		background-color: lightblue;
	}

</style>

@code {
	private string translatedStr = string.Empty;

	internal static bool IsReflect { get; set; }

	private List<FileModel> moduleFiles = new();


	private Dictionary<string, int> progressPercentages = new Dictionary<string, int>();



	protected override async Task OnInitializedAsync()
	{
		if (!AppSettings.IsLoggedIn)
		{
			NavigationManager.NavigateTo("", false);
			return;
		}
		if (!SBDictionary.IsLoadedCorrectly)
			NavigationManager.NavigateTo("top", false);

		await ImportStoredModules();
		StateHasChanged();
	}

	private async Task ImportStoredModules()
	{
		var storedFiles = await LocalStorage.GetItemAsync<List<FileModel>>("MODULE_FILES");

		if (storedFiles?.Count > 0)
		{
			foreach (var file in storedFiles)
				progressPercentages[file.Name] = 100;

			moduleFiles = storedFiles;
		}
		foreach (var file in moduleFiles)
		{
			if (!ModuleManager.Import(Module.Compile(file.Content, true, file.Name), out var status))
			{
				outputBuffer.Add((status, "Error"));
				moduleFiles.Remove(file);
				StateHasChanged();
				continue;
			}
			outputBuffer.Add((status, "Safe"));
			StateHasChanged();
		}
	}


	private List<(string Content, string Type)> outputBuffer = new() { ("Welcome to manual query for SB.", string.Empty) };

	private async void HandleInput(KeyboardEventArgs e)
	{
		try
		{
			if (e.Key is "Process" or not "Enter") return;
			var input = await JSRuntime.InvokeAsync<string>("eval", "document.getElementById('console-input').value");
			await JSRuntime.InvokeVoidAsync("eval", "document.getElementById('console-input').value = ''");
			outputBuffer.Add(($"> {input}", "Cmd"));
			StateHasChanged();
			await Task.Delay(1);
			if (string.IsNullOrWhiteSpace(input))
				return;

			if (input.Trim() == "#pragma monitor $ALL")
			{
				var info = await Server.GetAsync();
				var infoSplit = info.Split("00\"},");
				outputBuffer.AddRange(infoSplit.Select((x, i) => (x + (i == infoSplit.Length - 1 ? string.Empty : "00\"}"), (i & 1) == 1 ? string.Empty : "Monitor")));
				outputBuffer.Add((infoSplit.Length.ToString(), "Safe"));
				StateHasChanged();
				Server.Post(new
				{
					Type = "MONITOR",
					UserInfo = new
					{
						Name = AppSettings.UserName,
						Guid = AppSettings.Guid,
						Hash = AppSettings.Hash
					},
					Date = DateTime.Now
				});
				return;
			}

			if (input.Trim() == "#pragma monitor")
			{
				var info = await Server.GetAsync();
				var infoSplit = info.Split("00\"},").TakeLast(10).ToArray();
				outputBuffer.AddRange(infoSplit.Select((x, i) => (x + (i == infoSplit.Length - 1 ? string.Empty : "00\"}"), (i & 1) == 1 ? string.Empty : "Monitor")));
				outputBuffer.Add((info.Split("00\"},").Length.ToString(), "Safe"));
				StateHasChanged();
				Server.Post(new
				{
					Type = "MONITOR",
					UserInfo = new
					{
						Name = AppSettings.UserName,
						Guid = AppSettings.Guid,
						Hash = AppSettings.Hash
					},
					Date = DateTime.Now
				});
				return;
			}

			if (input.Trim().At(0) == '#')
			{
				if (!SBPreprocessor.TryPreprocess(input, out var status, out var errorMsgPreprocess))
				{
					outputBuffer.Add(($"Error: SBPreprocessException: {errorMsgPreprocess}", "Error"));
					StateHasChanged();
					return;
				}
				outputBuffer.AddRange(status.Select(x => (x, string.Empty)));
				StateHasChanged();

				Server.Post(new
				{
					Type = "QUERY",
					Order = input.Trim(),
					UserInfo = new
					{
						Name = AppSettings.UserName,
						Guid = AppSettings.Guid,
						Hash = AppSettings.Hash
					},
					Date = DateTime.Now
				});

				if (input.Trim().StartsWith("#delete"))
					await HandleDeletedFiles();

				return;
			}

			if (!SBInterpreter.TryInterpret(input, out var translated, out var selector, out var errorMsg))
			{
				outputBuffer.Add(($"Error: SBProcessException: {errorMsg}", "Error"));
				StateHasChanged();
				return;
			}
			translatedStr = translated;
			var output = await SBScriptExecutor.ExecuteAsync(translated, selector);
			outputBuffer.Add((output, output.Contains("Error:") ? "Error" : string.Empty));

			if (IsReflect)
				outputBuffer.Add((translated, "Monitor"));

			StateHasChanged();

			Server.Post(new
			{
				Type = "QUERY",
				Order = input.Trim(),
				UserInfo = new
				{
					Name = AppSettings.UserName,
					Guid = AppSettings.Guid,
					Hash = AppSettings.Hash
				},
				Date = DateTime.Now
			});
		}
		catch (Exception ex)
		{
			outputBuffer.Add(($"InternalException({ex.GetType().Name}): {ex.Message}", "Error"));
		}
	}

	private async Task HandleFileSelected(InputFileChangeEventArgs e)
	{
		foreach (var file in e.GetMultipleFiles())
			if (moduleFiles.Any(f => f.Name == file.Name))
			{
				moduleFiles.RemoveAll(f => f.Name != file.Name);
				progressPercentages.Remove(file.Name);
			}


		foreach (var file in e.GetMultipleFiles())
		{
			progressPercentages[file.Name] = 0;

			using var stream = file.OpenReadStream();

			using var reader = new StreamReader(stream);

			var fileContent = await reader.ReadToEndAsync();
			var fileModel = new FileModel(file.Name, fileContent, file.Size);
			moduleFiles.Add(fileModel);
			StateHasChanged();
			await Task.Delay(1);

			for (var i = 0; i < 100; i += 2)
			{
				progressPercentages[file.Name] += 2;
				StateHasChanged();
				await Task.Delay(1);
			}

			StateHasChanged();
			await Task.Delay(100);

			if (!ModuleManager.Import(Module.Compile(fileContent, true, file.Name), out var status))
			{
				outputBuffer.Add((status, "Error"));
				moduleFiles.Remove(fileModel);
				StateHasChanged();
				continue;
			}
			outputBuffer.Add((status, "Safe"));
			StateHasChanged();
		}
		await LocalStorage.SetItemAsync("MODULE_FILES", moduleFiles);
	}

	private async Task RemoveFileAsync(FileModel file)
	{
		if (!ModuleManager.DeleteByRuntimeName(file.Name, out var status))
		{
			outputBuffer.Add((status, "Error"));
			StateHasChanged();
			return;
		}
		outputBuffer.Add((status, "Safe"));

		await HandleDeletedFiles();
	}

	private async Task HandleDeletedFiles()
	{

		var filesToRemove = new List<FileModel>();

		foreach (var m in moduleFiles)
			if (!ModuleManager.RuntimeModules.Any(r => r.RuntimeName == m.Name))
			{
				filesToRemove.Add(m);
				progressPercentages.Remove(m.Name);
			}
		moduleFiles.RemoveRange(filesToRemove);

		await LocalStorage.SetItemAsync("MODULE_FILES", moduleFiles);
		StateHasChanged();
	}

	private record FileModel(string Name, string Content, long Size);
}
