@page "/bestdamage"
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@using SBFirstLast4.Logging

<PageTitle>最高打点検索</PageTitle>
<div class="top-grid">
	<div class="border">
		<div class="stack-panel">
			<label class="label">最高打点検索</label>
			<label class="text-label">
				単語を入力すると、その単語@(IsAttackSide ? "を用いて" : "に対して")高いダメージを出せる単語を、順番に@(TakeCount)個出力します。<br><br>
				（動作が遅い場合はページをリロード後、ライト版辞書を選択すると改善するかもしれません。）
			</label>
		</div>
	</div>
</div>
<div class="grid">
	<div class="border">
		<div class="stack-panel">
			<div class="inner-grid">
				<label class="text-label" style="font-weight:600; font-size: 22px;"> @(IsAttackSide ? "攻撃サイド" : "防御サイド")</label>
				<input type="checkbox" id="switchmain" class="checkbox" checked="@IsAttackSide"
				@onchange="async e =>
					{
						IsAttackSide = (bool)(e.Value ?? false);
						await ReloadResult();
					}" />
				<label for="switchmain" class="toggle" id="togglemain"></label>
			</div>
		</div>
	</div>
</div>
<div class="grid">
	<div class="border">
		<div class="stack-panel">
			<div class="inner-grid">
				<input class="text-input" id="word-input" type="text" placeholder="単語名を入力..." @onkeyup=TextInput_KeyUp />
				<label class="text-label">@TypeIndicator</label>
			</div>
			<div class="divider"></div>
			<div class="inner-grid">
				<label class="text-label" style="font-weight:600; font-size: 22px;"> とくせいの使用</label>
				<input type="checkbox" id="switch" class="checkbox" checked="true"
				@onchange="async e =>
					{
						AllowAbility = (bool)(e.Value ?? false);
						StateHasChanged();
						await Task.Delay(1);
					}" />
				<label for="switch" class="toggle"></label>
			</div>
			<div class="divider"></div>
			<div class="inner-grid">
				<label class="text-label" style="font-weight:600; font-size: 22px;"> 除外タイプ</label>
				<div class="filters-textarea" style="box-shadow: none;">
					<ul class="filters-sortable">
						@if (ExceptTypes.Count == 0)
						{
							<li class="filters-frame" style="background-color: darkblue; color: white; border-radius: 8px;" @onclick="() =>
							{
								ShowExceptableTypes = true;
								StateHasChanged();
							}">
								除外タイプを追加　+
							</li>
						}
						else
						{
							foreach (var i in ExceptTypes)
							{
								<li class="filters-frame" @onclick="async() =>
								{
									ExceptTypes.Remove(i);
									await ReloadResult();
								}">
									@i.TypeToString()
									<span class="filters-delete" role="button" tabindex="0" />
								</li>
							}
							<li class="filters-frame" @onclick="() =>
							{
								ShowExceptableTypes = true;
								StateHasChanged();
							}" style="max-width: 21px;" @onclick:stopPropagation=true>
								＋
							</li>
						}
					</ul>
				</div>
				@if (ShowExceptableTypes)
				{
					<div class="scrollable-list">
						@foreach (var filter in VisibleTypes)
						{
							<p @onclick="async() =>
							{
								ExceptTypes.Add(filter);
								await ReloadResult();
							}">@filter.TypeToString()</p>
						}
					</div>
					<div class=transparent-screen @onclick="() =>
					{
						ShowExceptableTypes = false;
						StateHasChanged();
					}">
					</div>
				}
			</div>
			<div class="divider"></div>
			<div class="inner-grid">
				@foreach (var i in WordResults)
				{
					<label class="text-label">@i</label>
				}
				<div style="display: flex; flex-flow: row; gap: 30px;">
					@if ((AllowAbility ? AbilityResults : PureResults).Count - TakeCount > 0)
					{
						<label class="text-label" style="color: dodgerblue; text-decoration: underline; cursor: pointer"
						@onclick="() =>
						{
							TakeCount += 5;
							StateHasChanged();
						}">さらに表示...</label>
					}
					@if (Math.Min((AllowAbility ? AbilityResults : PureResults).Count, TakeCount) > 5)
					{
						<label class="text-label" style="color: dodgerblue; text-decoration: underline; cursor: pointer"
						@onclick="() =>
						{
							TakeCount = 5;
							StateHasChanged();
						}">表示数を減らす...</label>
					}
				</div>
			</div>
		</div>
	</div>
</div>
<style>
	body {
		font-family: Arial, sans-serif;
		margin: 0;
		padding: 0;
		background-color: #f5f6f1;
	}

	.top-grid {
		display: block;
	}

	.grid {
		display: grid;
	}

	.border {
		margin: 20px;
		border: 2px solid gray;
		border-radius: 10px;
		padding: 20px;
		background-color: white;
		box-shadow: 0px 2px 5px rgba(0, 0, 0, 0.2);
	}

	.stack-panel {
		display: flex;
		flex-direction: column;
		padding-left: 30px;
		padding-right: 30px;
		padding-top: 10px;
		padding-bottom: 10px
	}

	.inner-grid {
		display: grid;
		grid-template-rows: auto auto;
		row-gap: 15px;
		margin-bottom: 10px;
		justify-items: center;
		align-items: center;
	}

	.label {
		text-align: center;
		font-weight: bold;
		font-size: 30px;
		color: black;
	}

	.text-label {
		padding-top: 10px;
		text-align: center;
		font-size: 18px;
		font-weight: 100;
		color: black;
	}

	.text-input {
		width: 80%;
		padding: 12px;
		font-size: 18px;
		border: 2px solid gray;
		border-radius: 5px;
		margin-top: 8px;
	}

		.text-input::placeholder {
			color: dimgray;
		}

	.divider {
		height: 2px;
		background-color: darkgray;
		margin: 10px 0;
	}


	.checkbox {
		display: none;
	}

	.toggle {
		position: relative;
		display: inline-block;
		width: 60px;
		height: 34px;
		background-color: lightgray;
		border-radius: 17px;
	}

		.toggle::after {
			content: "";
			position: absolute;
			width: 26px;
			height: 26px;
			border-radius: 50%;
			background-color: white;
			top: 4px;
			left: 4px;
			transition: all 0.3s;
		}

	#togglemain{
		background-color: #6C5CE7;
	}

	.checkbox:checked + .toggle::after {
		left: 30px;
	}

	.checkbox:checked + .toggle {
		background-color: green;
	}

	#switchmain:checked + .toggle {
		background-color: #E76C5C;
	}

	.scrollable-list {
		height: 150px;
		overflow-y: scroll;
		width: 90%;
		border: 1px solid #888888;
		border-radius: 10px;
		background-color: #EEEEEE;
		margin-top: 9px;
		z-index: 2;
	}

		.scrollable-list > p {
			margin: 10px 20px 10px 20px;
			padding-left: 10px;
			padding-top: 2px;
			padding-bottom: 2px;
			font-size: 18.5px;
			background-color: white;
			box-shadow: 0px 2px 5px rgba(0, 0, 0, 0.2);
			border-radius: 10px;
			border-color: transparent;
			cursor: pointer;
		}

			.scrollable-list > p:hover {
				background-color: aliceblue;
			}

	.filters-textarea {
		background: #fff;
		border: 1px solid #ddd;
		box-sizing: border-box;
		margin: 2px 0;
		padding: 4px;
		width: 100%;
	}

	.filters-sortable {
		-webkit-padding-start: 0;
		align-items: center;
		display: flex;
		flex-wrap: wrap;
		justify-content: left;
		list-style: none;
		margin: 0;
		padding-inline-start: 0;
		padding: 0;
		gap: 10px;
		min-height: 19px;
	}

	.filters-frame {
		background: #fff;
		border: 1px solid #d9d9d9;
		border-radius: 5px;
		box-shadow: none;
		color: #404040;
		cursor: pointer;
		font-size: 17px;
		margin: 0;
		max-height: 100%;
		max-width: 100%;
		padding: 1px 23px 1px 6px;
		resize: none;
		word-break: break-all;
		z-index: 10;
	}

	.filters-delete {
		background: #fff;
		border-radius: 50%;
		box-shadow: 0 0 1px 1px #999;
		cursor: pointer;
		display: inline-block;
		height: 15px;
		line-height: 5px;
		margin-left: 3px;
		margin-top: 4px;
		position: absolute;
		vertical-align: middle;
		width: 15px;
	}

		.filters-delete::before, .filters-delete::after {
			background-color: #666;
			content: "";
			height: 1px;
			left: 2px;
			position: absolute;
			top: 7px;
			-webkit-transform: rotate(45deg);
			transform: rotate(45deg);
			width: 11px;
		}

		.filters-delete::after {
			-webkit-transform: rotate(-45deg);
			transform: rotate(-45deg);
		}

	.filters-list {
		position: absolute;
		top: 50px;
		left: 50px;
		width: 200px;
		height: 300px;
		border: 1px solid black;
		background-color: white;
		z-index: 10;
		padding: 10px;
		overflow-y: scroll;
	}

	.transparent-screen {
		position: fixed;
		top: 0;
		left: 0;
		width: 100%;
		height: 100%;
		z-index: 1;
		background-color: transparent;
	}

</style>

@code {
	private string TypeIndicator = string.Empty;
	private bool AllowAbility = true;
	private IEnumerable<string> WordResults => (AllowAbility ? AbilityResults : PureResults).Take(TakeCount);
	private List<string> PureResults = [];
	private List<string> AbilityResults = [];
	private List<WordType> ExceptTypes = [];
	private bool ShowExceptableTypes;
	private IEnumerable<WordType> VisibleTypes => Enum.GetValues<WordType>().Except(ExceptTypes.Append(default));
	private int TakeCount = 5;
	private static bool IsAttackSide;

	protected override async Task OnInitializedAsync()
	{
		if (!AppSettings.IsLoggedIn)
		{
			NavigationManager.NavigateTo("", false);
			return;
		}
		if (!Words.IsLoadedCorrectly)
		{
			NavigationManager.NavigateTo("top", false);
			return;
		}

		if (await AppSettings.ShouldReturn(Http))
		{
			NavigationManager.NavigateTo("", false);
			return;
		}

		await Server.Log(StatusTypes.BestDmg);
	}

	private async Task TextInput_KeyUp() => await ReloadResult();

	private async Task ReloadResult()
	{
		var wordText = await JSRuntime.GetElementValueById<string>("word-input");
		await Task.Delay(1);
		var word = await InferWordTypeOrDefaultAsync(wordText);
		if (word == default)
		{
			PureResults = new();
			AbilityResults = new();
			StateHasChanged();
			await Task.Delay(1);
			return;
		}

		if (IsAttackSide)
		{
			ReloadAttackSideResult(word);
			return;
		}

		var list = Words.GetSplitList(wordText.GetLastChar()) is var l && ExceptTypes.Count == 0
					? l
					: l.Where(w => !w.Contains(ExceptTypes));

		var randomLow = word.IsEmpty ? 1 : .85;
		var randomHigh = word.IsEmpty ? 1 : .99;
		var resultList = new List<AttackInfo>();
		var noAbilityList = new List<AttackInfo>();
		foreach (var i in list)
		{
			var lowDmgRaw = (int)(10 * i.CalcEffectiveDmg(word) * randomLow);
			var highDmgRaw = (int)(10 * i.CalcEffectiveDmg(word) * randomHigh);
			resultList.Add(new(i, WordType.Empty, highDmgRaw, lowDmgRaw));
			noAbilityList.Add(new(i, WordType.Empty, highDmgRaw, lowDmgRaw));
			if (i.Contains(WordType.Place))
			{
				var (lowDmg, highDmg) = ((int)(lowDmgRaw * 1.5), (int)(highDmgRaw * 1.5));
				resultList.Add(new(i, WordType.Place, highDmg, lowDmg));
			}
			if (i.Contains(WordType.Body))
			{
				var (lowDmg, highDmg) = ((int)(lowDmgRaw * 1.5), (int)(highDmgRaw * 1.5));
				resultList.Add(new(i, WordType.Body, highDmg, lowDmg));
			}
			if (i.Contains(WordType.Science))
			{
				var (lowDmg, highDmg) = ((int)(lowDmgRaw * 1.5), (int)(highDmgRaw * 1.5));
				resultList.Add(new(i, WordType.Science, highDmg, lowDmg));
			}
			if (i.Contains(WordType.Person))
			{
				var (lowDmg, highDmg) = ((int)(lowDmgRaw * 1.5), (int)(highDmgRaw * 1.5));
				resultList.Add(new(i, WordType.Person, highDmg, lowDmg));
			}
			if (i.Contains(WordType.Insult))
			{
				var (lowDmg, highDmg) = ((int)(lowDmgRaw * 1.5), (int)(highDmgRaw * 1.5));
				resultList.Add(new(i, WordType.Insult, highDmg, lowDmg));
			}
			if (i.Contains(WordType.Religion))
			{
				var (lowDmg, highDmg) = ((int)(lowDmgRaw * 1.5), (int)(highDmgRaw * 1.5));
				resultList.Add(new(i, WordType.Religion, highDmg, lowDmg));
			}
			if (i.Name.Length == 6 && !i.IsHeal)
			{
				var (lowDmg, highDmg) = ((int)(lowDmgRaw * 1.5), (int)(highDmgRaw * 1.5));
				resultList.Add(new(i, WordType.Tale, highDmg, lowDmg));
			}
			if (i.Name.Length > 6 && !i.IsHeal)
			{
				var (lowDmg, highDmg) = (lowDmgRaw * 2, highDmgRaw * 2);
				resultList.Add(new(i, WordType.Tale, highDmg, lowDmg));
			}
		}
		resultList.Sort();
		noAbilityList.Sort();
		AbilityResults = resultList.Select(x => x.ToString()).ToList();
		PureResults = noAbilityList.Select(x => x.ToString()).ToList();
		StateHasChanged();
	}

	private void ReloadAttackSideResult(Word word)
	{
		var list = Words.TypedWords.Where(w => w.End == word.Start) is var l && ExceptTypes.Count == 0
			? l
			: l.Where(w => !w.Contains(ExceptTypes));


		var resultList = new List<AttackInfo>();
		var noAbilityList = new List<AttackInfo>();
		foreach (var i in list)
		{
			var randomLow = i.IsEmpty ? 1 : .85;
			var randomHigh = i.IsEmpty ? 1 : .99;

			var lowDmgRaw = (int)(10 * word.CalcEffectiveDmg(i) * randomLow);
			var highDmgRaw = (int)(10 * word.CalcEffectiveDmg(i) * randomHigh);
			resultList.Add(new(i, WordType.Empty, highDmgRaw, lowDmgRaw));
			noAbilityList.Add(new(i, WordType.Empty, highDmgRaw, lowDmgRaw));
			if (word.Contains(WordType.Place))
			{
				var (lowDmg, highDmg) = ((int)(lowDmgRaw * 1.5), (int)(highDmgRaw * 1.5));
				resultList.Add(new(i, WordType.Place, highDmg, lowDmg));
			}
			if (word.Contains(WordType.Body))
			{
				var (lowDmg, highDmg) = ((int)(lowDmgRaw * 1.5), (int)(highDmgRaw * 1.5));
				resultList.Add(new(i, WordType.Body, highDmg, lowDmg));
			}
			if (word.Contains(WordType.Science))
			{
				var (lowDmg, highDmg) = ((int)(lowDmgRaw * 1.5), (int)(highDmgRaw * 1.5));
				resultList.Add(new(i, WordType.Science, highDmg, lowDmg));
			}
			if (word.Contains(WordType.Person))
			{
				var (lowDmg, highDmg) = ((int)(lowDmgRaw * 1.5), (int)(highDmgRaw * 1.5));
				resultList.Add(new(i, WordType.Person, highDmg, lowDmg));
			}
			if (word.Contains(WordType.Insult))
			{
				var (lowDmg, highDmg) = ((int)(lowDmgRaw * 1.5), (int)(highDmgRaw * 1.5));
				resultList.Add(new(i, WordType.Insult, highDmg, lowDmg));
			}
			if (word.Contains(WordType.Religion))
			{
				var (lowDmg, highDmg) = ((int)(lowDmgRaw * 1.5), (int)(highDmgRaw * 1.5));
				resultList.Add(new(i, WordType.Religion, highDmg, lowDmg));
			}
			if (word.Name.Length == 6 && !word.IsHeal)
			{
				var (lowDmg, highDmg) = ((int)(lowDmgRaw * 1.5), (int)(highDmgRaw * 1.5));
				resultList.Add(new(i, WordType.Tale, highDmg, lowDmg));
			}
			if (word.Name.Length > 6 && !word.IsHeal)
			{
				var (lowDmg, highDmg) = (lowDmgRaw * 2, highDmgRaw * 2);
				resultList.Add(new(i, WordType.Tale, highDmg, lowDmg));
			}
		}
		resultList.Sort();
		noAbilityList.Sort();
		AbilityResults = resultList.Select(x => x.ToString()).ToList();
		PureResults = noAbilityList.Select(x => x.ToString()).ToList();
		StateHasChanged();
	}

	private async Task<Word> InferWordTypeOrDefaultAsync(string wordText)
	{

		if (string.IsNullOrWhiteSpace(wordText))
		{
			TypeIndicator = string.Empty;
			StateHasChanged();
			await Task.Delay(1);
			return default;
		}
		var keyChar = wordText[0];
		if (!Utils.KanaListSpread.Contains(keyChar.ToString()))
		{
			TypeIndicator = "無効な開始文字です。";
			StateHasChanged();
			await Task.Delay(1);
			return default;
		}
		if (wordText.At(^1) == 'ん')
		{
			TypeIndicator = "んで終わっています。";
			StateHasChanged();
			await Task.Delay(1);
			return default;
		}

		var resultWord = Words.GetSplitList(keyChar).Find(x => x.Name == wordText);

		var typeIndicatorResult = "タイプ：";
		var (type1, type2) = (resultWord.Type1, resultWord.Type2);
		typeIndicatorResult += (type1, type2) switch
		{
			(WordType.Empty, WordType.Empty) => "辞書にない、または無属性",
			(var type, WordType.Empty) => $"{type.TypeToString()}",
			(WordType.Empty, var type) => $"{type.TypeToString()}",
			(var typeA, var typeB) => $"{typeA.TypeToString()} / {typeB.TypeToString()}"
		};
		TypeIndicator = typeIndicatorResult;
		StateHasChanged();
		await Task.Delay(1);
		return new(wordText, type1, type2);
	}

}
