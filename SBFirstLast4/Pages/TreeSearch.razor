@page "/treesearch"
@using SBFirstLast4.Expressions
@using Interpreter = SBFirstLast4.Dynamic.Interpreter;
@using ScriptExecutor = SBFirstLast4.Dynamic.ScriptExecutor;
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
<PageTitle>グループ検索</PageTitle>

<div id="transparentScreen" style="display: @NodeMenu.DisplayAttr(ShowTransparentScreen)" @onclick="() =>
{
	OnHide();
	ShowTransparentScreen = false;
	ShowMenu.AlterDefault();
	StateHasChanged();
}" />

<div style="display: flex; flex-flow: column; justify-content: center; align-items: center;">
	@{
		static string OperatorToColor(NodeOperator op) => op switch
		{
			NodeOperator.And => "olivedrab",
			NodeOperator.Or => "violet",
			_ => "lightgray"
		};
	}
	@foreach (var (node, index) in Nodes.WithIndex())
	{
		@if (index > 0)
		{
			var op = node.Operator;
			node.Operator = op == NodeOperator.Head ? NodeOperator.And : op;
			if (node.Operator != op) StateHasChanged();
			var color = OperatorToColor(node.Operator);
			<div class="pipe" style="height: 30px; background-color: @color;" />
			const string AND = "&&";
			<select class="operator-selector" value="@OperatorExtension.String(node.Operator)" @onchange="e =>
				{
					var value = e.Value as string;
					node.Operator = value == AND ? NodeOperator.And : NodeOperator.Or;
					StateHasChanged();
				}">
				<option value="&&">&&</option>
				<option value="||">||</option>
			</select>
			<div class="pipe" style="height: 30px; background-color: @color;" />
		}
		else
		{
			var op = node.Operator;
			node.Operator = NodeOperator.Head;
			if (op != node.Operator)
				StateHasChanged();
			<div class="pipe" style="height: 30px;" />
		}
		<NodeDisplay Node="node" Nodes="Nodes" />
	}

	<div class="dropdown">
		<button @onclick="() => (ShowMenu.Node, ShowTransparentScreen) = (true, true)">＋<i class="fa fa-caret-down"></i></button>
	</div>

	<div style="display: block; margin-left: -50vw;">
		<NodeMenu ShowMenu=ShowMenu Nodes=Nodes />
	</div>
</div>

<style>
	body {
		background-color: #F5F6F1;
	}

	.source-pane {
		margin: 0px 20px 0px 20px;
		box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2);
		border-radius: 20px;
		background-color: white;
		font-weight: bold;
		justify-content: center;
		align-items: center;
		text-align: center;
		font-size: 20px;
	}

	.pipe {
		width: 10px;
		height: 120px;
		background-color: lightgray;
		z-index: 0;
	}

	.operator-selector {
		-moz-appearance: none;
		-webkit-appearance: none;
		width: 60px;
		height: 60px;
		z-index: 1;
		border-radius: 20px;
		border: 2px solid lightgray;
		align-items: center;
		justify-content: center;
		text-align: center;
		font-weight: bold;
		box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.1);
	}

		.operator-selector::-ms-expand {
			display: none;
		}

	.dropdown {
		position: relative;
		display: inline-block;
		margin-bottom: 50px;
		margin-top: 30px;
	}

	#transparentScreen {
		position: absolute;
		top: 0px;
		left: 0px;
		width: max(100%, 100vw);
		height: max(100%, 100vh);
		color: transparent;
		z-index: 2;
	}
</style>

@code {

	private ShowMenuUI ShowMenu = new();

	private IEnumerable<string?> NodeStrings => Nodes.Select(n => n.ToString());

	private string Result = string.Empty;

	private readonly List<Node> Nodes = new();

	internal static event Action OnHide = () => { };

	internal static bool ShowTransparentScreen = false;

	private static Action _stateHasChanged = () => { };

	protected override void OnInitialized()
	{
		if (!AppSettings.IsLoggedIn)
		{
			NavigationManager.NavigateTo("", false);
			return;
		}
		if (!Words.IsLoadedCorrectly)
			NavigationManager.NavigateTo("top", false);

		StateHasChanged();
	}

	protected override void OnAfterRender(bool firstRender)
	{
		if (firstRender)
			ShowTransparentScreen = false;

		_stateHasChanged = StateHasChanged;
	}

	internal static void RaiseStateHasChanged() => _stateHasChanged();

	private async Task Test_OnClick()
	{
		_ = new Node[]
		{
			new FirstNode(NodeOperator.Head, EqualityOperator.Equal, 'あ'),
			new GroupNode(NodeOperator.And, new Node[]
			{
				new LastNode(NodeOperator.Head, EqualityOperator.Equal, 'ぐ'),
				new LastNode(NodeOperator.Or, EqualityOperator.Equal, 'ぬ'),
			})
		};

		var query = $"@TW.Where({Nodes.Select(n => n.ToString()).StringJoin()})";

		await JSRuntime.Alert(query);

		try
		{
			var (success, translated, selector, errorMsg) = await Interpreter.TryInterpretAsync(query);

			if (!success)
				await JSRuntime.Alert(errorMsg);

			var result = ScriptExecutor.Execute(translated, selector);
			Result = result;
			StateHasChanged();
		}
		catch (Exception ex)
		{
			await JSRuntime.AlertEx(ex);
		}
	}
}