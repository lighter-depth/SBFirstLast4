@page "/simulator-body"
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@layout NoMenuLayout
@using SBFirstLast4.Simulator
@using SBFirstLast4.Logging

<html lang="ja">
<head>
	<meta charset="UTF-8">
	<meta name="viewport" content="width=device-width, maximum-scale=1.0, initial-scale=1">
	<link rel="stylesheet" href="css/simulator.css" />
	<link rel="stylesheet" href="https://indestructibletype-fonthosting.github.io/renner.css" type="text/css">
	<link rel="shortcut icon" type="image/vnd.microsoft.icon" href="../icons/favicon.ico">
	<link rel="icon" type="image/vnd.microsoft.icon" href="../icons/favicon.ico">
</head>
<body>
	<div id="bg"></div>
	<div id="main">
		@if (ShowAlter)
		{
			<div id="alter"></div>
		}
		<div id="modal-message">@ModalMessage</div>
		<div id="next"><a>つぎへ</a></div>
		<div id="game" style="background-color: forestgreen">
			<div id="foe-status">
				<span id="foe-name">@Battle.Player2.Name</span><span class="poison" id="foe-poison" style=@($"display: {(IsPoisoned.Player2 ? "inline" : "none")};")>どく</span>
				<div id="left-HP">
					<div id="left-HP-remain" style=@($"width: {HPWidth.Player2}%; background-color: {GetHPColor((double)HPNum.Player2 / Player.MaxHP) };")></div>
				</div>
				<div id="foeHPnum">
					@($"{HPNum.Player2}/{Player.MaxHP}")
				</div>
				<div class="tri"></div>
			</div>

			<div id="ally-status">
				<span id="ally-name">@Battle.Player1.Name</span><span class="poison" id="ally-poison" style=@($"display: {(IsPoisoned.Player1 ? "inline" : "none")};")>どく</span>
				<div id="right-HP">
					<div id="right-HP-remain" style=@($"width: {HPWidth.Player1}%; background-color: {GetHPColor((double)HPNum.Player1 / Player.MaxHP) };")></div>
				</div>
				<div id="allyHPnum">
					@($"{HPNum.Player1}/{Player.MaxHP}")
				</div>
				<div class="tri"></div>
			</div>
			<div id="foe-word" style=@($"opacity: {WordOpacities.Player2};"))>
				<WordDisplay WordName="@Player2Word.Name" Types="@Player2Word.Types"></WordDisplay>
				<!--<div class="first">
				<p>
				ゆ
				</p>
				</div>-->
			</div>
			<div class="field-shadow-wrapper">
				<div class="field-shadow" id="foe-shadow"></div>
			</div>

			@if (ShowAnimation.Player2.Up)
			{
				<svg id="foe-up" class="foe-change" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
					<defs>
						<filter id="filter">
							<feGaussianBlur stdDeviation="5"></feGaussianBlur>
						</filter>
						<mask id="mask">
							<ellipse cx="50%" cy="50%" rx="25%" ry="25%" fill="white" filter="url(#filter)"></ellipse>
						</mask>
					</defs>

					<image xlink:href="images/red.gif" width="100%" height="100%" mask="url(#mask)"></image>
				</svg>
			}
			@if (ShowAnimation.Player2.Down)
			{
				<svg id="foe-down" class="foe-change" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
					<defs>
						<filter id="filter2">
							<feGaussianBlur stdDeviation="5"></feGaussianBlur>
						</filter>
						<mask id="mask2">
							<ellipse cx="50%" cy="50%" rx="25%" ry="25%" fill="white" filter="url(#filter2)"></ellipse>
						</mask>
					</defs>

					<image xlink:href="images/blue.gif" width="100%" height="100%" mask="url(#mask2)"></image>
				</svg>
			}
			@if (ShowAnimation.Player2.Heal)
			{
				<svg id="foe-heal" class="foe-change" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
					<defs>
						<filter id="filter6">
							<feGaussianBlur stdDeviation="5"></feGaussianBlur>
						</filter>
						<mask id="mask6">
							<ellipse cx="50%" cy="50%" rx="25%" ry="25%" fill="white" filter="url(#filter6)"></ellipse>
						</mask>
					</defs>

					<image xlink:href="images/heal.gif" width="100%" height="100%" mask="url(#mask6)"></image>
				</svg>
			}
			@if (ShowAnimation.Player2.Barrier)
			{
				<svg id="foe-barrier" class="foe-change" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" style="margin-right: -5%; margin-top: 5%; animation-iteration-count: infinite;">
					<image xlink:href="images/barrier.gif" width="80%" height="80%"></image>
				</svg>
			}
			@if (ShowAnimation.Player2.Portal)
			{
				<svg id="foe-portal" class="foe-change" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" style="margin-right: -5%; margin-top: 5%; animation-iteration-count: infinite;">
					<image xlink:href="images/portal.gif" width="80%" height="80%"></image>
				</svg>
			}
			@if (ShowAnimation.Player2.Rewind)
			{
				<svg id="foe-rewind" class="foe-change" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" style="margin-right: -5%; margin-top: 5%; animation-iteration-count: infinite;">
					<image xlink:href="images/rewind.gif" width="80%" height="80%"></image>
				</svg>
			}

			<div id="ally-word" style=@($"opacity: {WordOpacities.Player1};")>
				<WordDisplay WordName="@Player1Word.Name" Types="@Player1Word.Types"></WordDisplay>
			</div>
			<div class="field-shadow-wrapper">
				<div class="field-shadow" id="ally-shadow"></div>
			</div>
			@if (ShowAnimation.Player1.Up)
			{
				<svg id="ally-up" class="ally-change" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
					<defs>
						<filter id="filter3">
							<feGaussianBlur stdDeviation="5"></feGaussianBlur>
						</filter>
						<mask id="mask3">
							<ellipse cx="50%" cy="50%" rx="25%" ry="25%" fill="white" filter="url(#filter3)"></ellipse>
						</mask>
					</defs>

					<image xlink:href="images/red.gif" width="100%" height="100%" mask="url(#mask3)"></image>
				</svg>
			}
			@if (ShowAnimation.Player1.Down)
			{
				<svg id="ally-down" class="ally-change" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
					<defs>
						<filter id="filter4">
							<feGaussianBlur stdDeviation="5"></feGaussianBlur>
						</filter>
						<mask id="mask4">
							<ellipse cx="50%" cy="50%" rx="25%" ry="25%" fill="white" filter="url(#filter4)"></ellipse>
						</mask>
					</defs>

					<image xlink:href="images/blue.gif" width="100%" height="100%" mask="url(#mask4)"></image>
				</svg>
			}
			@if (ShowAnimation.Player1.Heal)
			{
				<svg id="ally-heal" class="ally-change" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
					<defs>
						<filter id="filter5">
							<feGaussianBlur stdDeviation="5"></feGaussianBlur>
						</filter>
						<mask id="mask5">
							<ellipse cx="50%" cy="50%" rx="25%" ry="25%" fill="white" filter="url(#filter5)"></ellipse>
						</mask>
					</defs>

					<image xlink:href="images/heal.gif" width="100%" height="100%" mask="url(#mask5)"></image>
				</svg>
			}
			@if (ShowAnimation.Player1.Barrier)
			{
				<svg id="ally-barrier" class="ally-change" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" style="margin-left: 5%; margin-bottom: 5%;">
					<image xlink:href="images/barrier.gif" width="80%" height="80%"></image>
				</svg>
			}
			@if (ShowAnimation.Player1.Portal)
			{
				<svg id="ally-portal" class="ally-change" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" style="margin-left: 5%; margin-bottom: 5%;">
					<image xlink:href="images/portal.gif" width="80%" height="80%"></image>
				</svg>
			}
			@if (ShowAnimation.Player1.Rewind)
			{
				<svg id="ally-rewind" class="ally-change" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" style="margin-left: 5%; margin-bottom: 5%;">
					<image xlink:href="images/rewind.gif" width="80%" height="80%"></image>
				</svg>
			}

			<div id="timer"></div>
		</div>

		<div id="message" style=@(IsProcessing ? string.Empty : "display: none;")>
			<div id="message-text">@MessageText</div>
		</div>

		<div id="form">
			<div id="text" style=@(IsProcessing ? string.Empty : "display: block;")>
				<input type="text" id="input" autocomplete="off" placeholder=@($"「{Battle.NextChar}」からはじまることば") @onkeydown=Input_KeyDown @onkeyup=Input_KeyUp>
				<button type="submit" id="btn-submit" style=@($"opacity: {SubmitOpacity};") @onclick=Submit_Click></button>
			</div>
			<WordPreview WordName=@Preview.Name Types=@Preview.Types Effective=DamageType FirstChar=Battle.NextChar></WordPreview>
		</div>
		<div id="situation" class="sb-button" style="display: block;" @onclick=ShowSituationModal>
			<p>じょうきょう</p>
		</div>
		<div id="skill" class="sb-button" style="display: block;" @onclick=ShowSkillModal>
			<p>とくせい</p>
		</div>
		<div id="exit" class="sb-button" @onclick=ShowEscapeModal>
			<p>おわる</p>
		</div>

		<div id="wait-message">@WaitMessage</div>
		<div id="hint"></div>
		<div id="situation-modal" style=@($"display: {(ShowModal.Situation ? "block" : "none")}; opacity: {ModalOpacities.Situation};")>
			<div id="s-foe-info">
				<br />
				<h3 style="font-weight: bold;">後攻<span id="foe-rank"></span></h3>
				<p>こうげき<br><span id="foe-A">@($"{Battle.Player2.ATK: 0.0#}倍")</span></p>
				<p>ぼうぎょ<br><span id="foe-B">@($"{Battle.Player2.DEF: 0.0#}倍")</span></p>
				<!--<span>とくせい</span>
				<div id="foe-tokusei"></div>--->
			</div>
			<div id="s-ally-info">
				<br />
				<h3 style="font-weight: bold;">先攻<span id="ally-rank"></span></h3>
				<p>こうげき<br><span id="ally-A">@($"{Battle.Player1.ATK: 0.0#}倍")</span></p>
				<p>ぼうぎょ<br><span id="ally-B">@($"{Battle.Player1.DEF: 0.0#}倍")</span></p>
				<!--<span>とくせい</span>
				<div id="ally-tokusei"></div>--->
			</div>

			<div id="last-foe-word">@(Battle.OtherPlayer.CurrentWord.Name is string word && !string.IsNullOrEmpty(word) ? $"{word} の弱点" : string.Empty)</div>
			<div class="types"></div>
			<div class="will-damaged">
				@foreach (var type in WillDamaged())
				{
					<div class="type">
						<img class="icon" src="@type.TypeToImg()"><br>
						<span>@type.TypeToString()</span>
					</div>
				}
			</div>
			<div class="close-modal" @onclick=HideSituationModal>とじる</div>
		</div>
		<div id="skill-modal" style=@($"display: {(ShowModal.Skill ? "block" : "none")}; opacity: {ModalOpacities.Skill};")>
			<div id="ally-tokusei">
				<span>先攻</span>
				<div class="tokusei-name">@Battle.Player1.Ability.ToString()</div>
				<div class="tokusei-desc">@Battle.Player1.Ability.Description</div>
			</div>
			<div id="foe-tokusei">
				<span>後攻</span>
				<div class="tokusei-name">@Battle.Player2.Ability.ToString()</div>
				<div class="tokusei-desc">@Battle.Player2.Ability.Description</div>
			</div>
			<div id="middle">
				<select id="skill-selector" style="margin-left: 5px;" @onchange=OnSkillSelectorChange>
					<option value="@PlayerSelector.None">現在のプレイヤー</option>
					<option value="@PlayerSelector.Player1">先攻</option>
					<option value="@PlayerSelector.Player2">後攻</option>
				</select><br>
				<span class="tapto">タップしてとくせいを変える<span id="counter">(あと<span id="remain">@SkillRemain()</span>回)</span></span>
				<div id="skills">
					@foreach (var ability in AbilityManager.Abilities)
					{
						<div id=@ability.ToString() style=@(IsCurrentSkill(ability.ToString()) ? "border: 1px solid black;" : string.Empty) @onclick="() => OrderChangeAbility(ability.ToString())">
							<img class="skill-icon" src="images/@ability.ImgFile"><br>
							<span>@ability.ToString()</span>
						</div>
					}
				</div>
			</div>
			<div class="close-modal" @onclick=HideSkillModal>とじる</div>
		</div>
	</div>
	<style>
		html, body {
			font-family: 'Renner', mplus-1p-regular, sans-serif;
			box-sizing: border-box;
			height: 100%;
			margin: 0;
		}

			body:after { /*擬似要素をつくる*/
				position: fixed; /*固定配置*/
				top: 0;
				left: 0; /*左上に固定*/
				width: 100%;
				height: 100%; /*画面全体を覆う*/
				content: "";
				/*background: linear-gradient(#44EED7, #22B4F0);*/
				z-index: -2;
			}


		main {
			margin-left: -27px;
		}

		#bg {
			height: 100%;
			z-index: -2;
			position: fixed;
			background-repeat: no-repeat;
			background-size: cover;
		}

		#main {
			position: absolute;
			background-repeat: no-repeat;
			background-size: auto 100%;
			background-position: center;
			height: 100%;
			margin-left: -27px;			/*z-index: -1;*/
		}

		#alter {
			position: absolute;
			background-repeat: no-repeat;
			background-size: cover;
			background-image: url(images/alterscreen.gif);
			height: 100%;
			width: 100%;
			z-index: 2;
			margin-left: -27px;
		}


		#ally-word {
			position: absolute;
			top: 110px;
			left: 0px;
			width: 50%;
			text-align: center;
			height: 100px;
			z-index: 1;
		}

			#ally-word .word {
				font-size: 32px;
			}


		#foe-word {
			position: absolute;
			top: 20px;
			right: 10px;
			z-index: 1;
			width: 50%;
			height: 120px;
			text-align: center;
		}

			#foe-word .word {
				font-size: 32px;
			}

		.foe-change {
			position: absolute;
			top: -20px;
			right: 10px;
			width: 50%;
			height: 170px;
		}

		.ally-change {
			position: absolute;
			top: 80px;
			left: 0px;
			width: 50%;
			height: 170px;
		}

		.types1 {
			position: absolute;
			top: 0;
			left: 50%;
			margin-left: -32px;
		}

		.types2 {
			position: absolute;
			top: 0;
			left: 50%;
			margin-left: -64px;
		}

		.types-char {
			position: absolute;
			top: 10px;
			left: 50%;
			width: 65%;
			font-size: 52px;
			text-align: center;
			margin-left: -64px;
			font-family: mplus-1p-bold;
		}

		.row-word {
			width: 100%;
			position: relative;
			display: none;
			clear: both;
		}

		.first {
			position: absolute;
			top: 60px;
			width: 60px;
			height: 60px;
			margin-left: -30px;
			padding: 0;
			text-align: center;
			background-color: white;
			border-radius: 30px;
		}

			.first > p {
				color: #2A2A2A;
				font-family: mplus-1p-bold;
				font-size: 40px;
				margin-top: -3px;
			}

		.word {
			position: absolute;
			top: 70px;
			left: 50%;
			font-weight: bold;
			color: #2A2A2A;
			font-family: mplus-1p-bold;
			white-space: nowrap;
			letter-spacing: -2px;
			z-index: 1;
		}

		#text {
			width: 100%;
			display: none;
		}

		.hp-bar {
			width: 100%;
			height: 5px;
			background-color: #00DB0E;
		}

		#foe-info {
			position: absolute;
			left: 10px;
			width: 100%;
		}

		#s-foe-info {
			position: absolute;
			left: 10px;
			width: 40%;
		}

		#ally-info {
			margin-left: auto;
			margin-right: 10px;
			text-align: right;
			width: 80%;
		}

		#s-ally-info {
			margin-left: auto;
			margin-right: 10px;
			text-align: right;
			width: 40%;
		}

		#ally-tokusei {
			margin-top: 20px;
			margin-left: auto;
			margin-right: 10px;
			text-align: right;
			width: 40%;
		}

		#foe-tokusei {
			position: absolute;
			top: 20px;
			left: 10px;
			width: 40%;
		}

		.tokusei-name {
			background-color: #DCDADC;
			font-size: 16px;
		}

		.tokusei-desc {
			background-color: white;
			text-align: left;
		}

		#allyHP {
			float: right;
			display: block;
		}

		#allyHPnum {
			position: relative;
			clear: right;
			top: 4px;
		}

		#foeHPnum {
			position: relative;
			clear: right;
			top: 4px;
			left: 0px;
		}

		#infos {
			background-color: rgb(245, 246, 241);
			height: 110px;
			border-radius: 0 0 15px 15px;
			color: #2A2A2A;
			position: fixed;
			z-index: 1;
		}

			#infos p {
				margin: 0;
			}

			#infos h3 {
				margin: 0;
			}

		.icon {
			width: 64px;
			height: 64px;
			image-rendering: pixelated;
			image-rendering: -moz-crisp-edges;
			-ms-interpolation-mode: nearest-neighbor;
		}

		.message {
			text-align: center;
			background-color: /*#333333;*/ ghostwhite;
			width: fit-content;
			margin: 10px auto;
			border-radius: 4px;
			padding: 5px 8px;
			font-style: italic;
		}

		.message-text {
			font-size: 0.9em;
		}

		.type {
			text-align: center;
			line-height: 60%;
			width: 64px;
			top: 0px;
			float: left;
		}

			.type span {
				font-size: 10px;
				word-break: keep-all;
				padding-left: 5px;
				padding-right: 5px;
				border-radius: 10px;
				background-color: white;
			}

		#form {
			/*position: fixed;
																																																																	bottom: 0;*/
			z-index: 1;
			text-align: center;
		}

		#wait-message {
			background-color: white;
			width: fit-content;
			border-radius: 5px;
			font-style: italic;
			position: absolute;
			top: 280px;
		}

		#types {
			position: absolute;
			z-index: 1;
			opacity: 0;
			background: none;
			right: 0;
			top: -15px;
			width: 200px;
			pointer-events: none;
		}

			#types .latest {
				background: none;
			}

		#left-HP {
			width: 90%;
			background-color: #626362;
			height: 5px;
			position: absolute;
		}

		#left-HP-remain {
			width: 100%;
			height: 100%;
			position: absolute;
			left: 0;
			top: 0;
			background-color: #00DB0E;
		}

		#right-HP {
			width: 90%;
			background-color: #626362;
			height: 5px;
			position: absolute;
		}

		#right-HP-remain {
			width: 100%;
			height: 100%;
			position: absolute;
			left: 0;
			top: 0;
			background-color: #00DB0E;
		}

		#timeline {
			position: absolute;
			top: 220px;
		}

		#suggest {
			/*background-color: white;*/
		}

		#timer {
			display: none;
			font-family: 'arial black', 'arial', sans-serif;
			position: fixed;
			font-size: 20vh;
			top: 100px;
			opacity: 0.4;
			color: yellow;
			text-align: center;
		}

		#textinput {
			position: absolute;
			width: 83%;
			height: 30px;
			border-radius: 20px;
			font-size: 1.4em;
			/*border: 2px solid #646464;*/
			border: none;
			padding-top: 6px;
			padding-bottom: 4px;
			left: 5px;
			top: 0px;
			background-color: #E6ECF0;
			padding-left: 15px;
			font-family: mplus-1p-regular;
		}

			#textinput:focus {
				outline: none;
				border-radius: 20px;
				border: 1px solid blue;
			}

		#btn-submit {
			position: absolute;
			font-size: 1.3em;
			border: none;
			width: 42px;
			height: 42px;
			background-repeat: no-repeat;
			background-image: url("images/paper-plane.svg");
			transform: rotate(45deg);
			z-index: 1;
			top: 0px;
			right: -30px;
			background-color: white;
			border-radius: 19px 0 19px 19px;
			cursor: pointer;
		}

		#text button:focus {
			outline: none;
		}

		.A_up {
			background-color: indianred;
			color: white;
		}

		.B_up {
			background-color: indianred;
			color: white;
		}

		.noneffective {
			background-color: #d9d9d9;
			font-weight: bold;
		}

		.effective {
			background-color: #d92c2c;
			color: white;
			font-weight: bold;
		}

		.recoil {
			background-color: orange;
		}

		.heal {
			background-color: lightgoldenrodyellow;
		}

		.poisoned {
			color: white;
			background-color: #8f42d4;
		}

		.poison_damage {
			color: white;
			background-color: #8f42d4;
		}

		.seeded {
			background-color: #25582a;
			color: white;
		}

		.seed_damage {
			background-color: #25582a;
			color: white;
		}

		#suggest #label {
			margin-left: 5px;
			position: absolute;
			width: 50px;
			font-size: 0.5em;
			display: inline-block;
			text-align: center;
		}

		#effective-types {
			position: absolute;
			left: 60px;
			display: inline-block;
		}

		#next {
			display: none;
			background-color: transparent;
			position: absolute;
			right: 2px;
			width: 50%;
			top: 30%;
			text-align: center;
			z-index: 2;
		}

			#next a {
				text-decoration: none;
				font-size: 2.5em;
				border-radius: 10px;
				color: white;
				background-color: #12A4D4;
				padding: 5px;
				margin: 0;
				z-index: 2;
			}

		#ally_type {
			font-size: 5px;
			line-height: 60%;
			float: right;
		}

		#quit {
			position: absolute;
			top: 10px;
			left: 50%;
			width: 60px;
			margin-left: -30px;
			text-align: center;
			border: solid 1px #2A2A2A;
			border-radius: 10px;
			cursor: pointer;
		}

		#situation-modal {
			position: fixed;
			top: 20%;
			width: 90%;
			height: 80%;
			background-color: white;
			margin-left: 5%;
			padding-right: 20px;
			z-index: 2;
			border-radius: 20px;
		}




			#situation-modal .will-damaged {
				margin-left: 10px;
			}

		#skill-modal {
			position: fixed;
			top: 0;
			width: 100%;
			height: 100%;
			background-color: white;
			margin-left: 0;
			padding-right: 20px;
			z-index: 2;
			border-radius: 0px;
		}

			#skill-modal .tapto {
				margin-left: 10px;
				font-family: mplus-1p-bold;
			}

		#skills {
			height: 50%;
			overflow: scroll;
		}

		#middle {
			position: absolute;
			top: 30%;
		}

		.skill-icon {
			width: 52px;
			height: 52px;
			image-rendering: pixelated;
			image-rendering: -moz-crisp-edges;
			-ms-interpolation-mode: nearest-neighbor;
		}

		#skills div {
			text-align: center;
			line-height: 60%;
			width: 64px;
			top: 0px;
			float: left;
			padding: 2px;
			border: 1px solid white;
			box-sizing: border-box;
			background-color: #efe8e8;
			border-radius: 10px;
			z-index: 2;
			overflow: hidden;
		}

		#skills span {
			font-size: 10px;
			word-break: keep-all;
			padding-left: 5px;
			padding-right: 5px;
			border-radius: 10px;
			background-color: white;
			letter-spacing: -1px;
		}

		.close-modal {
			position: absolute;
			width: 100%;
			height: 60px;
			bottom: 0;
			background-color: #448ec6;
			color: white;
			text-align: center;
			line-height: 60px;
		}

		.large img {
			position: absolute;
			top: 25px;
			width: 100px;
			height: 100px;
		}

		.large span {
			font-size: 2.5em;
			font-family: mplus-1p-bold;
		}

		.small {
			width: 32px;
			height: 32px;
		}

		.pikapika {
			animation: pika2 0.1s infinite alternate;
		}

		#modal-message {
			background-color: cornflowerblue;
			color: white;
			position: absolute;
			width: 100%;
			z-index: 3;
		}

		#word-modal img {
			width: 32px;
			height: 32px;
		}

		#word-modal .type {
			width: 32px;
			top: 0px;
		}

		#type-modal img {
			width: 32px;
			height: 32px;
		}

		#type-modal .type {
			width: 32px;
			top: 0px;
		}

		.pre-message {
			position: absolute;
			letter-spacing: -2px;
			bottom: 10px;
			height: 10px;
			width: 120px;
			left: 50%;
			margin-left: -60px;
			text-align: center;
		}

		#preview {
			position: absolute;
			top: -50px;
			width: 200px;
			height: 90px;
			text-align: center;
		}

		#message {
			position: absolute;
			width: 100%;
			height: 50px;
			background-color: #333333;
			color: white;
			text-align: left;
			top: 230px;
			padding: 10px;
			font-size: 1.2em;
		}

		#input {
			position: absolute;
			width: 88%;
			height: 30px;
			border-radius: 20px;
			font-size: 1.4em;
			/*border: 2px solid #646464;*/
			border: none;
			padding-top: 6px;
			padding-bottom: 4px;
			left: 5px;
			top: 0px;
			background-color: #E6ECF0;
			padding-left: 15px;
			font-family: mplus-1p-regular;
		}

		#foe-status {
			position: absolute;
			top: 10px;
			left: 0;
			width: 40%;
			height: 60px;
			background-color: white;
			padding: 5px;
			border-radius: 5px 5px 0 5px;
		}

			#foe-status .tri {
				position: absolute;
				width: 0px;
				height: 0px;
				right: -9.5px;
				bottom: 0px;
				border-style: solid;
				border-width: 10px 0 0 10px;
				border-color: transparent transparent transparent white;
			}

		#ally-status {
			position: absolute;
			top: 150px;
			right: 0;
			width: 40%;
			height: 60px;
			background-color: white;
			text-align: left;
			padding: 5px;
			border-radius: 5px 5px 5px 0;
		}

			#ally-status .tri {
				position: absolute;
				width: 0px;
				height: 0px;
				left: -9.5px;
				bottom: 0px;
				border-style: solid;
				border-width: 0 0 10px 10px;
				border-color: transparent transparent white transparent;
			}

		.field-shadow-wrapper {
			position: relative;
			overflow-x: clip;
		}

		.field-shadow {
			position: absolute;
			background-color: white;
			border-radius: 50%;
		}

		#foe-shadow {
			top: 100px;
			width: 40%;
			right: 25px;
			height: 40px;
		}

		#ally-shadow {
			width: 70%;
			height: 120px;
			top: 190px;
			left: -50px;
		}

		#game {
			position: absolute;
			width: 100%;
			height: 230px;
			background-size: cover;
		}

		#foe_type {
			display: block;
			float: left;
			margin-top: -10px;
		}

		#ally_type {
			display: block;
			margin-top: -10px;
		}

		#situation {
			display: none;
			top: 300px;
			width: 43%;
			height: 150px;
			background-color: #9A5252;
			border: 5px solid #C44041;
			margin-right: 20px;
			margin-left: 10px;
			line-height: 150px;
		}

		.sb-button {
			position: absolute;
			cursor: pointer;
			margin: 10px;
			border-radius: 10px;
		}

			.sb-button > p {
				font-size: 18px;
				color: white;
				text-align: center;
				font-family: mplus-1p-bold;
				margin-top: -5px;
			}

		#situation img {
			width: 70%;
		}

		#bgm-selection {
			position: absolute;
			top: 300px;
			width: 50%;
			height: 150px;
			text-align: center;
			cursor: pointer;
		}

		#skill {
			display: none;
			top: 300px;
			right: 0;
			width: 43%;
			height: 150px;
			background-color: #416F27;
			border: 5px solid #54A836;
			margin-right: 10px;
			margin-left: 20px;
			line-height: 150px;
		}

		#exit {
			top: 470px;
			margin-left: 25%;
			width: 50%;
			height: 70px;
			background-color: #28536F;
			line-height: 70px;
			border: 5px solid #A8F0FF;
		}

			#exit img {
				width: 70%;
			}

		.poison {
			background-color: #8f42d4;
			color: white;
			border-radius: 10px;
			padding: 0 10px;
			float: right;
			line-height: 100%;
		}

		#last-foe-word {
			margin: 10px;
		}

	</style>
</body>
</html>
@code {
	internal static Ability Player1Ability { get; set; } = Ability.Default;
	internal static Ability Player2Ability { get; set; } = Ability.Default;

	private Battle Battle = Battle.Empty;
	private bool IsProcessing;
	private bool IsDead;


	private List<AnnotatedString> BattleLogItems = new();

	private TaskCompletionSource<Order> OrderCompletion = new();

	private string MessageText = string.Empty;
	private string WaitMessage = string.Empty;
	private string ModalMessage = string.Empty;

	private (int Player1, int Player2) HPNum = (Player.MaxHP, Player.MaxHP);
	private (double Player1, double Player2) HPWidth = (100, 100);

	private (double Player1, double Player2) WordOpacities = (0, 0);
	private double SubmitOpacity = 1;

	private (bool Player1, bool Player2) IsPoisoned = (false, false);
	private (bool Situation, bool Skill) ShowModal = (false, false);
	private (double Situation, double Skill) ModalOpacities = (0, 0);

	private bool ShowAlter;

	private ShowPlayerAnimation ShowAnimation = ShowPlayerAnimation.Default;


	private Word Player1Word = Word.Default;
	private Word Player2Word = Word.Default;

	private Word Preview = Word.Default;
	private WordPreview.DamageType DamageType = default;
	private CancellationTokenSource PreviewCancellation = new();

	private PlayerSelector SkillSelector = PlayerSelector.None;

	private static readonly Dictionary<Notice, string> SoundDic = new()
		{
			[Notice.Buf] = "up",
			[Notice.Debuf] = "down",
			[Notice.Barrier] = "barrier",
			[Notice.Portal] = "portal",
			[Notice.Rewind] = "rewind",
			[Notice.RevInfo] = "pera",
			[Notice.EffectiveProp] = "effective",
			[Notice.MidDmgProp] = "middmg",
			[Notice.NonEffectiveProp] = "noneffective",
			[Notice.Heal] = "heal",
			[Notice.Poison] = "poison",
			[Notice.PoisonDmg] = "poison",
			[Notice.PoisonHeal] = "poison_heal",
			[Notice.Seed] = "seeded",
			[Notice.SeedDmg] = "seed_damage",
			[Notice.InvokeBufInfo] = "up"
		};

	protected override async Task OnInitializedAsync()
	{
		if (!AppSettings.IsLoggedIn)
		{
			NavigationManager.NavigateTo("", false);
			return;
		}
		if (!SBDictionary.IsLoadedCorrectly)
			NavigationManager.NavigateTo("top", false);

		Battle = new
		(
			new(Player1Ability)
				{
					Proceeding = Proceeds.True,
					Name = "先攻"
				},
			new(Player2Ability)
				{
					Proceeding = Proceeds.False,
					Name = "後攻"
				}
		)
			{
				In = In,
				Out = Out,
				OnReset = cts => cts.Cancel()
			};

		StateHasChanged();
		await Battle.Run();
	}

	private Task<Order> In()
	{
		OrderCompletion = new();
		return OrderCompletion.Task;
	}

	private async Task Out(List<AnnotatedString> list)
	{
		try
		{
			BattleLogItems.AddRange(list);

			if (Battle.CurrentOrderType == OrderType.Action)
				await OutActionOrder(list);

			if (Battle.CurrentOrderType == OrderType.Change)
				await OutChangeOrder(list);

			StateHasChanged();
		}
		catch (Exception ex)
		{
			await JSRuntime.AlertEx(ex);
		}
	}

	private async Task Input_KeyUp()
	{
		try
		{
			PreviewCancellation.Cancel();
			PreviewCancellation = new();
			await Task.Delay(1);
			var wordText = await JSRuntime.InvokeAsync<string>("eval", "document.getElementById('input').value");

			if (string.IsNullOrWhiteSpace(wordText))
			{
				Preview = Word.Default;
				SetSubmitOpacity();
				StateHasChanged();
				return;
			}

			var word = Word.FromString(wordText);
			if (!word.IsEmpty)
			{
				var effective = word.CalcEffectiveDmg(Battle.OtherPlayer.CurrentWord);
				DamageType = effective switch
				{
					>= 2 => WordPreview.DamageType.Effective,
					< 2 and > 0.5 => WordPreview.DamageType.MidDamage,
					<= 0.5 and > 0 => WordPreview.DamageType.NonEffective,
					<= 0 when word.IsHeal => WordPreview.DamageType.Heal,
					_ => WordPreview.DamageType.NoDamage
				};
				Preview = word;
				SetSubmitOpacity();
				StateHasChanged();
				return;
			}
			if (AppSettings.UseExists)
			{
				DamageType = WordPreview.DamageType.MidDamage;
				var exists = await Server.ExistsAsync(wordText, PreviewCancellation.Token);
				Preview = exists ? (Word)wordText : Word.Default;
				SetSubmitOpacity();
				StateHasChanged();
				return;
			}
			Preview = Word.Default;
			SetSubmitOpacity();
			StateHasChanged();
		}
		catch (Exception ex)
		{
			await JSRuntime.AlertEx(ex);
		}
	}

	private async Task Input_KeyDown(KeyboardEventArgs e)
	{
		try
		{
			if (e.Key is "Process" or not "Enter")
				return;

			var order = await JSRuntime.InvokeAsync<string>("eval", "document.getElementById('input').value");
			await JSRuntime.InvokeVoidAsync("eval", "document.getElementById('input').value = ''");
			Preview = Word.Default;
			OrderCompletion.TrySetResult(Order.Parse(order.Trim().Split(), Battle));
		}
		catch (Exception ex)
		{
			await JSRuntime.AlertEx(ex);
		}
	}

	private async void Submit_Click() => await Input_KeyDown(new() { Key = "Enter" });

	private async Task OutActionOrder(List<AnnotatedString> list)
	{
		try
		{
			MessageText = string.Empty;
			if (IsDead) return;

			IsDead = list.Select(x => x.Notice).Contains(Notice.DeathInfo);

			foreach (var i in list)
				if (i.Notice == Notice.Warn)
				{
					WaitMessage = i.Text;
					StateHasChanged();
					return;
				}
			IsProcessing = true;
			var msgList = GetMessages(list);


			if (Battle.WasPlayer1sTurn)
				await ShowWordAsync(Battle.Player1.CurrentWord);

			else
				await ShowWordAsync(Battle.Player2.CurrentWord);

			await Task.Delay(400);
			await ShowMessageAsync(msgList);

			if (!IsDead)
			{
				IsProcessing = false;
				StateHasChanged();
			}
		}
		catch (Exception ex)
		{
			await JSRuntime.AlertEx(ex);
		}
	}

	private async Task OutChangeOrder(List<AnnotatedString> list)
	{
		foreach (var i in list)
			if (i.Notice is Notice.Warn or Notice.Caution)
			{
				ShowModalMessage(i.Text);
				return;
			}
		ShowModalMessage("とくせいを変更した！");
		await SBAudioManager.PlayAudio("concent");
	}

	private static List<AnnotatedString> GetMessages(List<AnnotatedString> list)
	{
		var filter = new List<Notice>()
		{
		Notice.HPUpdated, Notice.NoDmgProp, Notice.NonEffectiveProp, Notice.MidDmgProp, Notice.EffectiveProp, Notice.CritInfo,
		Notice.PoisonHeal,Notice.Heal, Notice.Buf, Notice.Debuf, Notice.Barrier, Notice.Portal,Notice.Rewind, Notice.Alter, Notice.RevInfo,Notice.Poison, Notice.PoisonDmg, Notice.Seed,
		Notice.SeedDmg, Notice.InvokeBufInfo, Notice.Caution, Notice.DeathInfo
		};
		return list.Where(x => filter.Contains(x.Notice)).ToList();
	}

	private async Task ShowWordAsync(Word word)
	{
		if (Battle.TurnNum > 3 || IsDead)
			await FadeOutWord(Battle.WasPlayer1sTurn);

		if (Battle.WasPlayer1sTurn)
			Player1Word = Battle.Player1.CurrentWord;
		else
			Player2Word = Battle.Player2.CurrentWord;
		StateHasChanged();
		await Task.Delay(20);

		await SBAudioManager.PlayAudio(word.Type1.TypeToAudio());
		await FadeInWord(Battle.WasPlayer1sTurn);
		StateHasChanged();
	}


	private async Task ShowMessageAsync(List<AnnotatedString> msgs)
	{
		var tasks = new List<Task>();
		foreach (var msg in msgs)
		{
			if (!msg.IsInvisible) MessageText = msg.Text;
			if (SoundDic.TryGetValue(msg.Notice, out var soundName)) SBAudioManager.PlayAudioForget(soundName);

			if (msg.Notice == Notice.Alter)
			{
				await SBAudioManager.PlayAudio("glitch");
				ShowAlter = true;
				StateHasChanged();
				Battle.AlterTo(msg.Data);
				HPNum = (Battle.Player1.HP, Battle.Player2.HP);
				HPWidth = ((double)Battle.Player1.HP / Player.MaxHP * 100, (double)Battle.Player2.HP / Player.MaxHP * 100);
				Player1Word = Battle.Player1.CurrentWord;
				Player2Word = Battle.Player2.CurrentWord;
				await Task.Delay(200);
				ShowAlter = false;
				await SBAudioManager.SeizeAudio("glitch");
			}

			if (msg.Notice == Notice.HPUpdated)
			{
				var task = UpdateAllHPBarsAsync(msg.Params[0], Player.MaxHP, msg.Params[1], Player.MaxHP);
				tasks.Add(task);
				continue;
			}
			if (msg.Notice == Notice.Heal)
			{
				var selector = Battle.WasPlayer1sTurn ? PlayerSelector.Player1 : PlayerSelector.Player2;
				tasks.Add(ShowEffectAsync(selector, "heal"));
			}
			await Task.WhenAll(tasks);
			if (msg.Notice == Notice.Buf)
			{
				var selector = Battle.WasPlayer1sTurn ? PlayerSelector.Player1 : PlayerSelector.Player2;
				await ShowEffectAsync(selector, "up");
			}
			if (msg.Notice == Notice.Debuf)
			{
				var selector = Battle.WasPlayer1sTurn ? PlayerSelector.Player1 : PlayerSelector.Player2;
				await ShowEffectAsync(selector, "down");
			}
			if (msg.Notice == Notice.Portal)
			{
				var selector = Battle.WasPlayer1sTurn ? PlayerSelector.Player1 : PlayerSelector.Player2;
				await ShowEffectAsync(selector, "portal");
			}
			if (msg.Notice == Notice.Rewind)
			{
				var selector = Battle.WasPlayer1sTurn ? PlayerSelector.Player1 : PlayerSelector.Player2;
				await ShowEffectAsync(selector, "rewind");
			}
			if (msg.Notice == Notice.Barrier)
			{
				var selector = Battle.WasPlayer1sTurn ? PlayerSelector.Player2 : PlayerSelector.Player1;
				await ShowEffectAsync(selector, "barrier");
			}
			if (msg.Notice == Notice.InvokeBufInfo)
			{
				var selector = Battle.WasPlayer1sTurn ? PlayerSelector.Player2 : PlayerSelector.Player1;
				await ShowEffectAsync(selector, "up");
			}
			if (msg.Notice == Notice.Poison)
			{
				if (Battle.WasPlayer1sTurn)
					if (msg.Params[0] == 0)
						IsPoisoned.Player2 = true;
					else
						IsPoisoned.Player1 = true;

				else if (msg.Params[0] == 0)
					IsPoisoned.Player1 = true;

				else
					IsPoisoned.Player2 = true;
			}
			if (msg.Notice == Notice.PoisonHeal)
			{
				if (Battle.WasPlayer1sTurn)
					if (msg.Params[0] == 0)
						IsPoisoned.Player1 = false;
					else
						IsPoisoned.Player2 = false;

				else if (msg.Params[0] == 0)
					IsPoisoned.Player2 = false;
				else
					IsPoisoned.Player1 = false;
			}
			if (msg.Notice == Notice.DeathInfo)
			{
				await Task.Delay(500);
				await SBAudioManager.PlayAudio("end");
				await SBAudioManager.SeizeAudio(AppSettings.BattleBgm);
			}
			StateHasChanged();
			if (msg.Notice != Notice.Alter)
				await Task.Delay(800);
		}
		await Task.WhenAll(tasks);
		StateHasChanged();
	}
	private async Task ShowEffectAsync(PlayerSelector selector, string uiSelector)
	{
		var player = selector == PlayerSelector.Player1 ? ShowAnimation.Player1 : ShowAnimation.Player2;
		switch (uiSelector)
		{
			case "up":
				player.Up = true;
				break;
			case "down":
				player.Down = true;
				break;
			case "heal":
				player.Heal = true;
				break;
			case "barrier":
				player.Barrier = true;
				break;
			case "portal":
				player.Portal = true;
				break;
			case "rewind":
				player.Rewind = true;
				break;
			default:
				break;
		}
		StateHasChanged();
		await Task.Delay(uiSelector == "rewind" ? 600 : 700);
		switch (uiSelector)
		{
			case "up":
				player.Up = false;
				break;
			case "down":
				player.Down = false;
				break;
			case "heal":
				player.Heal = false;
				break;
			case "barrier":
				player.Barrier = false;
				break;
			case "portal":
				player.Portal = false;
				break;
			case "rewind":
				player.Rewind = false;
				break;
			default:
				break;
		}
		StateHasChanged();
	}

	private async Task UpdateAllHPBarsAsync(int allyHP, int allyHPMax, int foeHP, int foeHPMax)
	{
		if (allyHP != HPNum.Player1)
		{
			HPNum.Player1 = allyHP;
			await UpdateHPBarAsync(allyHP, allyHPMax, PlayerSelector.Player1);
		}
		if (foeHP != HPNum.Player2)
		{
			HPNum.Player2 = foeHP;
			await UpdateHPBarAsync(foeHP, foeHPMax, PlayerSelector.Player2);
		}
	}

	private readonly SemaphoreSlim Player1HPLock = new SemaphoreSlim(1, 1);
	private readonly SemaphoreSlim Player2HPLock = new SemaphoreSlim(1, 1);

	private async Task UpdateHPBarAsync(int hp, int hpMax, PlayerSelector selector)
	{
		const int duration = 400;
		const int interval = 10;
		if (selector == PlayerSelector.Player1)
		{
			await Player1HPLock.WaitAsync();
			try
			{
				var start = HPWidth.Player1;
				var end = (double)hp / hpMax * 100;
				var change = end - start;
				var time = 0;
				var width = start;

				while (time <= duration)
				{
					width = SwingEasing(time, start, change, duration);

					HPWidth.Player1 = width;

					time += interval;
					StateHasChanged();
					await Task.Delay(interval);
				}
				HPWidth.Player1 = end;
			}
			finally
			{
				Player1HPLock.Release();
			}
		}
		else if (selector == PlayerSelector.Player2)
		{
			await Player2HPLock.WaitAsync();
			try
			{
				var start = HPWidth.Player2;
				var end = (double)hp / hpMax * 100;
				var change = end - start;
				var time = 0;
				var width = start;

				while (time <= duration)
				{
					width = SwingEasing(time, start, change, duration);

					HPWidth.Player2 = width;

					time += interval;
					StateHasChanged();
					await Task.Delay(interval);
				}
				HPWidth.Player2 = end;
			}
			finally
			{
				Player2HPLock.Release();
			}
		}
	}

	private static double SwingEasing(double time, double start, double change, double duration) => start + change * ((-Math.Cos(time / duration * Math.PI) / 2) + 0.5);

	private static string GetHPColor(double ratioHP) => ratioHP switch
	{
		> 0.5 => "#00DB0E",
		> 0.2 => "#E1B740",
		_ => "#B84731"
	};

	private double SetSubmitOpacity()
	{
		if (Preview.IsDefault)
			return 0.3;


		if (Preview.Start != Battle.NextChar || Preview.End == 'ん')
			return 0.3;

		return 1;
	}

	private async void ShowModalMessage(string message)
	{
		ModalMessage = message;
		StateHasChanged();
		await Task.Delay(1000);
		ModalMessage = string.Empty;
		StateHasChanged();
	}

	private async void ShowSituationModal()
	{
		await SBAudioManager.PlayAudio("pera");
		ShowModal.Situation = true;
		for (var i = 0.0; i < 1; i += 0.04)
		{
			ModalOpacities.Situation = i;
			StateHasChanged();
			await Task.Delay(1);
		}
		StateHasChanged();
	}

	private async void HideSituationModal()
	{
		await SBAudioManager.PlayAudio("pera");
		for (var i = 0.0; i < 1; i += 0.04)
		{
			ModalOpacities.Situation = 1 - i;
			StateHasChanged();
			await Task.Delay(1);
		}
		StateHasChanged();
		ShowModal.Situation = false;
		StateHasChanged();
	}

	private IEnumerable<WordType> WillDamaged()
	{
		var word = Battle.OtherPlayer.CurrentWord;
		foreach (var type in Enum.GetValues<WordType>())
			if (Word.FromType(type).CalcEffectiveDmg(word) >= 2)
				yield return type;
	}

	private async void ShowSkillModal()
	{
		await SBAudioManager.PlayAudio("pera");
		ShowModal.Skill = true;
		for (var i = 0.0; i < 1; i += 0.04)
		{
			ModalOpacities.Skill = i;
			StateHasChanged();
			await Task.Delay(1);
		}
		StateHasChanged();
	}

	private async void HideSkillModal()
	{
		await SBAudioManager.PlayAudio("pera");
		for (var i = 0.0; i < 1; i += 0.04)
		{
			ModalOpacities.Skill = 1 - i;
			StateHasChanged();
			await Task.Delay(1);
		}
		StateHasChanged();
		ShowModal.Skill = false;
		StateHasChanged();
	}

	private async Task ShowEscapeModal()
	{
		if (!await JSRuntime.Confirm("シミュレーションを終了しますか？"))
			return;

		await SBAudioManager.CancelAudio();
		NavigationManager.NavigateTo("simulator");
	}

	private bool IsCurrentSkill(string abilityName) => SkillSelector switch
	{
		PlayerSelector.Player1 => abilityName == Battle.Player1.Ability.ToString(),
		PlayerSelector.Player2 => abilityName == Battle.Player2.Ability.ToString(),
		_ => abilityName == Battle.CurrentPlayer.Ability.ToString()
	};

	private async void OnSkillSelectorChange()
	{
		var value = await JSRuntime.GetElementValueById<string>("skill-selector");
		var selector = Enum.TryParse<PlayerSelector>(value, true, out var result) ? result : default;

		if (selector == SkillSelector)
			return;

		SkillSelector = selector;
		await SBAudioManager.PlayAudio("concent");
		StateHasChanged();
	}

	private void OrderChangeAbility(string abilityName)
	{
		var selector = SkillSelector != default ? SkillSelector : Battle.IsPlayer1sTurn ? PlayerSelector.Player1 : PlayerSelector.Player2;
		OrderCompletion.TrySetResult(new(OrderType.Change, abilityName, selector));
	}

	private int SkillRemain() => SkillSelector switch
	{
		PlayerSelector.Player1 => Battle.Player1.SkillChangeRemain,
		PlayerSelector.Player2 => Battle.Player2.SkillChangeRemain,
		_ => Battle.CurrentPlayer.SkillChangeRemain
	};

	private async Task FadeOutWord(bool isPlayer1sTurn)
	{
		for (var i = 0.0; i < 1; i += 0.04)
		{
			if (isPlayer1sTurn)
				WordOpacities.Player1 = 1 - i;
			else
				WordOpacities.Player2 = 1 - i;
			StateHasChanged();
			await Task.Delay(2);
		}
	}
	private async Task FadeInWord(bool isPlayer1sTurn)
	{
		for (var i = 0.0; i < 1; i += 0.04)
		{
			if (isPlayer1sTurn)
				WordOpacities.Player1 = i;
			else
				WordOpacities.Player2 = i;
			StateHasChanged();
			await Task.Delay(2);
		}
	}

	private record ShowAnimationInternal(bool Up, bool Down, bool Heal, bool Barrier, bool Portal, bool Rewind)
	{
		internal bool Up { get; set; } = Up;
		internal bool Down { get; set; } = Down;
		internal bool Heal { get; set; } = Heal;
		internal bool Barrier { get; set; } = Barrier;
		internal bool Portal { get; set; } = Portal;
		internal bool Rewind { get; set; } = Rewind;
	}
	private record ShowPlayerAnimation(ShowAnimationInternal Player1, ShowAnimationInternal Player2)
	{
		internal ShowAnimationInternal Player1 { get; set; } = Player1;
		internal ShowAnimationInternal Player2 { get; set; } = Player2;
		internal static ShowPlayerAnimation Default => new(new(false, false, false, false, false, false), new(false, false, false, false, false, false));
	}
}

