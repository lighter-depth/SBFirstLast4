@page "/rev-simulator-result"
@layout NoMenuLayout
@using SBFirstLast4.Specialized.RevSimulator
@using StatusInfo = (double ATK, double DEF, double Random)
@inject NavigationManager NavigationManager

<PageTitle>激闘の記録</PageTitle>

<link rel="stylesheet" href="css/fonts.css" />
<style>

	.page {
		display: block;
	}

	#inner-wrapper {
		text-align: center;
		font-size: 1.5em;
		font-family: 'Renner', mplus-1p-regular, sans-serif;
		margin: 0;
		padding: 0;
		overflow: unset !important;
		overflow-x: hidden;
		max-height: unset;
		height: unset;
	}

	.top {
		font-size: 24px;
		font-family: mplus-1p-bold;
		letter-spacing: -3px;
		color: black;
		text-decoration: none;
		display: block;
		padding-bottom: 20px;
		padding-top: 20px;
		margin-left: 10px;
		text-align: left;
	}

		.top:hover {
			color: black;
		}

	#title {
		font-size: 32px;
		font-family: mplus-1c-black;
		font-weight: bold;
		letter-spacing: -2px;
		color: black;
		text-decoration: none;
		display: block;
		margin-bottom: 2px;
		margin-top: 20px;
		text-align: center;
	}

	.subtitle {
		margin-top: 0px;
		margin-bottom: 20px;
		font-size: 16px;
		letter-spacing: -1px;
	}

	.word {
		display: block;
		position: relative;
		color: #2A2A2A;
		font-family: mplus-1p-bold;
		white-space: nowrap;
		letter-spacing: -2px;
		height: 40px;
		font-size: 30px;
	}

		.word span {
			position: relative;
			z-index: 2;
			display: block;
		}

	.types {
		bottom: -10px;
		display: block;
		position: absolute;
		margin-bottom: -25px;
	}

	.ally {
		right: 0;
	}

	.foe {
		left: 0;
	}

	.outline {
		text-shadow: 2px 2px 1px #ffffff, -2px 2px 1px #ffffff, 2px -2px 1px #ffffff, -2px -2px 1px #ffffff, 2px 0px 1px #ffffff, 0px 2px 1px #ffffff, -2px 0px 1px #ffffff, 0px -2px 1px #ffffff; /* 文字の影 */
	}

	.icon {
		/*position: absolute;*/
		position: relative;
		width: 120px;
		height: 120px;
		opacity: 0.75;
		z-index: 1;
		clip-path: polygon(0 0,0 50%,100% 50%,100% 0);
		image-rendering: pixelated;
		image-rendering: -moz-crisp-edges;
		-ms-interpolation-mode: nearest-neighbor;
	}

	.foe .icon {
		transform: scale(-1, 1);
	}

	.ally .icon {
		/*right: 0;*/
	}

	.row {
		display: block;
		height: 60px;
		padding-left: 10px;
		padding-right: 10px;
	}

	.row-foe {
		text-align: left;
	}

	.row-ally {
		text-align: right;
	}

	.is_my_turn {
		position: absolute;
		font-size: 14px;
	}

	.types-text {
		font-family: mplus-1p-regular;
		font-size: 10px;
		margin: 0;
		line-height: 10px;
		letter-spacing: 0px;
	}

	.info {
		position: absolute;
		width: 40%;
		height: 80px;
		font-family: mplus-1p-bold;
	}

	#ally-info {
		right: 0;
		text-align: left;
		margin-right: 10px;
	}

	#foe-info {
		left: 0;
		text-align: right;
		margin-left: 10px;
	}

	#history {
		position: relative;
		width: 100%;
		top: 250px;
	}

	#VS {
		position: absolute;
		width: 100%;
		margin: 0;
		font-weight: bold;
		margin-left: -1.5rem;
	}

	.info a {
		display: block;
		font-weight: normal;
		font-family: mplus-1p-regular;
		font-size: 14px;
	}

	.small {
		margin-top: 0px;
		font-family: mplus-1p-regular;
		font-size: 10px;
		text-align: left;
		border: 1px solid;
		padding: 2px;
	}

	.row-damage {
		position: relative;
		width: 100%;
		height: 60px;
		text-align: center;
	}

		.row-damage img {
			position: absolute;
			width: 120px;
			height: 120px;
			margin-left: -60px;
			top: -30px;
		}

		.row-damage a {
			position: absolute;
			font-size: 20px;
			font-family: mplus-1p-bold;
			width: 200px;
			margin-left: -100px;
			bottom: 16px;
			z-index: 1;
			opacity: 0.75;
		}

	.ally-arrow {
		top: -10px;
	}

	.foe-arrow {
		top: -10px;
		transform: scale(-1, 1);
	}

	.event-message {
		font-size: 16px;
		font-family: mplus-1p-regular;
		text-align: right;
		padding-right: 8px;
	}

	.foe-event {
		text-align: left;
		padding-left: 8px;
	}

	.last {
		font-style: italic;
		font-family: mplus-1p-regular;
		background: #2A2A2A;
		color: white;
	}

	.flex {
		display: flex;
		flex-flow: row;
	}

	.row-hp {
		align-content: center;
		margin-top: 5px;
		margin-bottom: 70px;
		border-radius: 20px;
	}


	.hp-grid{
		display: grid;
		grid-template-rows: auto;
		grid-template-columns: 18px 7px auto 20px auto 7px 18px;
		margin-left: 8px;
		margin-right: 8px;
		position: relative;
	}

	.hp-bar{
		height: 18px;
		line-height: 17px;
		color: white;
		font-size: 17px;
		font-weight: bold;
		border-radius: 15px;
		z-index: 2;
		grid-row: 1;
	}
</style>

<div id="inner-wrapper">
	<div id="main">
		<a class="top" @onclick=BackBtn_OnClick>← もどる</a>
		<div id="title">革命シミュレーター</div>
		<div class="subtitle">激闘の記録</div>
		<div class="subtitle" style="margin-top: -20px; font-size: 15px;">長さ: @History.Count　　勝者: @Winner</div>
		<div id="ally-info" class="info">
			<div class="name">じぶん</div>
			<a>後攻</a>
			<a>攻撃: @Format(Settings.Ally.ATK) 倍</a>
			<a>防御: @Format(Settings.Ally.DEF) 倍</a>
			<a>乱数: @($"{Settings.Ally.Random:0.00}")</a>
			<a>かくめい</a>
			<p class="small">遊びタイプの言葉を使うたびに自分と相手の能力変化をひっくり返す</p>
		</div>
		<div id="VS">VS</div>
		<div id="foe-info" class="info">
			<div class="name">あいて</div>
			<a>先攻</a>
			<a>攻撃: @Format(Settings.Foe.ATK) 倍</a>
			<a>防御: @Format(Settings.Foe.DEF) 倍</a>
			<a>乱数: @($"{Settings.Foe.Random:0.00}")</a>
			<a>かくめい</a>
			<p class="small">遊びタイプの言葉を使うたびに自分と相手の能力変化をひっくり返す</p>
		</div>
		<div id="history">
			@{
				var isAllyTurn = false;
			}
			@foreach (var i in History)
			{
				if (isAllyTurn)
				{
					<div class="row-ally row">
						<div class="word outline">
							<div class="types ally">
								<div class="flex">
									@if (i.Word.IsSingleType)
									{
										<img class="icon" src="@i.Word.Type1.TypeToImg()">
									}
									else
									{
										<img class="icon" style="left: 30px;" src="@i.Word.Type1.TypeToImg()">
										<img class="icon" src="@i.Word.Type2.TypeToImg()">
									}
								</div>
							</div>
							<span>@i.Word.Name</span>
							<span class="types-text">@GetWordTypeText(i.Word)</span>
						</div>
						<br>
					</div>
				}
				else
				{
					<div class="row-foe row">
						<div class="word outline">
							<div class="types foe">
								<div class="flex">
									@if (i.Word.IsSingleType)
									{
										<img class="icon" src="@i.Word.Type1.TypeToImg()">
									}
									else
									{
										<img class="icon" src="@i.Word.Type1.TypeToImg()">
										<img class="icon" style="left: -30px;" src="@i.Word.Type2.TypeToImg()">
									}
								</div>
							</div>
							<span>@i.Word.Name</span>
							<span class="types-text">@GetWordTypeText(i.Word)</span>
						</div>
						<br>
					</div>
				}
				var (allyHP, foeHP) = (i.AllyHP, i.FoeHP);
				<div class="row-hp">
					<div class="hp-grid">
						@if (foeHP > 60)
						{
							<span class="oi oi-plus" style="color: cornflowerblue; grid-row: 1; grid-column: 1; font-size: 14px;" />
							<div class="hp-bar" style="background-color:@HpToColor(foeHP); grid-column: 3;">@foeHP</div>
						}
						else
						{
							<div class="hp-bar" style="background-color:@HpToColor(foeHP); grid-column: 3; justify-self: end; width: @((double)foeHP / 3 * 5)%;">@foeHP</div>
							<div class="hp-bar" style="background-color: #626362; grid-column: 3; z-index: 1; top: 0px; position: relative;"></div>
						}
						@if (allyHP > 60)
						{
							<div class="hp-bar" style="background-color: @HpToColor(allyHP); grid-column: 5;">@allyHP</div>
							<span class="oi oi-plus" style="color: cornflowerblue; grid-column: 7; font-size: 14px;" />
						}
						else
						{
							<div class="hp-bar" style="background-color: @HpToColor(allyHP); grid-column: 5; justify-self: start; width: @((double)allyHP / 3 * 5)%;">@allyHP</div>
							<div class="hp-bar" style="background-color: #626362; grid-column: 5; z-index: 1; top: 0px; position: relative;"></div>
						}
					</div>
				</div>
				isAllyTurn = !isAllyTurn;
			}
			@if (isAllyTurn)
			{
				<div class="row-ally row">
					<div class="word outline">
						<span style="font-weight: bold;">(詰み)</span>
					</div>
				</div>
			}
			else
			{
				<div class="row-foe row">
					<div class="word outline">
						<span style="font-weight: bold;">(詰み)</span>
					</div>
				</div>
			}
			<div class="last">@(Winner)の勝利！</div>
		</div>
		<br><br><br><br><br><br><br><br>
		<a class="top" @onclick=BackBtn_OnClick>← もどる</a>
	</div>
</div>

@code {
	internal static List<TurnInfo> History = [];

	internal static (StatusInfo Ally, StatusInfo Foe) Settings = default;

	private string Winner => History.Count % 2 == 0 ? "じぶん" : "あいて";

	protected override void OnInitialized()
	{
		if (!AppSettings.IsLoggedIn)
		{
			NavigationManager.NavigateTo("", false);
			return;
		}
		if (!Words.IsLoadedCorrectly)
			NavigationManager.NavigateTo("top", false);
	}

	private void BackBtn_OnClick() => NavigationManager.NavigateTo("rev-simulator");

	private static string GetWordTypeText(Word word) =>
		word.IsSingleType ? word.Type1.TypeToString()
		: word.IsDoubleType ? $"{word.Type1.TypeToString()} / {word.Type2.TypeToString()}"
		: string.Empty;

	private static string HpToColor(int hp) => hp switch
	{
		> 60 => "cornflowerblue",
		> 30 => "#00DB0E",
		> 12 => "#E1B740",
		_ => "#B84731"
	};

	private static string Format(double d) => $"{d:0.0#}";
}
