@page "/debug"
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@using SBFirstLast4.Simulator


<html lang="ja">
<head>
	<meta charset="UTF-8">
	<meta name="viewport" content="width=device-width, maximum-scale=1.0, initial-scale=1">
	<link rel="stylesheet" href="css/simulator.css" />
	<link rel="stylesheet" href="https://indestructibletype-fonthosting.github.io/renner.css" type="text/css">
	<link rel="shortcut icon" type="image/vnd.microsoft.icon" href="../icons/favicon.ico">
	<link rel="icon" type="image/vnd.microsoft.icon" href="../icons/favicon.ico">
</head>
<body>
	<div id="bg"></div>
	<div id="main">
		<div id="modal-message"></div>
		<div id="next"><a>つぎへ</a></div>
		<div id="game" style="background-color: forestgreen">
			<div id="foe-status">
				<span id="foe-name">@Battle.Player2.Name</span><span class="poison" id="foe-poison" style=@($"display: {(IsPoisoned.Player2 ? "inline" : "none")};")>どく</span>
				<div id="left-HP">
					<div id="left-HP-remain" style=@($"width: {HPWidth.Player2}%; background-color: {GetHPColor((double)HPNum.Player2 / Player.MaxHP) };")></div>
				</div>
				<div id="foeHPnum">@($"{HPNum.Player2}/{Player.MaxHP}")</div>
				<div class="tri"></div>
			</div>

			<div id="ally-status">
				<span id="ally-name">@Battle.Player1.Name</span><span class="poison" id="ally-poison" style=@($"display: {(IsPoisoned.Player1 ? "inline" : "none")};")>どく</span>
				<div id="right-HP">
					<div id="right-HP-remain" style=@($"width: {HPWidth.Player1}%; background-color: {GetHPColor((double)HPNum.Player1 / Player.MaxHP) };")></div>
				</div>
				<div id="allyHPnum">@($"{HPNum.Player1}/{Player.MaxHP}")</div>
				<div class="tri"></div>
			</div>
			<div id="foe-word" style=@($"opacity: {WordOpacities.Player2};")>
				<WordDisplay WordName="@Player2Word.Name" Types="@Player2Word.Types"></WordDisplay>
				<!--<div class="first">
					<p>
						ゆ
					</p>
				</div>-->
			</div>
			<div class="field-shadow-wrapper">
				<div class="field-shadow" id="foe-shadow"></div>
			</div>

			@if (ShowAnimation.Player2.Up)
			{
				<svg id="foe-up" class="foe-change" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
					<defs>
						<filter id="filter">
							<feGaussianBlur stdDeviation="5"></feGaussianBlur>
						</filter>
						<mask id="mask">
							<ellipse cx="50%" cy="50%" rx="25%" ry="25%" fill="white" filter="url(#filter)"></ellipse>
						</mask>
					</defs>

					<image xlink:href="images/red.gif" width="100%" height="100%" mask="url(#mask)"></image>
				</svg>
			}
			@if (ShowAnimation.Player2.Down)
			{
				<svg id="foe-down" class="foe-change" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
					<defs>
						<filter id="filter2">
							<feGaussianBlur stdDeviation="5"></feGaussianBlur>
						</filter>
						<mask id="mask2">
							<ellipse cx="50%" cy="50%" rx="25%" ry="25%" fill="white" filter="url(#filter2)"></ellipse>
						</mask>
					</defs>

					<image xlink:href="images/blue.gif" width="100%" height="100%" mask="url(#mask2)"></image>
				</svg>
			}
			@if (ShowAnimation.Player2.Heal)
			{
				<svg id="foe-heal" class="foe-change" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
					<defs>
						<filter id="filter6">
							<feGaussianBlur stdDeviation="5"></feGaussianBlur>
						</filter>
						<mask id="mask6">
							<ellipse cx="50%" cy="50%" rx="25%" ry="25%" fill="white" filter="url(#filter6)"></ellipse>
						</mask>
					</defs>

					<image xlink:href="images/heal.gif" width="100%" height="100%" mask="url(#mask6)"></image>
				</svg>
			}

			<div id="ally-word" style=@($"opacity: {WordOpacities.Player1};")>
				<WordDisplay WordName="@Player1Word.Name" Types="@Player1Word.Types"></WordDisplay>
			</div>
			<div class="field-shadow-wrapper">
				<div class="field-shadow" id="ally-shadow"></div>
			</div>
			@if (ShowAnimation.Player1.Up)
			{
				<svg id="ally-up" class="ally-change" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
					<defs>
						<filter id="filter3">
							<feGaussianBlur stdDeviation="5"></feGaussianBlur>
						</filter>
						<mask id="mask3">
							<ellipse cx="50%" cy="50%" rx="25%" ry="25%" fill="white" filter="url(#filter3)"></ellipse>
						</mask>
					</defs>

					<image xlink:href="images/red.gif" width="100%" height="100%" mask="url(#mask3)"></image>
				</svg>
			}
			@if (ShowAnimation.Player1.Down)
			{
				<svg id="ally-down" class="ally-change" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
					<defs>
						<filter id="filter4">
							<feGaussianBlur stdDeviation="5"></feGaussianBlur>
						</filter>
						<mask id="mask4">
							<ellipse cx="50%" cy="50%" rx="25%" ry="25%" fill="white" filter="url(#filter4)"></ellipse>
						</mask>
					</defs>

					<image xlink:href="images/blue.gif" width="100%" height="100%" mask="url(#mask4)"></image>
				</svg>
			}
			@if (ShowAnimation.Player1.Heal)
			{
				<svg id="ally-heal" class="ally-change" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
					<defs>
						<filter id="filter5">
							<feGaussianBlur stdDeviation="5"></feGaussianBlur>
						</filter>
						<mask id="mask5">
							<ellipse cx="50%" cy="50%" rx="25%" ry="25%" fill="white" filter="url(#filter5)"></ellipse>
						</mask>
					</defs>

					<image xlink:href="images/heal.gif" width="100%" height="100%" mask="url(#mask5)"></image>
				</svg>
			}

			<div id="timer"></div>
		</div>

		<div id="message" style=@(IsProcessing ? string.Empty : "display: none;")>
			<div id="message-text">@MessageText</div>
		</div>

		<div id="form">
			<div id="text" style=@(IsProcessing ? string.Empty : "display: block;")>
				<input type="text" id="input" autocomplete="off" placeholder=@($"「{Battle.NextChar}」からはじまることば") @onkeydown=Input_KeyDown>
				<button type="submit" id="btn-submit" @onclick=Submit_Click></button>
			</div>
			<p id="types"></p>
		</div>
		<div id="situation" class="sb-button" style="display: block;">
			<p>じょうきょう</p>
		</div>
		<div id="skill" class="sb-button" style="display: block;">
			<p>とくせい</p>
		</div>
		<div id="exit" class="sb-button">
			<p>おわる</p>
		</div>

		<div id="wait-message">@WaitMessage</div>
		<div id="hint"></div>
		<div id="situation-modal">
			<div id="s-foe-info">
				<h3>あいて<span id="foe-rank"></span></h3>
				<p>こうげき<br><span id="foe-A">1.0倍</span></p>
				<p>ぼうぎょ<br><span id="foe-B">1.0倍</span></p>
				<!--<span>とくせい</span>
				<div id="foe-tokusei"></div>--->
			</div>
			<div id="s-ally-info">
				<h3>じぶん<span id="ally-rank"></span></h3>
				<p>こうげき<br><span id="ally-A">1.0倍</span></p>
				<p>ぼうぎょ<br><span id="ally-B">1.0倍</span></p>
				<!--<span>とくせい</span>
				<div id="ally-tokusei"></div>--->
			</div>

			<div id="last-foe-word"></div>
			<div class="types"></div>
			<div class="will-damaged"></div>
			<div class="close-modal">とじる</div>
		</div>
		<div id="skill-modal">
			<div id="ally-tokusei">
				<span>自分</span>
				<div class="tokusei-name">やどりぎ</div>
				<div class="tokusei-desc">植物タイプの言葉を使うとダメージを与える代わりに相手にやどりぎを植え付ける</div>
			</div>
			<div id="foe-tokusei">
				<span>相手</span>
				<div class="tokusei-name">むきむき</div>
				<div class="tokusei-desc">暴力タイプの言葉を使っても攻撃力がすこししか下がらなくなる</div>
			</div>
			<div id="middle">
				<span class="tapto">タップしてとくせいを変える<span id="counter" style="display: none;">(あと<span id="remain">2</span>回)</span></span>
				<div id="skills"><div id="動物"><img class="skill-icon" src="../images/animal.gif"><br><span>はんしょく</span></div><div id="ノーマル"><img class="skill-icon" src="../icons/normal.GIF"><br><span>デバッガー</span></div><div id="感情"><img class="skill-icon" src="../icons/heart.GIF"><br><span>じょうねつ</span></div><div id="人物"><img class="skill-icon" src="../icons/person.GIF"><br><span>きょじん</span></div><div id="食べ物"><img class="skill-icon" src="../icons/food.GIF"><br><span>いかすい</span></div><div id="芸術"><img class="skill-icon" src="../icons/art.GIF"><br><span>ロックンロール</span></div><div id="暴力"><img class="skill-icon" src="../icons/violence.GIF"><br><span>むきむき</span></div><div id="スポーツ"><img class="skill-icon" src="../icons/sports.GIF"><br><span>トレーニング</span></div><div id="社会"><img class="skill-icon" src="../icons/social.GIF"><br><span>ほけん</span></div><div id="時間"><img class="skill-icon" src="../icons/time.GIF"><br><span>さきのばし</span></div><div id="人体"><img class="skill-icon" src="../icons/body.GIF"><br><span>からて</span></div><div id="暴言"><img class="skill-icon" src="../icons/abuse.GIF"><br><span>ずぼし</span></div><div id="医療"><img class="skill-icon" src="../icons/medical.GIF"><br><span>いしょくどうげん</span></div><div id="機械"><img class="skill-icon" src="../icons/machine.GIF"><br><span>かちこち</span></div><div id="虫"><img class="skill-icon" src="../icons/insect.GIF"><br><span>どくばり</span></div><div id="天気"><img class="skill-icon" src="../icons/weather.GIF"><br><span>たいふういっか</span></div><div id="植物" style="border: 1px solid black;"><img class="skill-icon" src="../images/plant.gif"><br><span>やどりぎ</span></div><div id="理科"><img class="skill-icon" src="../icons/science.GIF"><br><span>じっけん</span></div><div id="地名"><img class="skill-icon" src="../icons/place.GIF"><br><span>グローバル</span></div><div id="宗教"><img class="skill-icon" src="../icons/religion.GIF"><br><span>しんこうしん</span></div><div id="遊び"><img class="skill-icon" src="../icons/play.GIF"><br><span>かくめい</span></div><div id="数学"><img class="skill-icon" src="../icons/math.GIF"><br><span>けいさん</span></div><div id="服飾"><img class="skill-icon" src="../icons/cloth.GIF"><br><span>かさねぎ</span></div><div id="工作"><img class="skill-icon" src="../icons/craft.GIF"><br><span>ぶそう</span></div><div id="物語"><img class="skill-icon" src="../icons/story.GIF"><br><span>おれのことばのもじすうがおおいほどいりょくがおおきくなるけんについて</span></div></div>
			</div>
			<div class="close-modal">とじる</div>
		</div>
	</div>
</body>
</html>
@code {
	private Battle Battle = Battle.Empty;
	private bool IsProcessing;
	private bool IsDead;


	private List<AnnotatedString> BattleLogItems = new();

	private TaskCompletionSource<Order> InputCompletion = new();

	private string MessageText = string.Empty;
	private string WaitMessage = string.Empty;

	private (int Player1, int Player2) HPNum = (Player.MaxHP, Player.MaxHP);
	private (double Player1, double Player2) HPWidth = (100, 100);

	private (double Player1, double Player2) WordOpacities = (0, 0);

	private (bool Player1, bool Player2) IsPoisoned = (false, false);

	private ((bool Up, bool Down, bool Heal) Player1, (bool Up, bool Down, bool Heal) Player2) ShowAnimation = default;

	private Word Player1Word = Word.Default;
	private Word Player2Word = Word.Default;

	private static readonly Dictionary<Notice, string> SoundDic = new()
		{
			[Notice.Buf] = "up",
			[Notice.Debuf] = "down",
			[Notice.RevInfo] = "pera",
			[Notice.EffectiveProp] = "effective",
			[Notice.MidDmgProp] = "middmg",
			[Notice.NonEffectiveProp] = "noneffective",
			[Notice.Heal] = "heal",
			[Notice.Poison] = "poison",
			[Notice.PoisonDmg] = "poison",
			[Notice.PoisonHeal] = "poison_heal",
			[Notice.Seed] = "seeded",
			[Notice.SeedDmg] = "seed_damage",
			[Notice.InvokeBufInfo] = "up"
		};

	protected override async void OnInitialized()
	{
		Battle = new
	(
	new(new RocknRoll())
		{
			Proceeding = Proceeds.True,
			Name = "先攻"
		},
	new(new Kakumei())
		{
			Proceeding = Proceeds.False,
			Name = "後攻"
		}
	)
			{
				In = In,
				Out = Out,
				OnReset = cts => cts.Cancel()
			};
		StateHasChanged();
		await Battle.Run();
	}

	private Task<Order> In()
	{
		InputCompletion = new();
		return InputCompletion.Task;
	}

	private async Task Out(List<AnnotatedString> list)
	{
		try
		{
			BattleLogItems.AddRange(list);

			if (Battle.CurrentOrderType == OrderType.Action)
				await OutActionOrder(list);

			if (Battle.CurrentOrderType == OrderType.Change)
				OutChangeOrder(list);

			StateHasChanged();
		}
		catch (Exception ex)
		{
			await JSRuntime.Alert(ex);
		}
	}

	private async Task Input_KeyDown(KeyboardEventArgs e)
	{
		try
		{
			if (e.Key is "Process" or not "Enter") return;

			var order = await JSRuntime.InvokeAsync<string>("eval", "document.getElementById('input').value");
			await JSRuntime.InvokeVoidAsync("eval", "document.getElementById('input').value = ''");
			InputCompletion.TrySetResult(Order.Parse(order.Trim().Split(), Battle));
		}
		catch (Exception ex)
		{
			await JSRuntime.Alert(ex);
		}
	}

	private async void Submit_Click() => await Input_KeyDown(new() { Key = "Enter" });

	private async Task OutActionOrder(List<AnnotatedString> list)
	{
		try
		{
			MessageText = string.Empty;
			if (IsDead) return;

			IsDead = list.Select(x => x.Notice).Contains(Notice.DeathInfo);

			foreach (var i in list)
				if (i.Notice == Notice.Warn)
				{
					WaitMessage = i.Text;
					StateHasChanged();
					return;
				}
			IsProcessing = true;
			var msgList = GetMessages(list);


			if (Battle.WasPlayer1sTurn)
				await ShowWordAsync(Battle.Player1.CurrentWord);

			else
				await ShowWordAsync(Battle.Player2.CurrentWord);

			await Task.Delay(400);
			await ShowMessageAsync(msgList);

			if (!IsDead)
			{
				IsProcessing = false;
				StateHasChanged();
			}
		}
		catch (Exception ex)
		{
			await JSRuntime.Alert(ex);
		}
	}

	private void OutChangeOrder(List<AnnotatedString> list)
	{

	}

	private static List<AnnotatedString> GetMessages(List<AnnotatedString> list)
	{
		var filter = new List<Notice>()
		{
			Notice.HPUpdated, Notice.NoDmgProp, Notice.NonEffectiveProp, Notice.MidDmgProp, Notice.EffectiveProp, Notice.CritInfo,
			Notice.PoisonHeal,Notice.Heal, Notice.Buf, Notice.Debuf, Notice.RevInfo,Notice.Poison, Notice.PoisonDmg, Notice.Seed,
			Notice.SeedDmg, Notice.InvokeBufInfo, Notice.Caution, Notice.DeathInfo
		};
		return list.Where(x => filter.Contains(x.Notice)).ToList();
	}

	private async Task ShowWordAsync(Word word)
	{
		if (Battle.TurnNum > 3 || IsDead)
			await FadeOut(Battle.WasPlayer1sTurn);

		if (Battle.WasPlayer1sTurn)
			Player1Word = Battle.Player1.CurrentWord;
		else
			Player2Word = Battle.Player2.CurrentWord;
		StateHasChanged();
		await Task.Delay(1);

		await SBAudioManager.PlayAudio(word.Type1.TypeToAudio());
		await FadeIn(Battle.WasPlayer1sTurn);
		StateHasChanged();
	}

	private async Task ShowDeadlyWordAsync(Word word)
	{
		if (Battle.TurnNum > 3)
			await FadeOut(Battle.IsPlayer1sTurn);

		if (Battle.IsPlayer1sTurn)
			Player1Word = Battle.Player1.CurrentWord;
		else
			Player2Word = Battle.Player2.CurrentWord;
		StateHasChanged();
		await Task.Delay(1);

		await SBAudioManager.PlayAudio(word.Type1.TypeToAudio());
		await FadeIn(Battle.IsPlayer1sTurn);
		StateHasChanged();
	}

	private async Task ShowMessageAsync(List<AnnotatedString> msgs)
	{
		var tasks = new List<Task>();
		foreach (var msg in msgs)
		{
			if (!msg.IsInvisible) MessageText = msg.Text;
			if (SoundDic.TryGetValue(msg.Notice, out var soundName)) SBAudioManager.PlayAudioForget(soundName);

			if (msg.Notice == Notice.HPUpdated)
			{
				var task = UpdateAllHPBarsAsync(msg.Params[0], Player.MaxHP, msg.Params[1], Player.MaxHP);
				tasks.Add(task);
				continue;
			}
			if (msg.Notice == Notice.Buf)
			{
				var selector = !Battle.IsPlayer1sTurn ? PlayerSelector.Player1 : PlayerSelector.Player2;
				await ShowEffectAsync(selector, "up");
			}
			if (msg.Notice == Notice.Debuf)
			{
				var selector = !Battle.IsPlayer1sTurn ? PlayerSelector.Player1 : PlayerSelector.Player2;
				await ShowEffectAsync(selector, "down");
			}
			if (msg.Notice == Notice.Heal)
			{
				var selector = !Battle.IsPlayer1sTurn ? PlayerSelector.Player1 : PlayerSelector.Player2;
				await ShowEffectAsync(selector, "heal");
			}
			if (msg.Notice == Notice.InvokeBufInfo)
			{
				var selector = !Battle.IsPlayer1sTurn ? PlayerSelector.Player2 : PlayerSelector.Player1;
				await ShowEffectAsync(selector, "up");
			}
			if (msg.Notice == Notice.Poison)
			{
				if (Battle.WasPlayer1sTurn)
					if (msg.Params[0] == 0)
						IsPoisoned.Player1 = true;
					else
						IsPoisoned.Player2 = true;

				else if (msg.Params[0] == 0)
					IsPoisoned.Player1 = true;

				else
					IsPoisoned.Player2 = true;
			}
			if (msg.Notice == Notice.PoisonHeal)
			{
				if (!Battle.IsPlayer1sTurn)
					if (msg.Params[0] == 0)
						IsPoisoned.Player1 = false;
					else
						IsPoisoned.Player2 = false;

				else if (msg.Params[0] == 0)
					IsPoisoned.Player2 = false;

				else
					IsPoisoned.Player1 = false;
			}
			if (msg.Notice == Notice.DeathInfo)
			{
				await Task.Delay(500);
				await SBAudioManager.PlayAudio("end");
				await SBAudioManager.SeizeAudio(AppSettings.BattleBgm);
			}
			StateHasChanged();
			await Task.Delay(800);
		}
		await Task.WhenAll(tasks);
		StateHasChanged();
	}
	private async Task ShowEffectAsync(PlayerSelector selector, string uiSelector)
	{
		if (selector == PlayerSelector.Player1)
		{
			switch (uiSelector)
			{
				case "up":
					ShowAnimation.Player1.Up = true;
					break;
				case "down":
					ShowAnimation.Player1.Down = true;
					break;
				case "heal":
					ShowAnimation.Player1.Heal = true;
					break;
				default:
					break;
			}
		}
		else if (selector == PlayerSelector.Player2)
		{
			switch (uiSelector)
			{
				case "up":
					ShowAnimation.Player2.Up = true;
					break;
				case "down":
					ShowAnimation.Player2.Down = true;
					break;
				case "heal":
					ShowAnimation.Player2.Heal = true;
					break;
				default:
					break;
			}
		}
		StateHasChanged();
		await Task.Delay(700);
		if (selector == PlayerSelector.Player1)
		{
			switch (uiSelector)
			{
				case "up":
					ShowAnimation.Player1.Up = false;
					break;
				case "down":
					ShowAnimation.Player1.Down = false;
					break;
				case "heal":
					ShowAnimation.Player1.Heal = false;
					break;
				default:
					break;
			}
		}
		else if (selector == PlayerSelector.Player2)
		{
			switch (uiSelector)
			{
				case "up":
					ShowAnimation.Player2.Up = false;
					break;
				case "down":
					ShowAnimation.Player2.Down = false;
					break;
				case "heal":
					ShowAnimation.Player2.Heal = false;
					break;
				default:
					break;
			}
		}
		StateHasChanged();
	}

	private async Task UpdateAllHPBarsAsync(int allyHP, int allyHPMax, int foeHP, int foeHPMax)
	{
		if (allyHP != HPNum.Player1)
		{
			HPNum.Player1 = allyHP;
			await UpdateHPBarAsync(allyHP, allyHPMax, PlayerSelector.Player1);
		}
		if (foeHP != HPNum.Player2)
		{
			HPNum.Player2 = foeHP;
			await UpdateHPBarAsync(foeHP, foeHPMax, PlayerSelector.Player2);
		}
	}

	private async Task UpdateHPBarAsync(int hp, int hpMax, PlayerSelector selector)
	{
		if (selector == PlayerSelector.Player1)
		{
			var start = HPWidth.Player1;
			var end = (double)hp / hpMax * 100;
			var change = end - start;
			var duration = 600;
			var interval = 10;
			var time = 0;
			var width = start;

			while (time <= duration)
			{
				width = SwingEasing(time, start, change, duration);
				HPWidth.Player1 = width;
				time += interval;
				StateHasChanged();
				await Task.Delay(interval);
			}
			HPWidth.Player1 = end;
		}
		else if (selector == PlayerSelector.Player2)
		{
			var start = HPWidth.Player2;
			var end = (double)hp / hpMax * 100;
			var change = end - start;
			var duration = 600;
			var interval = 7;
			var time = 0;
			var width = start;

			while (time <= duration)
			{
				width = SwingEasing(time, start, change, duration);
				HPWidth.Player2 = width;
				time += interval;
				StateHasChanged();
				await Task.Delay(interval);
			}
			HPWidth.Player2 = end;
		}
	}

	private static double SwingEasing(double time, double start, double change, double duration) => start + change * ((-Math.Cos(time / duration * Math.PI) / 2) + 0.5);

	private static string GetHPColor(double ratioHP)
	{
		if (ratioHP > 0.5)
			return "#00DB0E";
		if (ratioHP > 0.2)
			return "#E1B740";
		return "#B84731";
	}

	private async Task FadeOut(bool isPlayer1sTurn)
	{
		for (var i = 0.0; i < 1; i += 0.04)
		{
			if (isPlayer1sTurn)
				WordOpacities.Player1 -= i;
			else
				WordOpacities.Player2 -= i;
			StateHasChanged();
			await Task.Delay(10);
		}
	}
	private async Task FadeIn(bool isPlayer1sTurn)
	{
		for (var i = 0.0; i < 1; i += 0.04)
		{
			if (isPlayer1sTurn)
				WordOpacities.Player1 += i;
			else
				WordOpacities.Player2 += i;
			StateHasChanged();
			await Task.Delay(10);
		}
	}
}
