@page "/home"
@inject NavigationManager NavigationManager
@layout NoMenuLayout
@using System.Text.RegularExpressions
<PageTitle>ホーム</PageTitle>


<div class="page">
	<div class="header">
		<div class="border">
			<div class="stack-panel">
				<label class="label">つかいかた</label>
				<label class="text-label">
					検索オプションを指定して、必要な情報を入力すると、<br>
					その条件に合った、しりとりで使用可能な単語を出力します。<br>
					「文字」欄には、ひらがな以外を入力することはできません。
				</label>
			</div>
		</div>
	</div>
	<div class="grid">
		<div class="border">
			<div class="stack-panel">
				<div class="inner-grid">
					<label class="label">検索オプション</label>
					<div class="dropdown-container">
						<select class="dropdown" @bind="SelectedSearchOptionItem">
							@foreach (var item in SearchOptionItemList)
							{
								<option value="@item">@item</option>
							}
						</select>
					</div>
				</div>
			</div>
		</div>
	</div>
	<div class="grid">
		<div class="border">
			<div class="stack-panel">
				@if (SelectedSearchOptionItem is "前方後方一致" or "前方一致")
				{
					<div class="inner-grid">
						<label class="label">最初の文字</label>
						<label class="sub-label" style="@(ShowFirstCharWarning ? "display:;" : "display: none;")">@FirstCharWarning</label>
						<input class="text-box" type="text" @oninput="@(ui => FirstChar = (string?)ui.Value ?? string.Empty)" />
					</div>
					<div class="divider"></div>
				}
				@if (SelectedSearchOptionItem is "前方後方一致" or "後方一致")
				{
					<div class="inner-grid">
						<label class="label">最後の文字</label>
						<label class="sub-label" style="@(ShowLastCharWarning ? "display:;" : "display: none;")">@LastCharWarning</label>
						<input class="text-box" type="text" @oninput="@(ui => LastChar = (string?)ui.Value ?? string.Empty)" />
					</div>
					<div class="divider"></div>
				}
				@if (SelectedSearchOptionItem is "正規表現")
				{
					<div class="inner-grid">
						<label class="label">正規表現</label>
						<label class="sub-label" style="@(ShowRegexWarning ? "display:;" : "display: none;")">@RegexWarning</label>
						<input class="text-input" type="text" @bind="RegexPattern" />
					</div>
					<div class="divider"></div>
				}
				else
				{
					<div class="inner-grid">
						<label class="label">文字数指定</label>
						<div class="dropdown-container">
							<select class="dropdown" @bind="SelectedCustomLengthItem">
								@foreach (var item in CustomLengthItemList)
								{
									<option value="@item">@item</option>
								}
							</select>
						</div>
						@if (SelectedCustomLengthItem == "カスタム")
						{
							<div class="custom-input">
								<label class="custom-input-label">
									カスタム文字数指定
									<span class="tooltip-icon" data-tooltip="正規表現風の書き方で文字数を指定します。&#10;例:&#10;・ &quot;5&quot;   ... ５文字の単語のみ出力&#10;・ &quot;6,&quot;   ... ６文字以上の単語のみ出力&#10;・ &quot;4,7&quot;   ... ４文字以上、かつ７文字未満の単語のみ出力">?</span>
								</label>
								<label class="sub-label" style="@(ShowCustomLengthWarning ? "display:;" : "display: none;")">@CustomLengthWarning</label>
								<input class="text-input" type="text" @bind="CustomLength" />
							</div>
						}
					</div>
					<div class="divider"></div>
				}
				<button class="search-button" @onclick="SearchButton_Click">単語を検索</button>
			</div>
		</div>
	</div>
</div>
<style>
	.page {
		display: grid;
		justify-content: center;
		align-items: center;
		min-height: 100vh;
		background-color: #F5F6F1;
		box-sizing: border-box;
	}

	.header {
		display: block;
	}

	.grid {
		display: grid;
	}

	.border {
		margin: 20px;
		border: 2px solid gray;
		border-radius: 10px;
		padding: 20px;
		background-color: white;
		box-shadow: 0px 2px 5px rgba(0, 0, 0, 0.2);
	}

	.stack-panel {
		display: flex;
		flex-direction: column;
		padding-left: 30px;
		padding-right: 30px;
		padding-top: 10px;
		padding-bottom: 10px
	}

	.inner-grid {
		display: grid;
		grid-template-rows: auto auto;
		row-gap: 15px;
		margin-bottom: 10px;
		justify-items: center;
		align-items: center;
	}

	.label {
		text-align: center;
		font-weight: bold;
		font-size: 30px;
		color: black;
	}

	.sub-label {
		text-align: center;
		font-size: 20px;
		color: darkred;
		padding: 0 0 10px 0;
		margin-top: -10px;
		margin-bottom: -10px;
	}

	.text-label {
		padding-top: 10px;
		text-align: center;
		font-size: 18px;
		font-weight: 100;
		color: black;
	}

	.text-box {
		width: 80px;
		height: 80px;
		display: flex;
		justify-content: center;
		align-items: center;
		text-align: center;
		border: 2px solid gray;
		border-radius: 10px;
		font-size: 32px; /* Adjust the font size to your preference */
		background-color: white;
		box-shadow: 0px 2px 5px rgba(0, 0, 0, 0.2);
		white-space: nowrap; /* Prevents text from collapsing on mobile devices */
		overflow: hidden; /* Hides overflow text if it exceeds the input's width */
		text-overflow: ellipsis;
	}

	.dropdown-container {
		width: 100%;
		display: flex;
		justify-content: center;
	}

	.dropdown {
		width: 80%;
		padding: 12px;
		font-size: 18px;
		border: 2px solid gray;
		border-radius: 5px;
	}

	.custom-input {
		display: flex;
		flex-direction: column;
		align-items: center;
	}

	.custom-input-label {
		display: flex;
		align-items: center;
		text-align: center;
		font-size: 20px;
		font-weight: bold;
		color: black;
		padding: 0 0 10px 0;
		margin-top: 10px;
		margin-bottom: 10px;
	}

	.text-input {
		width: 80%;
		padding: 12px;
		font-size: 18px;
		border: 2px solid gray;
		border-radius: 5px;
		margin-top: 8px;
	}

	.divider {
		height: 2px;
		background-color: darkgray;
		margin: 10px 0;
	}

	.search-button {
		width: fit-content;
		align-self: center;
		font-weight: bold;
		font-size: 30px;
		background-color: darkmagenta;
		color: white;
		width: 300px;
		height: 80px;
		margin-top: 20px;
		border-radius: 20px;
		border: none;
		cursor: pointer;
	}

	.tooltip-icon {
		font-size: 18px;
		color: #999;
		cursor: help;
		margin-left: 5px;
		position: relative;
	}

		.tooltip-icon:hover::after {
			content: attr(data-tooltip);
			position: absolute;
			top: 100%;
			left: 50%;
			transform: translateX(-50%);
			background-color: rgba(0, 0, 0, 0.8);
			color: #fff;
			font-weight: normal;
			padding: 5px;
			border-radius: 5px;
			width: 400px;
			text-align: left;
			font-size: 14px;
			white-space: pre-line;
			z-index: 1;
		}
</style>

@code {
	private static readonly Regex KanaRegex = new("^[*＊ぁ-ゟー]+$");


	private string FirstChar = string.Empty;
	private bool ShowFirstCharWarning = false;
	private string FirstCharWarning = string.Empty;

	private string LastChar = string.Empty;
	private bool ShowLastCharWarning = false;
	private string LastCharWarning = string.Empty;

	private string RegexPattern = string.Empty;
	private bool ShowRegexWarning = false;
	private string RegexWarning = string.Empty;

	private string SelectedCustomLengthItem = "なし";
	private string CustomLength = string.Empty;
	private bool ShowCustomLengthWarning = false;
	private string CustomLengthWarning = string.Empty;
	private List<string> CustomLengthItemList = new()
	{
		"なし",
		"７文字以上",
		"６文字以上",
		"カスタム"
	};


	private string SelectedSearchOptionItem = "前方後方一致";
	private List<string> SearchOptionItemList = new()
	{
		"前方後方一致",
		"前方一致",
		"後方一致",
		"正規表現"
	};
	protected override void OnInitialized()
	{
		base.OnInitialized();
		if (!WordDictionary.IsLoadedCorrectly)
		{
			NavigationManager.NavigateTo("", false);
			return;
		}
	}
	private void SearchButton_Click()
	{
		var returnFlag = false;
		var isRegex = SelectedSearchOptionItem == "正規表現";
		if (SelectedSearchOptionItem == "前方一致") LastChar = "*";
		if (SelectedSearchOptionItem == "後方一致") FirstChar = "*";
		if (!KanaRegex.IsMatch(FirstChar) && !isRegex)
		{
			FirstCharWarning = "ひらがなを入力してください";
			ShowFirstCharWarning = true;
			StateHasChanged();
			returnFlag = true;
		}
		else
		{
			FirstCharWarning = string.Empty;
			ShowFirstCharWarning = false;
			StateHasChanged();
		}
		if (!KanaRegex.IsMatch(LastChar) && !isRegex)
		{
			LastCharWarning = "ひらがなを入力してください";
			ShowLastCharWarning = true;
			StateHasChanged();
			returnFlag = true;
		}
		else
		{
			LastCharWarning = string.Empty;
			ShowLastCharWarning = false;
			StateHasChanged();
		}
		if (isRegex && !SBUtils.IsValidRegex(RegexPattern))
		{
			RegexWarning = "無効な構文です";
			ShowRegexWarning = true;
			StateHasChanged();
			returnFlag = true;
		}
		else
		{
			RegexWarning = string.Empty;
			ShowRegexWarning = false;
			StateHasChanged();
		}
		Func<string, bool>? pred = null;
		if (!isRegex && SelectedCustomLengthItem == "カスタム"
			&& !WordLengthSyntax.TryParseInputToPredicate(CustomLength, out pred, out var errorMsg))
		{
			CustomLengthWarning = errorMsg;
			ShowCustomLengthWarning = true;
			StateHasChanged();
			returnFlag = true;
		}
		else
		{
			CustomLengthWarning = string.Empty;
			ShowCustomLengthWarning = false;
			StateHasChanged();
		}
		if (returnFlag) return;
		SearchResult.FirstChar = FirstChar.At(0);
		SearchResult.LastChar = LastChar.At(0);
		SearchResult.CustomLengthPred = SelectedCustomLengthItem switch
		{
			"なし" => null,
			"７文字以上" => word => word.Length >= 7,
			"６文字以上" => word => word.Length >= 6,
			_ => pred
		};
		SearchResult.RegexBody = isRegex ? new(RegexPattern) : null;
		DownloadConfig.DeclType = SelectedSearchOptionItem switch
		{
			"前方後方一致" => ListDeclType.FirstLast,
			"前方一致" => ListDeclType.First,
			"後方一致" => ListDeclType.Last,
			"正規表現" => ListDeclType.Regex,
			_ => default
		};
		NavigationManager.NavigateTo("result");
	}
}
