@page "/calcdamage"
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<div class="top-grid">
	<div class="border">
		<div class="stack-panel">
			<label class="label">ダメージ計算</label>
			<label class="text-label">
				入力された条件に従って、ダメージ量を計算します。<br><br>
				（動作が遅い場合はページをリロード後、ライト版辞書を選択すると改善するかもしれません。）
			</label>
		</div>
	</div>
</div>

<div class="grid">
	<div class="border">
		<div class="stack-panel">
			<div class="inner-grid">
				<label class="text-label" style="font-weight:600; font-size: 28px;">計算結果</label>
				<label class="text-label" style="font-size:20px;">@LblDamage</label>
			</div>
		</div>
	</div>
</div>

<div class="grid">
	<div class="border">
		<div class="stack-panel">
			<div class="inner-grid">
				<label class="text-label" style="font-weight:600; font-size: 22px;">攻撃側の単語</label>
				<input class="text-input" id="attacker-word-input" type="text" placeholder="単語名を入力..." @onkeyup=AttackerInput_KeyUp />
				<label class="text-label">@AttackerTypeIndicator</label>
			</div>
			<div class="divider"></div>
			<div class="inner-grid">
				<label class="text-label" style="font-weight:600; font-size: 22px;">防御側の単語</label>
				<input class="text-input" id="receiver-word-input" type="text" placeholder="単語名を入力..." @onkeyup=ReceiverInput_KeyUp />
				<label class="text-label">@ReceiverTypeIndicator</label>
			</div>
			<div class="divider"></div>
			<div class="inner-grid">
				<label class="text-label" style="font-weight:600; font-size: 22px;">攻撃側の攻撃力</label>
				<div class="dropdown-container">
					<select class="dropdown" @bind-value="SelectedValueAItem" @bind-value:event="oninput" @onchange=UpdateLblDamage>
						@foreach (var item in StatusValueItemList)
						{
							<option value="@item">@item</option>
						}
					</select>
				</div>
			</div>
			<div class="divider"></div>
			<div class="inner-grid">
				<label class="text-label" style="font-weight:600; font-size: 22px;">防御側の防御力</label>
				<div class="dropdown-container">
					<select class="dropdown" @bind-value="SelectedValueBItem" @bind-value:event="oninput" @onchange=UpdateLblDamage>
						@foreach (var item in StatusValueItemList)
						{
							<option value="@item">@item</option>
						}
					</select>
				</div>
			</div>
			<div class="divider"></div>
			<div class="inner-grid">
				<label class="text-label" style="font-weight:600; font-size: 22px;">攻撃側のとくせい</label>
				<div class="dropdown-container">
					<select class="dropdown" @bind-value="SelectedAbilityItem" @bind-value:event="oninput" @onchange=UpdateLblDamage>
						@foreach (var item in new[] { "なし", "俺文字", "デバッガー", "グローバル", "じっけん", "きょじん", "しんこうしん", "からて", "ずぼし" })
						{
							<option value="@item">@item</option>
						}
					</select>
				</div>
			</div>
			<div class="divider"></div>
			<div class="inner-grid">
				<label class="text-label" style="font-weight:600; font-size: 22px;">自然急所</label>
				<input type="checkbox" id="switch" class="checkbox"
				@onchange="async e =>
					{
						CritIfPossible = (bool)(e.Value ?? false);
						StateHasChanged();
						await Task.Delay(1);
						UpdateLblDamage();
					}" />
				<label for="switch" class="toggle"></label>
			</div>
			<div class="divider"></div>
		</div>
	</div>
</div>


<style>
	body {
		font-family: Arial, sans-serif;
		margin: 0;
		padding: 0;
		background-color: #f5f6f1;
	}

	.top-grid {
		display: block;
	}

	.grid {
		display: grid;
	}

	.border {
		margin: 20px;
		border: 2px solid gray;
		border-radius: 10px;
		padding: 20px;
		background-color: white;
		box-shadow: 0px 2px 5px rgba(0, 0, 0, 0.2);
	}

	.stack-panel {
		display: flex;
		flex-direction: column;
		padding-left: 30px;
		padding-right: 30px;
		padding-top: 10px;
		padding-bottom: 10px
	}

	.inner-grid {
		display: grid;
		grid-template-rows: auto auto;
		row-gap: 15px;
		margin-bottom: 10px;
		justify-items: center;
		align-items: center;
	}

	.label {
		text-align: center;
		font-weight: bold;
		font-size: 30px;
		color: black;
	}

	.text-label {
		padding-top: 10px;
		text-align: center;
		font-size: 18px;
		font-weight: 100;
		color: black;
	}

	.text-input {
		width: 80%;
		padding: 12px;
		font-size: 18px;
		border: 2px solid gray;
		border-radius: 5px;
		margin-top: 8px;
	}

		.text-input::placeholder {
			color: dimgray;
		}

	.divider {
		height: 2px;
		background-color: darkgray;
		margin: 10px 0;
	}


	.checkbox {
		display: none;
	}

	.toggle {
		position: relative;
		display: inline-block;
		width: 60px;
		height: 34px;
		background-color: lightgray;
		border-radius: 17px;
	}

		.toggle::after {
			content: "";
			position: absolute;
			width: 26px;
			height: 26px;
			border-radius: 50%;
			background-color: white;
			top: 4px;
			left: 4px;
			transition: all 0.3s;
		}

	.checkbox:checked + .toggle::after {
		left: 30px;
	}

	.checkbox:checked + .toggle {
		background-color: green;
	}

	.dropdown-container {
		width: 100%;
		display: flex;
		justify-content: center;
	}

	.dropdown {
		width: 80%;
		padding: 12px;
		font-size: 18px;
		border: 2px solid gray;
		border-radius: 5px;
	}

</style>

@code {
	private string AttackerTypeIndicator { get; set; } = string.Empty;
	private string ReceiverTypeIndicator { get; set; } = string.Empty;
	private string SelectedValueAItem = "1.0 倍";
	private string SelectedValueBItem = "1.0 倍";
	private List<string> StatusValueItemList = new()
	{
		"0.25 倍", "0.28 倍", "0.33 倍", "0.4 倍", "0.5 倍", "0.66 倍",
		"1.0 倍", "1.5 倍", "2.0 倍", "2.5 倍", "3.0 倍", "3.5 倍", "4.0 倍"
	};
	private string SelectedAbilityItem = "なし";
	private bool CritIfPossible = false;
	private string LblDamage = string.Empty;


	private Word Attacker;
	private Word Receiver;
	private double ValueA => ParseStatusTextToDoubleOrDefault(SelectedValueAItem);
	private double ValueB => ParseStatusTextToDoubleOrDefault(SelectedValueBItem);
	WordType Ability => SelectedAbilityItem switch
	{
		"俺文字" => WordType.Tale,
		"デバッガー" => WordType.Normal,
		"グローバル" => WordType.Place,
		"じっけん" => WordType.Science,
		"きょじん" => WordType.Person,
		"しんこうしん" => WordType.Religion,
		"からて" => WordType.Body,
		"ずぼし" => WordType.Insult,
		_ => WordType.Empty
	};



	protected override void OnInitialized()
	{
		base.OnInitialized();
		if (!WordDictionary.IsLoadedCorrectly)
		{
			NavigationManager.NavigateTo("", false);
			return;
		}
	}

	private async void AttackerInput_KeyUp()
	{
		var wordText = await JSRuntime.InvokeAsync<string>("eval", "document.getElementById('attacker-word-input').value");
		Attacker = await InferWordTypeOrDefaultAsync(wordText, text => AttackerTypeIndicator = text);
		UpdateLblDamage();
	}

	private async void ReceiverInput_KeyUp()
	{
		var wordText = await JSRuntime.InvokeAsync<string>("eval", "document.getElementById('receiver-word-input').value");
		Receiver = await InferWordTypeOrDefaultAsync(wordText, text => ReceiverTypeIndicator = text);
		UpdateLblDamage();
	}

	private async Task<Word> InferWordTypeOrDefaultAsync(string wordText, Action<string> update)
	{
		if (string.IsNullOrWhiteSpace(wordText))
		{
			update(string.Empty);
			StateHasChanged();
			await Task.Delay(1);
			return default;
		}
		var keyChar = wordText[0];
		if (!SBUtils.KanaListSpread.Contains(keyChar.ToString()))
		{
			update("無効な開始文字です。");
			StateHasChanged();
			await Task.Delay(1);
			return default;
		}
		if (wordText.At(^1) == 'ん')
		{
			update("んで終わっています。");
			StateHasChanged();
			await Task.Delay(1);
			return default;
		}
		if (!WordDictionary.IsLite)
		{
			update("Loading...");
			StateHasChanged();
			await Task.Delay(1);
		}
		if (!WordDictionary.IsLite && !WordDictionary.PerfectNameDic.Contains(wordText))
		{
			update("辞書にない単語です。");
			StateHasChanged();
			await Task.Delay(1);
			return default;
		}

		var resultWord = WordDictionary.GetSplitList(keyChar).Find(x => x.Name == wordText);

		var typeIndicatorResult = "タイプ：";
		var (type1, type2) = (resultWord.Type1, resultWord.Type2);
		typeIndicatorResult += (type1, type2) switch
		{
			(WordType.Empty, WordType.Empty) when WordDictionary.IsLite && resultWord == default => "辞書にない、または無属性",
			(WordType.Empty, WordType.Empty) => "無属性",
			(var type, WordType.Empty) => $"{type.TypeToString()}",
			(WordType.Empty, var type) => $"{type.TypeToString()}",
			(var typeA, var typeB) => $"{typeA.TypeToString()} / {typeB.TypeToString()}"
		};
		update(typeIndicatorResult);
		StateHasChanged();
		await Task.Delay(1);
		return new(wordText, type1, type2);
	}

	private static double ParseStatusTextToDoubleOrDefault(string text)
	{
		var num = text.Split().At(0);
		if (!double.TryParse(num, out var value)) return 1;
		return value;
	}

	private async void UpdateLblDamage()
	{
		await Task.Delay(1);
		if (string.IsNullOrWhiteSpace(Attacker.Name) || string.IsNullOrWhiteSpace(Receiver.Name))
		{
			LblDamage = string.Empty;
			StateHasChanged();
			await Task.Delay(1);
			return;
		}
		var resultStr = string.Empty;
		var baseDmg = Attacker.IsEmpty && Ability == WordType.Normal ? 13
					: Attacker.IsEmpty ? 7
					: 10;
		var randomLow = Attacker.IsEmpty || Receiver.IsEmpty ? 1 : 0.85;
		var randomHigh = Attacker.IsEmpty || Receiver.IsEmpty ? 1 : 0.99;
		var critFlag = (Attacker.Contains(WordType.Body) && (CritIfPossible || Ability == WordType.Body))
					|| (Attacker.Contains(WordType.Insult) && (CritIfPossible || Ability == WordType.Insult));
		var crit = critFlag ? 1.5 : 1;
		var atk = critFlag ? Math.Max(1, ValueA) : ValueA;
		var def = critFlag ? Math.Min(1, ValueB) : ValueB;
		var prop = Attacker.CalcAmp(Receiver);
		var amp = Attacker.Contains(WordType.Place) && Ability == WordType.Place ? 1.5
				: Attacker.Contains(WordType.Science) && Ability == WordType.Mech ? 1.5
				: Attacker.Contains(WordType.Person) && Ability == WordType.Person ? 1.5
				: Attacker.Contains(WordType.Religion) && Ability == WordType.Religion ? 1.5
				: Attacker.Name.Length == 6 && Ability == WordType.Tale ? 1.5
				: Attacker.Name.Length > 6 && Ability == WordType.Tale ? 2
				: 1;
		var dmgLow = (int)(crit * (int)(amp * (int)(baseDmg * prop * atk / def * randomLow)));
		var dmgHigh = (int)(crit * (int)(amp * (int)(baseDmg * prop * atk / def * randomHigh)));
		resultStr += $"{Attacker} → {Receiver}：";
		resultStr += $" [{dmgLow}-{dmgHigh}]";
		var ability = Ability is WordType.Empty ? "特性なし " : $"{Ability.AbilityToString()} ";
		resultStr += $" {{ {ability}({ValueA:0.0#}/{ValueB:0.0#}) }}";
		LblDamage = resultStr;
		StateHasChanged();
		await Task.Delay(1);
	}
}
