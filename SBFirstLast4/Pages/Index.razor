@page "/"
@layout NoMenuLayout
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject ILocalStorageService LocalStorage
@inject HttpClient Http
@using System.Text.RegularExpressions
@using Blazored.LocalStorage
@using SBFirstLast4.Logging
<PageTitle>SBFirstLast4</PageTitle>

@if (IsLoading)
{
	<p>@LoadingMsg</p>
	return;
}
<p id="desc">ユーザー名を入力</p>
<InputText id="username" type="text" @bind-Value="@UserNameModel" />
<div class="privacypolicy">
	<p>
		SBFirstLast4は、機能改善並びに不正利用防止のため、以下の情報をサーバーに送信することがあります。<br><br>
		・ユーザー名<br>
		・ユーザーに紐づけられるID（GUID）<br>
		・ユーザーを識別するハッシュ値<br>　（IPアドレスをハッシュ化したもの）<br>
		・ユーザーのアクセス日時<br>
		・ユーザーのアクション<br>
		送信されたデータは、APIを通じて第三者に閲覧される可能性があります。
	</p>
</div>
<div class="checkbox">
	<InputCheckbox id="checkbox" @bind-Value=IsAccepted @onclick=OnChange />
	<label for="checkbox">私は上記の方針に同意します。</label>
</div>
<button type="submit" id="submit" @onclick=OnSubmit disabled="@IsDisabled">決定</button>
<p id="usernameError" style=@($"color: {ErrorMsgColor};")>@ErrorMsg</p>

<div class="cache-button">
	<button @onclick=CacheBtn_Click>キャッシュを消去する</button>
</div>
<style>
	body {
		font-family: Arial, sans-serif;
		margin: 0;
		padding: 0;
		background-color: #f5f6f1;
	}


	.privacypolicy {
		border: 2px solid #BBBBBB;
		border-radius: 5px;
		background-color: white;
		margin-top: 20px;
	}

		.privacypolicy > p {
			margin: 10px;
		}

	.checkbox{
		margin-top: 10px;
	}

	.cache-button {
		display: flex;
		justify-content: end;
		align-items: center;
		position: absolute;
		right: 20px;
		bottom: 40px;
	}

		.cache-button button {
			padding: 10px 20px;
			border: none;
			border-radius: 30px;
			font-size: 16px;
			cursor: pointer;
			transition: background-color 0.3s, color 0.3s;
			text-decoration: none;
		}

	#desc {
		font-size: 22px;
		color: #333;
		text-align: center;
		margin-top: 20px;
		font-weight: 600
	}

	#username {
		display: block;
		width: 300px;
		height: 40px;
		border: 2px solid #ccc;
		border-radius: 10px;
		margin: 20px auto;
		padding: 10px;
		font-size: 16px;
	}

	#submit {
		display: block;
		width: 200px;
		height: 50px;
		background: linear-gradient(to right, #ff105f, #ffad06);
		border: none;
		border-radius: 10px;
		color: white;
		font-size: 18px;
		font-weight: bold;
		margin: 10px auto;
		cursor: pointer;
		box-shadow: 0 5px 15px rgba(0,0,0,0.2);
	}

		#submit:hover {
			transform: scale(1.1);
		}

		#submit:active {
			transform: scale(0.9);
		}

		#submit[disabled] {
			background: #A0A0A0;
		}
		#submit[disabled]:hover{
			transform: none;
		}
		#submit[disabled]:active{
			transform: none;
		}


	#usernameError {
		margin-top: 20px;
		text-align: center;
		font-size: 16px;
	}

</style>

@code {

	private bool IsLoading = true;
	private string LoadingMsg = "読み込み中...";
	private bool IsAccepted;
	private bool IsDisabled = true;
	private string UserNameModel = string.Empty;
	private string ErrorMsg = string.Empty;
	private string ErrorMsgColor = "black";
	private static readonly Regex UserNameCharRegex = new("^[0-9A-Za-z_ぁ-ヿ]*$");
	private static readonly Regex UserNameLengthRegex = new("^.{3,17}$");


	protected override async Task OnInitializedAsync()
	{
		NavigationManager.LocationChanged += (s, e) =>
		{
			var location = e.Location;
			var slash = location.LastIndexOf('/');
			if(location[slash..] == "/manualquery")
				return;

			try
			{
				ManualQuery.Cancellation.Cancel();
			}
			catch { }
		};
		try
		{
			LoadingMsg = "ユーザー情報を読み込み中...";
			await AppSettings.InitUserInfoAsync(LocalStorage);
			LoadingMsg = "設定を同期中...";
			StateHasChanged();
			await AppSettings.SetupAsync(LocalStorage);

			if (AppSettings.IsLoggedIn)
			{
				LoadingMsg = "ハッシュを初期化中...";
				StateHasChanged();
				await Task.WhenAny(AppSettings.RefreshHashAsync(Http, LocalStorage), Task.Delay(3000));
				LoadingMsg = "準備中...";
				StateHasChanged();
				Server.Log(new
				{
					Type = "LOGIN",
					UserInfo = new
					{
						Name = AppSettings.UserName,
						Guid = AppSettings.Guid,
						Hash = AppSettings.Hash,
					},
					Date = DateTime.Now
				});
				NavigationManager.NavigateTo("top");
				return;
			}
			IsLoading = false;
			StateHasChanged();
		}
		catch(Exception ex)
		{
			await JSRuntime.AlertEx(ex);
		}
	}

	private void OnChange()
	{
		IsDisabled = !IsDisabled;
		StateHasChanged();
	}

	private async Task OnSubmit()
	{
		var userName = UserNameModel;
		if (!UserNameCharRegex.IsMatch(userName))
		{
			ErrorMsgColor = "darkred";
			ErrorMsg = "ひらがな、カタカナ、および英数字を使用してください。";
			StateHasChanged();
			return;
		}
		if (!UserNameLengthRegex.IsMatch(userName))
		{
			ErrorMsgColor = "darkred";
			ErrorMsg = "３文字以上１６文字以下のユーザー名を入力してください。";
			StateHasChanged();
			return;
		}
		ErrorMsgColor = "black";
		ErrorMsg = "読み込み中...";
		StateHasChanged();
		await Task.Delay(1);

		var guid = Guid.NewGuid().ToString();
		var hash = await AppSettings.GetHashAsync(Http);

		await AppSettings.SetUserInfoAsync(LocalStorage, userName, guid, hash);

		Server.Log(new
		{
			Type = "REGISTER",
			UserInfo = new
			{
				Name = AppSettings.UserName,
				Guid = AppSettings.Guid,
				Hash = AppSettings.Hash
			},
			Date = DateTime.Now
		});
		NavigationManager.NavigateTo("top");
	}


	private async Task CacheBtn_Click()
	{
		if (!await JSRuntime.Confirm("すべての キャッシュを消去します。よろしいですか？")) return;

		await LocalStorage.ClearAsync();
		await JSRuntime.InvokeVoidAsync("alert", "キャッシュを消去しました。");
	}
}
