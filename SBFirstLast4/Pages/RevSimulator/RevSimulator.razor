@page "/rev-simulator"
@namespace SBFirstLast4.Pages
@using SBFirstLast4.Logging
@using SBFirstLast4.Specialized.RevSimulator
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<PageTitle>@AppTitle.Format("革命シミュレーター")</PageTitle>

@if (IsRunning)
{
	<p style="color: gray">計算中...</p>
	return;
}
<div style="display: flex; flex-flow: column; gap: 20px;">
	<div class="text-pane">
		<p class="pane-title" style="font-size: 30px;">革命シミュレーター</p>
		<p class="text-content">
			革命合戦の勝敗を完全に予測し、自分が勝利する場合は最短のパターンを、
			敗北する場合は最長のパターンを出力します。<br><br>
			（HPが多すぎる場合、攻撃力や防御力が低すぎる場合などでは、最悪の場合計算に数時間かかります）
		</p>
	</div>
	<div class="text-pane">
		<p class="pane-title">相手の単語</p>
		<div id="word-grid">
			<img class="word-image" src="images/play.gif" style="grid-column: 1; grid-row: 1; justify-self: end; margin-right: 7px;" />
			<img class="word-image" src="@Image(FirstWordType)" style="grid-column: 2; grid-row: 1; justify-self: start; margin-left: 7px;" />
			<div class="type" style="grid-column: 1; grid-row: 2; justify-self: end; margin-right: 40px;">
				<span>遊び</span>
			</div>
			<div class="type" style="grid-column: 2; grid-row: 2; justify-self: start; margin-left: 40px;">
				<span>@FirstWordTypeStr</span>
			</div>
			<img class="btn-edit" src="images/pen.png" style="grid-column: 2; grid-row: 2; justify-self: start; top: -15px; left: 105px;" />
			<select id="transparent-select" style="grid-column: 2; grid-row: 1;" @bind=FirstWordTypeStr>
				@foreach (var i in TypeNames)
				{
					<option value="@i">@i</option>
				}
			</select>
			<p style="grid-column: 1/3; grid-row: 4; font-family: mplus-1p-bold; font-size: 50px; line-height: 50px;">@FirstWordName.At(0)</p>
			<img class="btn-edit" src="images/pen.png" style="grid-column: 2; grid-row: 2; justify-self: start; margin-left: 40px; margin-top: 100px;" @onclick="() => TransparentScreen(true)" />
			@if (ShowTransparentScreen)
			{
				<div id="edit-form">
					<p class="status-label" style="margin-top: 20px;">最後の文字</p>
					<input id="edit-form-input" maxlength="1" @bind=FirstWordName />
				</div>
			}
		</div>
	</div>
	<div class="text-pane">
		<p class="pane-title">自分のステータス</p>
		<div class="status-grid">
			<p class="status-label" style="grid-column: 1; grid-row: 1;">体力</p>
			<input class="input-menu" type="number" style="grid-column: 2; grid-row: 1;" @bind=AllyHP />
		</div>
		<div class="status-grid">
			<p class="status-label" style="grid-column: 1; grid-row: 1;">攻撃力</p>
			<select class="select-menu" style="grid-column: 2; grid-row: 1;" @bind=AllyATK>
				@foreach (var i in StatusValues)
				{
					<option value="@i">@i</option>
				}
			</select>
		</div>
		<div class="status-grid">
			<p class="status-label" style="grid-column: 1; grid-row: 1;">防御力</p>
			<select class="select-menu" style="grid-column: 2; grid-row: 1;" @bind=AllyDEF>
				@foreach (var i in StatusValues)
				{
					<option value="@i">@i</option>
				}
			</select>
		</div>
		<div class="status-grid">
			<p class="status-label" style="grid-column: 1; grid-row: 1;">乱数</p>
			<select class="select-menu" style="grid-column: 2; grid-row: 1;" @bind=AllyRandom>
				@foreach (var i in RandomValues)
				{
					<option value="@i">@i</option>
				}
			</select>
		</div>
	</div>
	<div class="text-pane">
		<p class="pane-title">相手のステータス</p>
		<div class="status-grid">
			<p class="status-label" style="grid-column: 1; grid-row: 1;">体力</p>
			<input class="input-menu" type="number" style="grid-column: 2; grid-row: 1;" @bind=FoeHP />
		</div>
		<div class="status-grid">
			<p class="status-label" style="grid-column: 1; grid-row: 1;">攻撃力</p>
			<select class="select-menu" style="grid-column: 2; grid-row: 1;" @bind=FoeATK>
				@foreach (var i in StatusValues)
				{
					<option value="@i">@i</option>
				}
			</select>
		</div>
		<div class="status-grid">
			<p class="status-label" style="grid-column: 1; grid-row: 1;">防御力</p>
			<select class="select-menu" style="grid-column: 2; grid-row: 1;" @bind=FoeDEF>
				@foreach (var i in StatusValues)
				{
					<option value="@i">@i</option>
				}
			</select>
		</div>
		<div class="status-grid">
			<p class="status-label" style="grid-column: 1; grid-row: 1;">乱数</p>
			<select class="select-menu" style="grid-column: 2; grid-row: 1;" @bind=FoeRandom>
				@foreach (var i in RandomValues)
				{
					<option value="@i">@i</option>
				}
			</select>
		</div>
	</div>
	<div class="text-pane">
		<p class="pane-title">最長チェーン</p>
		<input class="input-menu" type="number" @bind=MaxLength />
	</div>
	<div class="text-pane">
		<p class="pane-title">禁止単語</p>
		@if (BannedWords.Count > 0)
		{
			<div class="filters-textarea" style="box-shadow: none;">
				<ul class="filters-sortable">
					@foreach (var i in BannedWords)
					{
						<li class="filters-frame" @onclick="() =>
						{
							BannedWords.Remove(i);
							StateHasChanged();
						}">
							@i
							<span class="filters-delete" role="button" tabindex="0" />
						</li>
					}
				</ul>
			</div>
		}
		<input class="text-input" id="bannedwords-input" type="text" placeholder="単語を入力..." @onkeydown=EndCharInput_KeyDown />
		<br />
	</div>
	<button id="btn-execute" @onclick=RunBtn_OnClick>じっこう！</button>
</div>
@if (ShowTransparentScreen)
{
	<div id="transparent-screen" @onclick=@(() => TransparentScreen(false)) />
}
<link rel="stylesheet" href="css/fonts.css" />
<style>
	body {
		background-color: #F5F6F1;
	}

	.text-pane {
		background-color: white;
		margin: 20px;
		padding: 10px 30px 10px 30px;
		box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2);
		border-radius: 20px;
		color: black;
		display: flex;
		flex-flow: column;
		align-content: center;
		text-align: center;
		row-gap: 20px;
	}

	.pane-title {
		font-weight: bold;
		margin: 20px;
		font-size: 22px;
	}

	.text-content {
		font-size: 18px;
	}

	.word-image {
		width: 120px;
		height: 120px;
	}

	.btn-edit {
		border: 1px solid gray;
		border-radius: 50px;
		background-color: white;
		width: 30px;
		height: 30px;
		position: relative;
	}

	#transparent-select {
		-moz-appearance: none;
		-webkit-appearance: none;
		background-color: transparent;
		color: transparent;
		border-color: transparent;
		position: relative;
		bottom: -20px;
		right: 0px;
		margin-top: 0px;
		margin-left: 0px;
		max-width: 150px;
	}

		#transparent-select:focus {
			background-color: transparent;
			color: transparent;
			border-color: transparent;
			outline: none !important;
			box-shadow: none !important;
		}

		#transparent-select option {
			border-color: lightgray;
			background-color: white;
			color: black;
			text-align: center;
			font-size: 17px;
			max-width: 60px;
		}

		#transparent-select::-ms-expand {
			display: none;
		}


	#word-grid {
		display: grid;
		grid-template-rows: 120px 20px 50px 60px;
		grid-template-columns: auto auto;
		padding-bottom: 50px;
	}

	.type {
		text-align: center;
		line-height: 60%;
		width: 64px;
		top: 0px;
		float: left;
	}

		.type span {
			font-size: 12px;
			word-break: keep-all;
			padding-left: 5px;
			padding-right: 5px;
			border-radius: 10px;
			background-color: white;
			border: 1px solid gray;
		}

	#edit-form {
		grid-column: 1/3;
		grid-row: 4;
		background-color: white;
		border-color: darkgray;
		box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2);
		width: min(90%, 200px);
		height: 180px;
		z-index: 5;
		justify-self: center;
		margin-top: -150px;
	}

	#edit-form-input {
		width: 50px;
		height: 46px;
		font-size: 20px;
		text-align: center;
		line-height: 20px;
		margin-top: 20px;
	}

	.status-grid {
		display: grid;
		grid-template-columns: 30% 70%;
	}

	.status-label {
		font-weight: bold;
		justify-self: center;
		font-size: 17px;
		align-self: center;
		margin-bottom: 0px;
	}

	.input-menu {
		color: black;
		padding: 8px 12px;
		margin-top: 12px;
		margin-bottom: 12px;
		text-decoration: none;
	}

	.select-menu {
		-moz-appearance: none;
		-webkit-appearance: none;
		color: black;
		padding: 8px 12px;
		margin-top: 12px;
		margin-bottom: 12px;
		text-decoration: none;
	}

		.select-menu::-ms-expand {
			display: none;
		}

	.filters-textarea {
		background: #fff;
		border: 1px solid #ddd;
		box-sizing: border-box;
		margin: 2px 0;
		padding: 4px;
		width: 100%;
	}

	.filters-sortable {
		-webkit-padding-start: 0;
		align-items: center;
		display: flex;
		flex-wrap: wrap;
		justify-content: left;
		list-style: none;
		margin: 0;
		padding-inline-start: 0;
		padding: 0;
		gap: 10px;
		min-height: 19px;
	}

	.filters-frame {
		background: #fff;
		border: 1px solid #d9d9d9;
		border-radius: 5px;
		box-shadow: none;
		color: #404040;
		cursor: pointer;
		font-size: 17px;
		margin: 0;
		max-height: 100%;
		max-width: 100%;
		padding: 1px 23px 1px 6px;
		resize: none;
		word-break: break-all;
		z-index: 10;
	}

	.filters-delete {
		background: #fff;
		border-radius: 50%;
		box-shadow: 0 0 1px 1px #999;
		cursor: pointer;
		display: inline-block;
		height: 15px;
		line-height: 5px;
		margin-left: 3px;
		margin-top: 4px;
		position: absolute;
		vertical-align: middle;
		width: 15px;
	}

		.filters-delete::before, .filters-delete::after {
			background-color: #666;
			content: "";
			height: 1px;
			left: 2px;
			position: absolute;
			top: 7px;
			-webkit-transform: rotate(45deg);
			transform: rotate(45deg);
			width: 11px;
		}

		.filters-delete::after {
			-webkit-transform: rotate(-45deg);
			transform: rotate(-45deg);
		}

	#btn-execute {
		align-self: center;
		text-align: center;
		width: 75%;
		font-family: mplus-1p-bold;
		line-height: 60px;
		font-weight: bold;
		height: 80px;
		background-color: #9A5252;
		border: 5px solid #C44041;
		border-radius: 30px;
		font-size: 24px;
		cursor: pointer;
		color: white;
		transition: background-color 0.3s, color 0.3s;
		text-decoration: none;
		margin-top: 20px;
		margin-bottom: 50px;
	}

	#transparent-screen {
		position: absolute;
		top: 0px;
		left: 0px;
		z-index: 2;
		background-color: #DDDDDDDD;
		width: 100%;
		height: 100%;
	}
</style>
@code {

	private static string FirstWordName = "あ";

	private static string FirstWordTypeStr = "なし";
	private WordType FirstWordType => FirstWordTypeStr.StringToType();

	private static string AllyHP = "60";
	private static string FoeHP = "60";

	private static string AllyATK = "1.0 倍";
	private static string FoeATK = "1.0 倍";

	private static string AllyDEF = "1.0 倍";
	private static string FoeDEF = "1.0 倍";

	private static string AllyRandom = "0.85";
	private static string FoeRandom = "0.85";

	private static string MaxLength = "100";

	private List<string> BannedWords = [];

	private static readonly IEnumerable<string> TypeNames = Enum.GetValues<WordType>().Select(t => t == default ? "単タイプ" : t.TypeToString());

	private static readonly string[] StatusValues = ["0.25 倍", "0.28 倍", "0.33 倍", "0.4 倍", "0.5 倍", "0.66 倍", "1.0 倍", "1.5 倍", "2.0 倍", "2.5 倍", "3.0 倍", "3.5 倍", "4.0 倍"];

	private static readonly string[] RandomValues = ["0.85", "0.86", "0.87", "0.88", "0.89", "0.90", "0.91", "0.92", "0.93", "0.94", "0.95", "0.96", "0.97", "0.98", "0.99"];

	private bool ShowTransparentScreen;

	private bool IsRunning;

	protected override async Task OnInitializedAsync()
	{
		if (!AppSettings.IsLoggedIn)
		{
			NavigationManager.Return();
			return;
		}

		if (!Words.IsLoadedCorrectly)
		{
			NavigationManager.GoToTop();
			return;
		}

		await Server.Log(StatusTypes.RevSimulatorOpen);
	}

	private async Task EndCharInput_KeyDown(KeyboardEventArgs e)
	{
		if (e.Key is "Process" or not "Enter") return;
		var wordText = await JSRuntime.GetElementValueById<string>("bannedwords-input");
		await Task.Delay(1);
		if (string.IsNullOrWhiteSpace(wordText))
		{
			await JSRuntime.ClearElementValueById("bannedwords-input");
			StateHasChanged();
			await Task.Delay(1);
			return;
		}
		BannedWords.AddRange(wordText.Split([' ', ',', '、']).Select(x => x.Trim()).Where(s => s.Length > 0));
		BannedWords = BannedWords.Distinct().ToList();
		StateHasChanged();
		await Task.Delay(1);
		await JSRuntime.ClearElementValueById("bannedwords-input");
		StateHasChanged();
	}

	private async Task RunBtn_OnClick()
	{
		var (allyHP, foeHP, maxLength) = (await IntParse(AllyHP), await IntParse(FoeHP), await IntParse(MaxLength));

		if (allyHP is null || foeHP is null || maxLength is null)
			return;

		var (allyATK, allyDEF, allyRandom) = (DoubleParse(AllyATK), DoubleParse(AllyDEF), double.Parse(AllyRandom));
		var (foeATK, foeDEF, foeRandom) = (DoubleParse(FoeATK), DoubleParse(FoeDEF), double.Parse(FoeRandom));

		IsRunning = true;
		StateHasChanged();
		await Task.Delay(10);

		RevSimulatorResult.Settings = ((allyATK, allyDEF, allyRandom), (foeATK, foeDEF, foeRandom));
		RevSimulatorResult.History = Main.EntryPoint(
			firstWord: new(FirstWordName, WordType.Play, FirstWordType),
			ally: (allyHP.Value, allyATK, allyDEF, allyRandom),
			foe: (foeHP.Value, foeATK, foeDEF, foeRandom),
			maxLength: maxLength.Value,
			bannedWords: BannedWords.ToHashSet()
		);
		await Server.Log
		(
			type: "REV_SIMULATOR",
			order: new
			{
				Char = FirstWordName,
				WType = FirstWordTypeStr,
				HP = $"{AllyHP} {FoeHP}",
				ATK = $"{AllyATK} {FoeATK}",
				DEF = $"{AllyDEF} {FoeDEF}",
				Rand = $"{AllyRandom} {FoeRandom}",
				MaxLen = MaxLength,
				Banned = $"{BannedWords.StringJoin(' ')}"
			}
		);
		NavigationManager.GoTo(Locations.RevSimulator.Result);
	}

	private void TransparentScreen(bool show)
	{
		ShowTransparentScreen = show;
		StateHasChanged();
	}

	private async Task<int?> IntParse(string str)
	{
		if (int.TryParse(str.Trim(), out var result))
			return result;

		await JSRuntime.Alert($"無効な値です: {str}");
		return null;
	}

	// "〇〇 倍" の「〇〇」部分だけ取り出して変換
	private double DoubleParse(string str) => double.Parse(str.AsSpan()[..^2]);

	private string Image(WordType type) => type == default ? "images/transparent.png" : type.TypeToImg();
}
